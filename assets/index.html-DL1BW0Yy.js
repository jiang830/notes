import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as t,b as a,e as n,d as r,a as c}from"./app-CT4bPn0M.js";const p={},h=a("p",null,"（面试大厂的面试题）https://juejin.im/post/5ec0ff4a6fb9a043271c76e9?utm_source=gold_browser_extension",-1),o=a("h2",{id:"java基础",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java基础"},[a("span",null,"Java基础")])],-1),d=a("h3",{id:"_1-string和stringbuffer和stringbuilder区别",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-string和stringbuffer和stringbuilder区别"},[a("span",null,"1. String和StringBuffer和StringBuilder区别")])],-1),u=a("p",null,[a("strong",null,"可变性"),n(" 简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，"),a("code",null,"private final char value[]"),n("，所以 String 对象是不可变的。")],-1),_={href:"https://github.com/Snailclimb/JavaGuide/issues/675",target:"_blank",rel:"noopener noreferrer"},b=a("code",null,"private final byte[] value",-1),k=c(`<p>而 StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。</p><p><code>AbstractStringBuilder.java</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * The value is used for character storage.
     */</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The count is the number of characters used.
     */</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token class-name">AbstractStringBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>线程安全性</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>性能</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol><li>操作少量的数据: 适用 String</li><li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li></ol><h3 id="_2-string为啥默认用final" tabindex="-1"><a class="header-anchor" href="#_2-string为啥默认用final"><span>2. String为啥默认用final</span></a></h3><h3 id="_3-和equals区别-详细比如相同对象比较、以及相同integer" tabindex="-1"><a class="header-anchor" href="#_3-和equals区别-详细比如相同对象比较、以及相同integer"><span>3. ==和equals区别（详细比如相同对象比较、以及相同integer）</span></a></h3><p><strong>==</strong> : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p><strong>举个例子：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> test1 <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 为一个引用</span>
        <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b为另一个引用,对象的内容一样</span>
        <span class="token class-name">String</span> aa <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 放在常量池中</span>
        <span class="token class-name">String</span> bb <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 从常量池中查找</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>aa <span class="token operator">==</span> bb<span class="token punctuation">)</span> <span class="token comment">// true</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;aa==bb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment">// false，非同一对象</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a==b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;aEQb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// true</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h3 id="_4-hashmap和hashset" tabindex="-1"><a class="header-anchor" href="#_4-hashmap和hashset"><span>4. hashMap和hashSet</span></a></h3><h3 id="_5-集合类-比如arraylist底层有什么的" tabindex="-1"><a class="header-anchor" href="#_5-集合类-比如arraylist底层有什么的"><span>5. 集合类（比如ArrayList底层有什么的）</span></a></h3><p>底层为数组</p><h3 id="_6-多线程sleep和wait-以及-notify和notifyall" tabindex="-1"><a class="header-anchor" href="#_6-多线程sleep和wait-以及-notify和notifyall"><span>6. 多线程sleep和wait 以及 notify和notifyAll</span></a></h3><h3 id="_7-如何创建线程-几种方式-再往深处扩展" tabindex="-1"><a class="header-anchor" href="#_7-如何创建线程-几种方式-再往深处扩展"><span>7. 如何创建线程，几种方式，再往深处扩展</span></a></h3><h3 id="_8-还有就是抽象类和接口的区别" tabindex="-1"><a class="header-anchor" href="#_8-还有就是抽象类和接口的区别"><span>8. 还有就是抽象类和接口的区别</span></a></h3><h3 id="_9-动态代理有哪些-有什么场景-区别" tabindex="-1"><a class="header-anchor" href="#_9-动态代理有哪些-有什么场景-区别"><span>9. 动态代理有哪些，有什么场景，区别</span></a></h3><h3 id="_10-int-和integer的区别" tabindex="-1"><a class="header-anchor" href="#_10-int-和integer的区别"><span>10. int 和Integer的区别</span></a></h3><h3 id="_11-jdbc和mybatis的区别" tabindex="-1"><a class="header-anchor" href="#_11-jdbc和mybatis的区别"><span>11. jdbc和mybatis的区别</span></a></h3><h3 id="_12-和-区别" tabindex="-1"><a class="header-anchor" href="#_12-和-区别"><span>12. #{} 和 \${}区别</span></a></h3><h3 id="_13-分页查询除了使用limit-还能有哪种方式实现-pagehelper插件" tabindex="-1"><a class="header-anchor" href="#_13-分页查询除了使用limit-还能有哪种方式实现-pagehelper插件"><span>13. 分页查询除了使用limit，还能有哪种方式实现 pagehelper插件</span></a></h3><h3 id="_14-jvm的模型有什么" tabindex="-1"><a class="header-anchor" href="#_14-jvm的模型有什么"><span>14. jvm的模型有什么</span></a></h3><h3 id="_15-jvm了解吗" tabindex="-1"><a class="header-anchor" href="#_15-jvm了解吗"><span>15. jvm了解吗</span></a></h3><h3 id="_16-包括gc什么的-以及内部的一些东西" tabindex="-1"><a class="header-anchor" href="#_16-包括gc什么的-以及内部的一些东西"><span>16. 包括gc什么的，以及内部的一些东西</span></a></h3><h3 id="_17-http和https以及tcp-ip-以及socket" tabindex="-1"><a class="header-anchor" href="#_17-http和https以及tcp-ip-以及socket"><span>17. http和https以及tcp/ip 以及socket</span></a></h3><h3 id="_18-runable和callable" tabindex="-1"><a class="header-anchor" href="#_18-runable和callable"><span>18. runable和callable</span></a></h3><h3 id="_19-sychornized-和lock的区别-lock底层用的reentrantlock、readwritelock" tabindex="-1"><a class="header-anchor" href="#_19-sychornized-和lock的区别-lock底层用的reentrantlock、readwritelock"><span>19. Sychornized 和lock的区别，lock底层用的ReentrantLock、ReadWriteLock</span></a></h3><h3 id="_20-threadlocal-以及-volatile" tabindex="-1"><a class="header-anchor" href="#_20-threadlocal-以及-volatile"><span>20. Threadlocal 以及 volatile</span></a></h3><h3 id="_21-aqs-是原理" tabindex="-1"><a class="header-anchor" href="#_21-aqs-是原理"><span>21. AQS 是原理</span></a></h3><h3 id="_22-线程池了解吗-有哪几种线程池-使用场景有哪些" tabindex="-1"><a class="header-anchor" href="#_22-线程池了解吗-有哪几种线程池-使用场景有哪些"><span>22. 线程池了解吗 ，有哪几种线程池，使用场景有哪些，</span></a></h3><h3 id="_23-比如有4个线程执行-合并结果集" tabindex="-1"><a class="header-anchor" href="#_23-比如有4个线程执行-合并结果集"><span>23. 比如有4个线程执行，合并结果集</span></a></h3><h3 id="_24-锁细分-读写锁-偏向锁-自旋锁-轻量级锁-重量级锁" tabindex="-1"><a class="header-anchor" href="#_24-锁细分-读写锁-偏向锁-自旋锁-轻量级锁-重量级锁"><span>24. 锁细分，读写锁，偏向锁，自旋锁，轻量级锁，重量级锁</span></a></h3><h3 id="_25-阻塞队列和非阻塞队列-包括一些常用的队列的说明" tabindex="-1"><a class="header-anchor" href="#_25-阻塞队列和非阻塞队列-包括一些常用的队列的说明"><span>25. 阻塞队列和非阻塞队列（包括一些常用的队列的说明，）</span></a></h3><h3 id="_26-有界队列和无界队列-区别-为啥分有界和无界" tabindex="-1"><a class="header-anchor" href="#_26-有界队列和无界队列-区别-为啥分有界和无界"><span>26. 有界队列和无界队列（区别，为啥分有界和无界）</span></a></h3><h3 id="_27-反射和jvm的执行引擎有什么区别" tabindex="-1"><a class="header-anchor" href="#_27-反射和jvm的执行引擎有什么区别"><span>27. 反射和jvm的执行引擎有什么区别</span></a></h3><h3 id="_28-tcp和udp的区别" tabindex="-1"><a class="header-anchor" href="#_28-tcp和udp的区别"><span>28. tcp和udp的区别</span></a></h3><h3 id="_29-什么是面向连接-什么是面向无连接" tabindex="-1"><a class="header-anchor" href="#_29-什么是面向连接-什么是面向无连接"><span>29. 什么是面向连接，什么是面向无连接</span></a></h3><h3 id="_30-tcp的为什么是可靠连接" tabindex="-1"><a class="header-anchor" href="#_30-tcp的为什么是可靠连接"><span>30. tcp的为什么是可靠连接</span></a></h3><h3 id="_31-拆包和装包是什么-连接这方面的" tabindex="-1"><a class="header-anchor" href="#_31-拆包和装包是什么-连接这方面的"><span>31. 拆包和装包是什么，连接这方面的</span></a></h3><h3 id="_32-spring和springmvc的常用注解" tabindex="-1"><a class="header-anchor" href="#_32-spring和springmvc的常用注解"><span>32. spring和springmvc的常用注解</span></a></h3><h3 id="_33-spring的ioc和aop" tabindex="-1"><a class="header-anchor" href="#_33-spring的ioc和aop"><span>33. spring的ioc和aop</span></a></h3><h3 id="_34-spring的bean是怎么管理-beanfactory以及applicationcontext" tabindex="-1"><a class="header-anchor" href="#_34-spring的bean是怎么管理-beanfactory以及applicationcontext"><span>34. spring的bean是怎么管理，beanfactory以及applicationcontext</span></a></h3><h3 id="_35-springboot的注解-三大注解有什么作用" tabindex="-1"><a class="header-anchor" href="#_35-springboot的注解-三大注解有什么作用"><span>35. springboot的注解，三大注解有什么作用，</span></a></h3><h3 id="_36-springboot的compantscan扫描范围是所有的包还是到哪一层" tabindex="-1"><a class="header-anchor" href="#_36-springboot的compantscan扫描范围是所有的包还是到哪一层"><span>36. springboot的compantScan扫描范围是所有的包还是到哪一层；</span></a></h3><h3 id="_37-springcloud用过什么-削峰-限流-其他一些实战-看你用没用过" tabindex="-1"><a class="header-anchor" href="#_37-springcloud用过什么-削峰-限流-其他一些实战-看你用没用过"><span>37. Springcloud用过什么，削峰，限流，其他一些实战（看你用没用过）</span></a></h3><h3 id="_38-future相关的" tabindex="-1"><a class="header-anchor" href="#_38-future相关的"><span>38. future相关的</span></a></h3><h3 id="_39-servlet-的生命周期是" tabindex="-1"><a class="header-anchor" href="#_39-servlet-的生命周期是"><span>39. servlet 的生命周期是</span></a></h3><h3 id="_40-session-和-application-的区别-已经cookie" tabindex="-1"><a class="header-anchor" href="#_40-session-和-application-的区别-已经cookie"><span>40. session 和 application 的区别 已经cookie</span></a></h3><h3 id="_41-动态代理-jdk代理和cglib代理区别啥的" tabindex="-1"><a class="header-anchor" href="#_41-动态代理-jdk代理和cglib代理区别啥的"><span>41. 动态代理 jdk代理和cglib代理区别啥的</span></a></h3><h3 id="_42-run和start区别-整个过程还有什么" tabindex="-1"><a class="header-anchor" href="#_42-run和start区别-整个过程还有什么"><span>42. run和start区别 ，整个过程还有什么</span></a></h3><h3 id="_43-spring执行机制" tabindex="-1"><a class="header-anchor" href="#_43-spring执行机制"><span>43. spring执行机制</span></a></h3><h3 id="_44-spring事务-以及事务会问你事务除了acid外-还有脏读-不可重复读-幻读可详细说-事务的传播机制7种-事务的隔离级别-可能会出题-比如a方法使用事务-b方法没有使用-那么a调用b会有几种情况-你使用事务哪种级别" tabindex="-1"><a class="header-anchor" href="#_44-spring事务-以及事务会问你事务除了acid外-还有脏读-不可重复读-幻读可详细说-事务的传播机制7种-事务的隔离级别-可能会出题-比如a方法使用事务-b方法没有使用-那么a调用b会有几种情况-你使用事务哪种级别"><span>44. spring事务，以及事务会问你事务除了ACID外，还有脏读，不可重复读，幻读可详细说，事务的传播机制7种，事务的隔离级别，可能会出题，比如A方法使用事务，B方法没有使用，那么A调用B会有几种情况，你使用事务哪种级别</span></a></h3><h3 id="_45-mybatis的事务" tabindex="-1"><a class="header-anchor" href="#_45-mybatis的事务"><span>45. mybatis的事务，</span></a></h3><h3 id="_46-springmvc的执行流程" tabindex="-1"><a class="header-anchor" href="#_46-springmvc的执行流程"><span>46. springmvc的执行流程</span></a></h3><h3 id="_47-线上的修改配置文件的环境比如数据库配置-怎么修改-是不是同一个目录下" tabindex="-1"><a class="header-anchor" href="#_47-线上的修改配置文件的环境比如数据库配置-怎么修改-是不是同一个目录下"><span>47. 线上的修改配置文件的环境比如数据库配置，怎么修改，是不是同一个目录下</span></a></h3><h3 id="_48-过滤器和拦截器区别-实战用到没有-怎么用的" tabindex="-1"><a class="header-anchor" href="#_48-过滤器和拦截器区别-实战用到没有-怎么用的"><span>48. 过滤器和拦截器区别，实战用到没有，怎么用的</span></a></h3><h3 id="_49-设计模式用过哪些-项目中用到的设计模式有哪些-说几个熟悉-可能再往深处扩展-比如你怎么实现-怎么写" tabindex="-1"><a class="header-anchor" href="#_49-设计模式用过哪些-项目中用到的设计模式有哪些-说几个熟悉-可能再往深处扩展-比如你怎么实现-怎么写"><span>49. 设计模式用过哪些，项目中用到的设计模式有哪些，说几个熟悉，可能再往深处扩展，比如你怎么实现，怎么写</span></a></h3><h3 id="_50-观察者模式和redis的订阅和消费" tabindex="-1"><a class="header-anchor" href="#_50-观察者模式和redis的订阅和消费"><span>50. 观察者模式和redis的订阅和消费</span></a></h3><h3 id="_51-netty有没有用过-netty的优势是啥-你为啥用-项目中怎么用的" tabindex="-1"><a class="header-anchor" href="#_51-netty有没有用过-netty的优势是啥-你为啥用-项目中怎么用的"><span>51. netty有没有用过，netty的优势是啥， 你为啥用，项目中怎么用的</span></a></h3><h3 id="_52-微服务和分布式区别" tabindex="-1"><a class="header-anchor" href="#_52-微服务和分布式区别"><span>52. 微服务和分布式区别</span></a></h3><h3 id="_53-微服务再细一点-我这边没怎么问-没用到" tabindex="-1"><a class="header-anchor" href="#_53-微服务再细一点-我这边没怎么问-没用到"><span>53. 微服务再细一点，我这边没怎么问，没用到</span></a></h3><h3 id="_54-dubbo和springcloud的区别" tabindex="-1"><a class="header-anchor" href="#_54-dubbo和springcloud的区别"><span>54. dubbo和springcloud的区别</span></a></h3><h3 id="_55-dubbo和zk连接流程" tabindex="-1"><a class="header-anchor" href="#_55-dubbo和zk连接流程"><span>55. dubbo和zk连接流程</span></a></h3><h3 id="_56-dubbo再往深处-比如负载均衡以及容错机制-再往深处" tabindex="-1"><a class="header-anchor" href="#_56-dubbo再往深处-比如负载均衡以及容错机制-再往深处"><span>56. dubbo再往深处，比如负载均衡以及容错机制，再往深处</span></a></h3><h3 id="_57-zk了解吗-没怎么问我" tabindex="-1"><a class="header-anchor" href="#_57-zk了解吗-没怎么问我"><span>57. zk了解吗，没怎么问我</span></a></h3><h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h2><h3 id="_1-数据库优化方式" tabindex="-1"><a class="header-anchor" href="#_1-数据库优化方式"><span>1.数据库优化方式</span></a></h3><h3 id="_2-sql优化方式" tabindex="-1"><a class="header-anchor" href="#_2-sql优化方式"><span>2.sql优化方式</span></a></h3><h3 id="_3-索引-通过执行explain-优化索引-比如覆盖索引-最左原则-组合索引遇到的几种方式不同" tabindex="-1"><a class="header-anchor" href="#_3-索引-通过执行explain-优化索引-比如覆盖索引-最左原则-组合索引遇到的几种方式不同"><span>3.索引，通过执行explain,优化索引， 比如覆盖索引，最左原则，组合索引遇到的几种方式不同</span></a></h3><h3 id="_4-b-tree和b-tree区别" tabindex="-1"><a class="header-anchor" href="#_4-b-tree和b-tree区别"><span>4.B tree和B+Tree区别</span></a></h3><h3 id="_5-innodb和myisam的区别" tabindex="-1"><a class="header-anchor" href="#_5-innodb和myisam的区别"><span>5.innodb和myisam的区别</span></a></h3><h3 id="_6-数据库表设计" tabindex="-1"><a class="header-anchor" href="#_6-数据库表设计"><span>6.数据库表设计</span></a></h3><h3 id="_7-三大范式" tabindex="-1"><a class="header-anchor" href="#_7-三大范式"><span>7.三大范式</span></a></h3><h3 id="_8-数据库查询leftjoin以及其他join-出题考你-还有就是写sql-比如俩个表-只取a表中与b表不共用的那部分-怎么实现" tabindex="-1"><a class="header-anchor" href="#_8-数据库查询leftjoin以及其他join-出题考你-还有就是写sql-比如俩个表-只取a表中与b表不共用的那部分-怎么实现"><span>8.数据库查询Leftjoin以及其他join 出题考你，还有就是写sql，比如俩个表，只取A表中与B表不共用的那部分，怎么实现</span></a></h3><h2 id="中间件-rabbitmq、kafka、rocketmq" tabindex="-1"><a class="header-anchor" href="#中间件-rabbitmq、kafka、rocketmq"><span>中间件(rabbitmq、kafka、rocketMq)</span></a></h2><h3 id="_1-使用的队列常见问题-如何保证消息一致性、保证消息不丢失、重复数据怎么处理-、生产者宕机-或者消费者宕机你怎么处理-、不消费怎么处理" tabindex="-1"><a class="header-anchor" href="#_1-使用的队列常见问题-如何保证消息一致性、保证消息不丢失、重复数据怎么处理-、生产者宕机-或者消费者宕机你怎么处理-、不消费怎么处理"><span>1.使用的队列常见问题 ( 如何保证消息一致性、保证消息不丢失、重复数据怎么处理 、生产者宕机 或者消费者宕机你怎么处理 、不消费怎么处理 )</span></a></h3><h3 id="_2-如果整个链路通的-但是数据不消费怎么处理" tabindex="-1"><a class="header-anchor" href="#_2-如果整个链路通的-但是数据不消费怎么处理"><span>2.如果整个链路通的，但是数据不消费怎么处理</span></a></h3><h3 id="_3-rabbitmq的死信队列-原因-之后怎么处理" tabindex="-1"><a class="header-anchor" href="#_3-rabbitmq的死信队列-原因-之后怎么处理"><span>3.rabbitmq的死信队列 ，原因，之后怎么处理</span></a></h3><h3 id="_4-会问rabbitmq和kakfa区别或者-和rockedmq区别" tabindex="-1"><a class="header-anchor" href="#_4-会问rabbitmq和kakfa区别或者-和rockedmq区别"><span>4.会问rabbitMq和kakfa区别或者 和rockedMq区别</span></a></h3><h3 id="_5-如何保证消息不会被重复消费" tabindex="-1"><a class="header-anchor" href="#_5-如何保证消息不会被重复消费"><span>5.如何保证消息不会被重复消费</span></a></h3><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>redis</span></a></h2><h3 id="_1-redis的5种数据类型-使用场景-你项目中用到没有" tabindex="-1"><a class="header-anchor" href="#_1-redis的5种数据类型-使用场景-你项目中用到没有"><span>1.redis的5种数据类型（使用场景，你项目中用到没有）</span></a></h3><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h4><blockquote><p><strong>常用命令:</strong> set,get,decr,incr,mget 等。</p></blockquote><p>String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。 常规key-value缓存应用； 常规计数：微博数，粉丝数等。</p><h4 id="hash" tabindex="-1"><a class="header-anchor" href="#hash"><span>Hash</span></a></h4><blockquote><p><strong>常用命令：</strong> hget,hset,hgetall 等。</p></blockquote><p>hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象，后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值。 比如我们可以 hash 数据结构来存储用户信息，商品信息等等。比如下面我就用 hash 类型存放了我本人的一些信息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>key=JavaUser293847
value={
  “id”: 1,
  “name”: “SnailClimb”,
  “age”: 22,
  “location”: “Wuhan, Hubei”
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h4><blockquote><p><strong>常用命令:</strong> lpush,rpush,lpop,rpop,lrange等</p></blockquote><p>list 就是链表，Redis list 的应用场景非常多，也是Redis最重要的数据结构之一，比如微博的关注列表，粉丝列表，消息列表等功能都可以用Redis的 list 结构来实现。</p><p>Redis list 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。</p><p>另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 list 实现分页查询，这个很棒的一个功能，基于 redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西（一页一页的往下走），性能高。</p><h4 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h4><blockquote><p><strong>常用命令：</strong> sadd,spop,smembers,sunion 等</p></blockquote><p>set 对外提供的功能与list类似是一个列表的功能，特殊之处在于 set 是可以自动排重的。</p><p>当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。</p><p>比如：在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程，具体命令如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sinterstore key1 key2 key3     将交集存在key1内
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="sorted-set" tabindex="-1"><a class="header-anchor" href="#sorted-set"><span>Sorted Set</span></a></h4><blockquote><p><strong>常用命令：</strong> zadd,zrange,zrem,zcard等</p></blockquote><p>和set相比，sorted set增加了一个权重参数score，使得集合中的元素能够按score进行有序排列。</p><p><strong>举例：</strong> 在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息，适合使用 Redis 中的 Sorted Set 结构进行存储。</p><h4 id="_2-redis的持久化-俩种方式-rdb和aof" tabindex="-1"><a class="header-anchor" href="#_2-redis的持久化-俩种方式-rdb和aof"><span>2.redis的持久化，俩种方式，rdb和aof，</span></a></h4><h4 id="_3-redis的订阅机制" tabindex="-1"><a class="header-anchor" href="#_3-redis的订阅机制"><span>3.redis的订阅机制</span></a></h4><h2 id="jvm总结" tabindex="-1"><a class="header-anchor" href="#jvm总结"><span>JVM总结</span></a></h2><h3 id="_1-jvm调优实战说一下" tabindex="-1"><a class="header-anchor" href="#_1-jvm调优实战说一下"><span>1.JVM调优实战说一下</span></a></h3><h3 id="_2-cms-gc的流程-cms-表示基于-标记清理的垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_2-cms-gc的流程-cms-表示基于-标记清理的垃圾回收器"><span>2.cms gc的流程 cms 表示基于 标记清理的垃圾回收器</span></a></h3><h3 id="_3-新生代和老年代标记算法优缺点" tabindex="-1"><a class="header-anchor" href="#_3-新生代和老年代标记算法优缺点"><span>3.新生代和老年代标记算法优缺点</span></a></h3><h3 id="_4-oom的排查思路" tabindex="-1"><a class="header-anchor" href="#_4-oom的排查思路"><span>4.oom的排查思路</span></a></h3><h3 id="_5-cms优缺点" tabindex="-1"><a class="header-anchor" href="#_5-cms优缺点"><span>5.cms优缺点</span></a></h3><h3 id="_6-对象什么时候进入老年代" tabindex="-1"><a class="header-anchor" href="#_6-对象什么时候进入老年代"><span>6.对象什么时候进入老年代</span></a></h3><h3 id="_7-什么时候触发fullgc" tabindex="-1"><a class="header-anchor" href="#_7-什么时候触发fullgc"><span>7.什么时候触发fullgc</span></a></h3><h3 id="_8-模拟oom和stack-overflow场景" tabindex="-1"><a class="header-anchor" href="#_8-模拟oom和stack-overflow场景"><span>8.模拟oom和Stack Overflow场景</span></a></h3><h3 id="_9-栈什么时候oom" tabindex="-1"><a class="header-anchor" href="#_9-栈什么时候oom"><span>9.栈什么时候oom</span></a></h3><h3 id="_10-怎么jvm中内存的使用情况" tabindex="-1"><a class="header-anchor" href="#_10-怎么jvm中内存的使用情况"><span>10.怎么jvm中内存的使用情况</span></a></h3><h3 id="_11-jmap是怎么做到的" tabindex="-1"><a class="header-anchor" href="#_11-jmap是怎么做到的"><span>11.jmap是怎么做到的</span></a></h3><h3 id="_12-java代码从编译到执行有哪些步骤" tabindex="-1"><a class="header-anchor" href="#_12-java代码从编译到执行有哪些步骤"><span>12.java代码从编译到执行有哪些步骤</span></a></h3><h3 id="_13-类加载过程" tabindex="-1"><a class="header-anchor" href="#_13-类加载过程"><span>13.类加载过程</span></a></h3><h3 id="_14-jar包冲突遇到过吗-jar包冲突时在类加载过程中哪一步报的错" tabindex="-1"><a class="header-anchor" href="#_14-jar包冲突遇到过吗-jar包冲突时在类加载过程中哪一步报的错"><span>14.jar包冲突遇到过吗？jar包冲突时在类加载过程中哪一步报的错</span></a></h3><h3 id="_15-让你实现一个jvm-标记垃圾的具体步骤你怎么做-怎么扫描垃圾-这些信息维护在哪" tabindex="-1"><a class="header-anchor" href="#_15-让你实现一个jvm-标记垃圾的具体步骤你怎么做-怎么扫描垃圾-这些信息维护在哪"><span>15.让你实现一个jvm,标记垃圾的具体步骤你怎么做，怎么扫描垃圾，这些信息维护在哪</span></a></h3><h2 id="实战总结" tabindex="-1"><a class="header-anchor" href="#实战总结"><span>实战总结</span></a></h2><h3 id="_1-分库分表的场景题-淘宝场景-买家卖家数据怎么存-怎么分库分表" tabindex="-1"><a class="header-anchor" href="#_1-分库分表的场景题-淘宝场景-买家卖家数据怎么存-怎么分库分表"><span>1. 分库分表的场景题，淘宝场景，买家卖家数据怎么存，怎么分库分表</span></a></h3><h3 id="_2-说说你在重构拆分中遇到的问题-你负责了哪些" tabindex="-1"><a class="header-anchor" href="#_2-说说你在重构拆分中遇到的问题-你负责了哪些"><span>2. 说说你在重构拆分中遇到的问题，你负责了哪些</span></a></h3><h3 id="_3-拆分你是怎么保证数据完整性的" tabindex="-1"><a class="header-anchor" href="#_3-拆分你是怎么保证数据完整性的"><span>3. 拆分你是怎么保证数据完整性的</span></a></h3><h3 id="_4-如果你当前系统压力-100倍你怎么设计" tabindex="-1"><a class="header-anchor" href="#_4-如果你当前系统压力-100倍你怎么设计"><span>4. 如果你当前系统压力*100倍你怎么设计</span></a></h3><h3 id="_5-如果根据压测流量路由到影子库" tabindex="-1"><a class="header-anchor" href="#_5-如果根据压测流量路由到影子库"><span>5. 如果根据压测流量路由到影子库</span></a></h3><h3 id="_6-https-tech-meituan-com-2018-09-27-quake-introduction-html" tabindex="-1"><a class="header-anchor" href="#_6-https-tech-meituan-com-2018-09-27-quake-introduction-html"><span>6. https://tech.meituan.com/2018/09/27/quake-introduction.html</span></a></h3><h3 id="_7-分布式事务有没有了解过目前业内比较成熟的解决方案" tabindex="-1"><a class="header-anchor" href="#_7-分布式事务有没有了解过目前业内比较成熟的解决方案"><span>7. 分布式事务有没有了解过目前业内比较成熟的解决方案</span></a></h3><h3 id="_8-场景题-大量请求访问一份数据怎么设计-只说应用层面的-借用读写锁的思想" tabindex="-1"><a class="header-anchor" href="#_8-场景题-大量请求访问一份数据怎么设计-只说应用层面的-借用读写锁的思想"><span>8. 场景题，大量请求访问一份数据怎么设计，只说应用层面的（借用读写锁的思想）</span></a></h3><h3 id="_9-分布式锁你们用什么实现的" tabindex="-1"><a class="header-anchor" href="#_9-分布式锁你们用什么实现的"><span>9. 分布式锁你们用什么实现的</span></a></h3><h3 id="_10-你怎么理解幂等" tabindex="-1"><a class="header-anchor" href="#_10-你怎么理解幂等"><span>10. 你怎么理解幂等？</span></a></h3><h3 id="_11-你是怎么实现幂等的" tabindex="-1"><a class="header-anchor" href="#_11-你是怎么实现幂等的"><span>11. 你是怎么实现幂等的？</span></a></h3><h3 id="_12-链路追踪你们怎么做的" tabindex="-1"><a class="header-anchor" href="#_12-链路追踪你们怎么做的"><span>12. 链路追踪你们怎么做的</span></a></h3><h3 id="_13-cpu负载很高一般是什么原因-排查思路是什么" tabindex="-1"><a class="header-anchor" href="#_13-cpu负载很高一般是什么原因-排查思路是什么"><span>13. CPU负载很高一般是什么原因，排查思路是什么？</span></a></h3><h2 id="linux总结" tabindex="-1"><a class="header-anchor" href="#linux总结"><span>linux总结</span></a></h2><h3 id="_1-top命令cpu利用率和load-average的区别" tabindex="-1"><a class="header-anchor" href="#_1-top命令cpu利用率和load-average的区别"><span>1. top命令CPU利用率和Load?Average的区别</span></a></h3><h3 id="_2-load-average高但是cpu使用率不高是什么原因" tabindex="-1"><a class="header-anchor" href="#_2-load-average高但是cpu使用率不高是什么原因"><span>2. Load?Average高但是CPU使用率不高是什么原因</span></a></h3><h2 id="数据结构-算法" tabindex="-1"><a class="header-anchor" href="#数据结构-算法"><span>数据结构&amp;算法</span></a></h2><h3 id="_1-求链表长度-可能有环" tabindex="-1"><a class="header-anchor" href="#_1-求链表长度-可能有环"><span>1. 求链表长度，可能有环</span></a></h3><h3 id="_2-经典的上台阶问题" tabindex="-1"><a class="header-anchor" href="#_2-经典的上台阶问题"><span>2. 经典的上台阶问题</span></a></h3><h3 id="_3-多线程顺序打印" tabindex="-1"><a class="header-anchor" href="#_3-多线程顺序打印"><span>3. 多线程顺序打印</span></a></h3><h3 id="_4-括号匹配问题" tabindex="-1"><a class="header-anchor" href="#_4-括号匹配问题"><span>4. 括号匹配问题</span></a></h3><h3 id="_5-遍历树-写2种" tabindex="-1"><a class="header-anchor" href="#_5-遍历树-写2种"><span>5. 遍历树，写2种</span></a></h3><h3 id="_6-求树最大深度-用队列求" tabindex="-1"><a class="header-anchor" href="#_6-求树最大深度-用队列求"><span>6. 求树最大深度，用队列求</span></a></h3>`,155);function g(v,m){const e=l("ExternalLinkIcon");return i(),t("div",null,[h,o,d,u,a("blockquote",null,[a("p",null,[n("补充（来自"),a("a",_,[n("issue 675"),r(e)]),n("）：在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 "),b])]),k])}const j=s(p,[["render",g],["__file","index.html.vue"]]),q=JSON.parse('{"path":"/pages/c486e1/","title":"面试","lang":"zh-CN","frontmatter":{"title":"面试","date":"2021-12-27T04:48:27.000Z","permalink":"/pages/c486e1/","categories":["面试"],"author":{"name":"江"}},"headers":[{"level":2,"title":"Java基础","slug":"java基础","link":"#java基础","children":[{"level":3,"title":"1. String和StringBuffer和StringBuilder区别","slug":"_1-string和stringbuffer和stringbuilder区别","link":"#_1-string和stringbuffer和stringbuilder区别","children":[]},{"level":3,"title":"2. String为啥默认用final","slug":"_2-string为啥默认用final","link":"#_2-string为啥默认用final","children":[]},{"level":3,"title":"3. ==和equals区别（详细比如相同对象比较、以及相同integer）","slug":"_3-和equals区别-详细比如相同对象比较、以及相同integer","link":"#_3-和equals区别-详细比如相同对象比较、以及相同integer","children":[]},{"level":3,"title":"4. hashMap和hashSet","slug":"_4-hashmap和hashset","link":"#_4-hashmap和hashset","children":[]},{"level":3,"title":"5. 集合类（比如ArrayList底层有什么的）","slug":"_5-集合类-比如arraylist底层有什么的","link":"#_5-集合类-比如arraylist底层有什么的","children":[]},{"level":3,"title":"6. 多线程sleep和wait  以及  notify和notifyAll","slug":"_6-多线程sleep和wait-以及-notify和notifyall","link":"#_6-多线程sleep和wait-以及-notify和notifyall","children":[]},{"level":3,"title":"7. 如何创建线程，几种方式，再往深处扩展","slug":"_7-如何创建线程-几种方式-再往深处扩展","link":"#_7-如何创建线程-几种方式-再往深处扩展","children":[]},{"level":3,"title":"8. 还有就是抽象类和接口的区别","slug":"_8-还有就是抽象类和接口的区别","link":"#_8-还有就是抽象类和接口的区别","children":[]},{"level":3,"title":"9. 动态代理有哪些，有什么场景，区别","slug":"_9-动态代理有哪些-有什么场景-区别","link":"#_9-动态代理有哪些-有什么场景-区别","children":[]},{"level":3,"title":"10. int 和Integer的区别","slug":"_10-int-和integer的区别","link":"#_10-int-和integer的区别","children":[]},{"level":3,"title":"11. jdbc和mybatis的区别","slug":"_11-jdbc和mybatis的区别","link":"#_11-jdbc和mybatis的区别","children":[]},{"level":3,"title":"12. #{} 和 ${}区别","slug":"_12-和-区别","link":"#_12-和-区别","children":[]},{"level":3,"title":"13. 分页查询除了使用limit，还能有哪种方式实现   pagehelper插件","slug":"_13-分页查询除了使用limit-还能有哪种方式实现-pagehelper插件","link":"#_13-分页查询除了使用limit-还能有哪种方式实现-pagehelper插件","children":[]},{"level":3,"title":"14. jvm的模型有什么","slug":"_14-jvm的模型有什么","link":"#_14-jvm的模型有什么","children":[]},{"level":3,"title":"15. jvm了解吗","slug":"_15-jvm了解吗","link":"#_15-jvm了解吗","children":[]},{"level":3,"title":"16. 包括gc什么的，以及内部的一些东西","slug":"_16-包括gc什么的-以及内部的一些东西","link":"#_16-包括gc什么的-以及内部的一些东西","children":[]},{"level":3,"title":"17. http和https以及tcp/ip  以及socket","slug":"_17-http和https以及tcp-ip-以及socket","link":"#_17-http和https以及tcp-ip-以及socket","children":[]},{"level":3,"title":"18. runable和callable","slug":"_18-runable和callable","link":"#_18-runable和callable","children":[]},{"level":3,"title":"19. Sychornized 和lock的区别，lock底层用的ReentrantLock、ReadWriteLock","slug":"_19-sychornized-和lock的区别-lock底层用的reentrantlock、readwritelock","link":"#_19-sychornized-和lock的区别-lock底层用的reentrantlock、readwritelock","children":[]},{"level":3,"title":"20. Threadlocal   以及  volatile","slug":"_20-threadlocal-以及-volatile","link":"#_20-threadlocal-以及-volatile","children":[]},{"level":3,"title":"21. AQS 是原理","slug":"_21-aqs-是原理","link":"#_21-aqs-是原理","children":[]},{"level":3,"title":"22. 线程池了解吗 ，有哪几种线程池，使用场景有哪些，","slug":"_22-线程池了解吗-有哪几种线程池-使用场景有哪些","link":"#_22-线程池了解吗-有哪几种线程池-使用场景有哪些","children":[]},{"level":3,"title":"23. 比如有4个线程执行，合并结果集","slug":"_23-比如有4个线程执行-合并结果集","link":"#_23-比如有4个线程执行-合并结果集","children":[]},{"level":3,"title":"24. 锁细分，读写锁，偏向锁，自旋锁，轻量级锁，重量级锁","slug":"_24-锁细分-读写锁-偏向锁-自旋锁-轻量级锁-重量级锁","link":"#_24-锁细分-读写锁-偏向锁-自旋锁-轻量级锁-重量级锁","children":[]},{"level":3,"title":"25. 阻塞队列和非阻塞队列（包括一些常用的队列的说明，）","slug":"_25-阻塞队列和非阻塞队列-包括一些常用的队列的说明","link":"#_25-阻塞队列和非阻塞队列-包括一些常用的队列的说明","children":[]},{"level":3,"title":"26. 有界队列和无界队列（区别，为啥分有界和无界）","slug":"_26-有界队列和无界队列-区别-为啥分有界和无界","link":"#_26-有界队列和无界队列-区别-为啥分有界和无界","children":[]},{"level":3,"title":"27. 反射和jvm的执行引擎有什么区别","slug":"_27-反射和jvm的执行引擎有什么区别","link":"#_27-反射和jvm的执行引擎有什么区别","children":[]},{"level":3,"title":"28. tcp和udp的区别","slug":"_28-tcp和udp的区别","link":"#_28-tcp和udp的区别","children":[]},{"level":3,"title":"29. 什么是面向连接，什么是面向无连接","slug":"_29-什么是面向连接-什么是面向无连接","link":"#_29-什么是面向连接-什么是面向无连接","children":[]},{"level":3,"title":"30. tcp的为什么是可靠连接","slug":"_30-tcp的为什么是可靠连接","link":"#_30-tcp的为什么是可靠连接","children":[]},{"level":3,"title":"31. 拆包和装包是什么，连接这方面的","slug":"_31-拆包和装包是什么-连接这方面的","link":"#_31-拆包和装包是什么-连接这方面的","children":[]},{"level":3,"title":"32. spring和springmvc的常用注解","slug":"_32-spring和springmvc的常用注解","link":"#_32-spring和springmvc的常用注解","children":[]},{"level":3,"title":"33. spring的ioc和aop","slug":"_33-spring的ioc和aop","link":"#_33-spring的ioc和aop","children":[]},{"level":3,"title":"34. spring的bean是怎么管理，beanfactory以及applicationcontext","slug":"_34-spring的bean是怎么管理-beanfactory以及applicationcontext","link":"#_34-spring的bean是怎么管理-beanfactory以及applicationcontext","children":[]},{"level":3,"title":"35. springboot的注解，三大注解有什么作用，","slug":"_35-springboot的注解-三大注解有什么作用","link":"#_35-springboot的注解-三大注解有什么作用","children":[]},{"level":3,"title":"36. springboot的compantScan扫描范围是所有的包还是到哪一层；","slug":"_36-springboot的compantscan扫描范围是所有的包还是到哪一层","link":"#_36-springboot的compantscan扫描范围是所有的包还是到哪一层","children":[]},{"level":3,"title":"37. Springcloud用过什么，削峰，限流，其他一些实战（看你用没用过）","slug":"_37-springcloud用过什么-削峰-限流-其他一些实战-看你用没用过","link":"#_37-springcloud用过什么-削峰-限流-其他一些实战-看你用没用过","children":[]},{"level":3,"title":"38. future相关的","slug":"_38-future相关的","link":"#_38-future相关的","children":[]},{"level":3,"title":"39. servlet 的生命周期是","slug":"_39-servlet-的生命周期是","link":"#_39-servlet-的生命周期是","children":[]},{"level":3,"title":"40. session 和 application 的区别  已经cookie","slug":"_40-session-和-application-的区别-已经cookie","link":"#_40-session-和-application-的区别-已经cookie","children":[]},{"level":3,"title":"41. 动态代理 jdk代理和cglib代理区别啥的","slug":"_41-动态代理-jdk代理和cglib代理区别啥的","link":"#_41-动态代理-jdk代理和cglib代理区别啥的","children":[]},{"level":3,"title":"42. run和start区别  ，整个过程还有什么","slug":"_42-run和start区别-整个过程还有什么","link":"#_42-run和start区别-整个过程还有什么","children":[]},{"level":3,"title":"43. spring执行机制","slug":"_43-spring执行机制","link":"#_43-spring执行机制","children":[]},{"level":3,"title":"44. spring事务，以及事务会问你事务除了ACID外，还有脏读，不可重复读，幻读可详细说，事务的传播机制7种，事务的隔离级别，可能会出题，比如A方法使用事务，B方法没有使用，那么A调用B会有几种情况，你使用事务哪种级别","slug":"_44-spring事务-以及事务会问你事务除了acid外-还有脏读-不可重复读-幻读可详细说-事务的传播机制7种-事务的隔离级别-可能会出题-比如a方法使用事务-b方法没有使用-那么a调用b会有几种情况-你使用事务哪种级别","link":"#_44-spring事务-以及事务会问你事务除了acid外-还有脏读-不可重复读-幻读可详细说-事务的传播机制7种-事务的隔离级别-可能会出题-比如a方法使用事务-b方法没有使用-那么a调用b会有几种情况-你使用事务哪种级别","children":[]},{"level":3,"title":"45. mybatis的事务，","slug":"_45-mybatis的事务","link":"#_45-mybatis的事务","children":[]},{"level":3,"title":"46. springmvc的执行流程","slug":"_46-springmvc的执行流程","link":"#_46-springmvc的执行流程","children":[]},{"level":3,"title":"47. 线上的修改配置文件的环境比如数据库配置，怎么修改，是不是同一个目录下","slug":"_47-线上的修改配置文件的环境比如数据库配置-怎么修改-是不是同一个目录下","link":"#_47-线上的修改配置文件的环境比如数据库配置-怎么修改-是不是同一个目录下","children":[]},{"level":3,"title":"48. 过滤器和拦截器区别，实战用到没有，怎么用的","slug":"_48-过滤器和拦截器区别-实战用到没有-怎么用的","link":"#_48-过滤器和拦截器区别-实战用到没有-怎么用的","children":[]},{"level":3,"title":"49. 设计模式用过哪些，项目中用到的设计模式有哪些，说几个熟悉，可能再往深处扩展，比如你怎么实现，怎么写","slug":"_49-设计模式用过哪些-项目中用到的设计模式有哪些-说几个熟悉-可能再往深处扩展-比如你怎么实现-怎么写","link":"#_49-设计模式用过哪些-项目中用到的设计模式有哪些-说几个熟悉-可能再往深处扩展-比如你怎么实现-怎么写","children":[]},{"level":3,"title":"50. 观察者模式和redis的订阅和消费","slug":"_50-观察者模式和redis的订阅和消费","link":"#_50-观察者模式和redis的订阅和消费","children":[]},{"level":3,"title":"51. netty有没有用过，netty的优势是啥， 你为啥用，项目中怎么用的","slug":"_51-netty有没有用过-netty的优势是啥-你为啥用-项目中怎么用的","link":"#_51-netty有没有用过-netty的优势是啥-你为啥用-项目中怎么用的","children":[]},{"level":3,"title":"52. 微服务和分布式区别","slug":"_52-微服务和分布式区别","link":"#_52-微服务和分布式区别","children":[]},{"level":3,"title":"53. 微服务再细一点，我这边没怎么问，没用到","slug":"_53-微服务再细一点-我这边没怎么问-没用到","link":"#_53-微服务再细一点-我这边没怎么问-没用到","children":[]},{"level":3,"title":"54. dubbo和springcloud的区别","slug":"_54-dubbo和springcloud的区别","link":"#_54-dubbo和springcloud的区别","children":[]},{"level":3,"title":"55. dubbo和zk连接流程","slug":"_55-dubbo和zk连接流程","link":"#_55-dubbo和zk连接流程","children":[]},{"level":3,"title":"56. dubbo再往深处，比如负载均衡以及容错机制，再往深处","slug":"_56-dubbo再往深处-比如负载均衡以及容错机制-再往深处","link":"#_56-dubbo再往深处-比如负载均衡以及容错机制-再往深处","children":[]},{"level":3,"title":"57. zk了解吗，没怎么问我","slug":"_57-zk了解吗-没怎么问我","link":"#_57-zk了解吗-没怎么问我","children":[]}]},{"level":2,"title":"数据库","slug":"数据库","link":"#数据库","children":[{"level":3,"title":"1.数据库优化方式","slug":"_1-数据库优化方式","link":"#_1-数据库优化方式","children":[]},{"level":3,"title":"2.sql优化方式","slug":"_2-sql优化方式","link":"#_2-sql优化方式","children":[]},{"level":3,"title":"3.索引，通过执行explain,优化索引， 比如覆盖索引，最左原则，组合索引遇到的几种方式不同","slug":"_3-索引-通过执行explain-优化索引-比如覆盖索引-最左原则-组合索引遇到的几种方式不同","link":"#_3-索引-通过执行explain-优化索引-比如覆盖索引-最左原则-组合索引遇到的几种方式不同","children":[]},{"level":3,"title":"4.B tree和B+Tree区别","slug":"_4-b-tree和b-tree区别","link":"#_4-b-tree和b-tree区别","children":[]},{"level":3,"title":"5.innodb和myisam的区别","slug":"_5-innodb和myisam的区别","link":"#_5-innodb和myisam的区别","children":[]},{"level":3,"title":"6.数据库表设计","slug":"_6-数据库表设计","link":"#_6-数据库表设计","children":[]},{"level":3,"title":"7.三大范式","slug":"_7-三大范式","link":"#_7-三大范式","children":[]},{"level":3,"title":"8.数据库查询Leftjoin以及其他join  出题考你，还有就是写sql，比如俩个表，只取A表中与B表不共用的那部分，怎么实现","slug":"_8-数据库查询leftjoin以及其他join-出题考你-还有就是写sql-比如俩个表-只取a表中与b表不共用的那部分-怎么实现","link":"#_8-数据库查询leftjoin以及其他join-出题考你-还有就是写sql-比如俩个表-只取a表中与b表不共用的那部分-怎么实现","children":[]}]},{"level":2,"title":"中间件(rabbitmq、kafka、rocketMq)","slug":"中间件-rabbitmq、kafka、rocketmq","link":"#中间件-rabbitmq、kafka、rocketmq","children":[{"level":3,"title":"1.使用的队列常见问题 ( 如何保证消息一致性、保证消息不丢失、重复数据怎么处理 、生产者宕机  或者消费者宕机你怎么处理 、不消费怎么处理 )","slug":"_1-使用的队列常见问题-如何保证消息一致性、保证消息不丢失、重复数据怎么处理-、生产者宕机-或者消费者宕机你怎么处理-、不消费怎么处理","link":"#_1-使用的队列常见问题-如何保证消息一致性、保证消息不丢失、重复数据怎么处理-、生产者宕机-或者消费者宕机你怎么处理-、不消费怎么处理","children":[]},{"level":3,"title":"2.如果整个链路通的，但是数据不消费怎么处理","slug":"_2-如果整个链路通的-但是数据不消费怎么处理","link":"#_2-如果整个链路通的-但是数据不消费怎么处理","children":[]},{"level":3,"title":"3.rabbitmq的死信队列 ，原因，之后怎么处理","slug":"_3-rabbitmq的死信队列-原因-之后怎么处理","link":"#_3-rabbitmq的死信队列-原因-之后怎么处理","children":[]},{"level":3,"title":"4.会问rabbitMq和kakfa区别或者  和rockedMq区别","slug":"_4-会问rabbitmq和kakfa区别或者-和rockedmq区别","link":"#_4-会问rabbitmq和kakfa区别或者-和rockedmq区别","children":[]},{"level":3,"title":"5.如何保证消息不会被重复消费","slug":"_5-如何保证消息不会被重复消费","link":"#_5-如何保证消息不会被重复消费","children":[]}]},{"level":2,"title":"redis","slug":"redis","link":"#redis","children":[{"level":3,"title":"1.redis的5种数据类型（使用场景，你项目中用到没有）","slug":"_1-redis的5种数据类型-使用场景-你项目中用到没有","link":"#_1-redis的5种数据类型-使用场景-你项目中用到没有","children":[]}]},{"level":2,"title":"JVM总结","slug":"jvm总结","link":"#jvm总结","children":[{"level":3,"title":"1.JVM调优实战说一下","slug":"_1-jvm调优实战说一下","link":"#_1-jvm调优实战说一下","children":[]},{"level":3,"title":"2.cms gc的流程  cms 表示基于 标记清理的垃圾回收器","slug":"_2-cms-gc的流程-cms-表示基于-标记清理的垃圾回收器","link":"#_2-cms-gc的流程-cms-表示基于-标记清理的垃圾回收器","children":[]},{"level":3,"title":"3.新生代和老年代标记算法优缺点","slug":"_3-新生代和老年代标记算法优缺点","link":"#_3-新生代和老年代标记算法优缺点","children":[]},{"level":3,"title":"4.oom的排查思路","slug":"_4-oom的排查思路","link":"#_4-oom的排查思路","children":[]},{"level":3,"title":"5.cms优缺点","slug":"_5-cms优缺点","link":"#_5-cms优缺点","children":[]},{"level":3,"title":"6.对象什么时候进入老年代","slug":"_6-对象什么时候进入老年代","link":"#_6-对象什么时候进入老年代","children":[]},{"level":3,"title":"7.什么时候触发fullgc","slug":"_7-什么时候触发fullgc","link":"#_7-什么时候触发fullgc","children":[]},{"level":3,"title":"8.模拟oom和Stack Overflow场景","slug":"_8-模拟oom和stack-overflow场景","link":"#_8-模拟oom和stack-overflow场景","children":[]},{"level":3,"title":"9.栈什么时候oom","slug":"_9-栈什么时候oom","link":"#_9-栈什么时候oom","children":[]},{"level":3,"title":"10.怎么jvm中内存的使用情况","slug":"_10-怎么jvm中内存的使用情况","link":"#_10-怎么jvm中内存的使用情况","children":[]},{"level":3,"title":"11.jmap是怎么做到的","slug":"_11-jmap是怎么做到的","link":"#_11-jmap是怎么做到的","children":[]},{"level":3,"title":"12.java代码从编译到执行有哪些步骤","slug":"_12-java代码从编译到执行有哪些步骤","link":"#_12-java代码从编译到执行有哪些步骤","children":[]},{"level":3,"title":"13.类加载过程","slug":"_13-类加载过程","link":"#_13-类加载过程","children":[]},{"level":3,"title":"14.jar包冲突遇到过吗？jar包冲突时在类加载过程中哪一步报的错","slug":"_14-jar包冲突遇到过吗-jar包冲突时在类加载过程中哪一步报的错","link":"#_14-jar包冲突遇到过吗-jar包冲突时在类加载过程中哪一步报的错","children":[]},{"level":3,"title":"15.让你实现一个jvm,标记垃圾的具体步骤你怎么做，怎么扫描垃圾，这些信息维护在哪","slug":"_15-让你实现一个jvm-标记垃圾的具体步骤你怎么做-怎么扫描垃圾-这些信息维护在哪","link":"#_15-让你实现一个jvm-标记垃圾的具体步骤你怎么做-怎么扫描垃圾-这些信息维护在哪","children":[]}]},{"level":2,"title":"实战总结","slug":"实战总结","link":"#实战总结","children":[{"level":3,"title":"1. 分库分表的场景题，淘宝场景，买家卖家数据怎么存，怎么分库分表","slug":"_1-分库分表的场景题-淘宝场景-买家卖家数据怎么存-怎么分库分表","link":"#_1-分库分表的场景题-淘宝场景-买家卖家数据怎么存-怎么分库分表","children":[]},{"level":3,"title":"2. 说说你在重构拆分中遇到的问题，你负责了哪些","slug":"_2-说说你在重构拆分中遇到的问题-你负责了哪些","link":"#_2-说说你在重构拆分中遇到的问题-你负责了哪些","children":[]},{"level":3,"title":"3. 拆分你是怎么保证数据完整性的","slug":"_3-拆分你是怎么保证数据完整性的","link":"#_3-拆分你是怎么保证数据完整性的","children":[]},{"level":3,"title":"4. 如果你当前系统压力*100倍你怎么设计","slug":"_4-如果你当前系统压力-100倍你怎么设计","link":"#_4-如果你当前系统压力-100倍你怎么设计","children":[]},{"level":3,"title":"5. 如果根据压测流量路由到影子库","slug":"_5-如果根据压测流量路由到影子库","link":"#_5-如果根据压测流量路由到影子库","children":[]},{"level":3,"title":"6. https://tech.meituan.com/2018/09/27/quake-introduction.html","slug":"_6-https-tech-meituan-com-2018-09-27-quake-introduction-html","link":"#_6-https-tech-meituan-com-2018-09-27-quake-introduction-html","children":[]},{"level":3,"title":"7. 分布式事务有没有了解过目前业内比较成熟的解决方案","slug":"_7-分布式事务有没有了解过目前业内比较成熟的解决方案","link":"#_7-分布式事务有没有了解过目前业内比较成熟的解决方案","children":[]},{"level":3,"title":"8. 场景题，大量请求访问一份数据怎么设计，只说应用层面的（借用读写锁的思想）","slug":"_8-场景题-大量请求访问一份数据怎么设计-只说应用层面的-借用读写锁的思想","link":"#_8-场景题-大量请求访问一份数据怎么设计-只说应用层面的-借用读写锁的思想","children":[]},{"level":3,"title":"9. 分布式锁你们用什么实现的","slug":"_9-分布式锁你们用什么实现的","link":"#_9-分布式锁你们用什么实现的","children":[]},{"level":3,"title":"10. 你怎么理解幂等？","slug":"_10-你怎么理解幂等","link":"#_10-你怎么理解幂等","children":[]},{"level":3,"title":"11. 你是怎么实现幂等的？","slug":"_11-你是怎么实现幂等的","link":"#_11-你是怎么实现幂等的","children":[]},{"level":3,"title":"12. 链路追踪你们怎么做的","slug":"_12-链路追踪你们怎么做的","link":"#_12-链路追踪你们怎么做的","children":[]},{"level":3,"title":"13. CPU负载很高一般是什么原因，排查思路是什么？","slug":"_13-cpu负载很高一般是什么原因-排查思路是什么","link":"#_13-cpu负载很高一般是什么原因-排查思路是什么","children":[]}]},{"level":2,"title":"linux总结","slug":"linux总结","link":"#linux总结","children":[{"level":3,"title":"1. top命令CPU利用率和Load?Average的区别","slug":"_1-top命令cpu利用率和load-average的区别","link":"#_1-top命令cpu利用率和load-average的区别","children":[]},{"level":3,"title":"2. Load?Average高但是CPU使用率不高是什么原因","slug":"_2-load-average高但是cpu使用率不高是什么原因","link":"#_2-load-average高但是cpu使用率不高是什么原因","children":[]}]},{"level":2,"title":"数据结构&算法","slug":"数据结构-算法","link":"#数据结构-算法","children":[{"level":3,"title":"1. 求链表长度，可能有环","slug":"_1-求链表长度-可能有环","link":"#_1-求链表长度-可能有环","children":[]},{"level":3,"title":"2. 经典的上台阶问题","slug":"_2-经典的上台阶问题","link":"#_2-经典的上台阶问题","children":[]},{"level":3,"title":"3. 多线程顺序打印","slug":"_3-多线程顺序打印","link":"#_3-多线程顺序打印","children":[]},{"level":3,"title":"4. 括号匹配问题","slug":"_4-括号匹配问题","link":"#_4-括号匹配问题","children":[]},{"level":3,"title":"5. 遍历树，写2种","slug":"_5-遍历树-写2种","link":"#_5-遍历树-写2种","children":[]},{"level":3,"title":"6. 求树最大深度，用队列求","slug":"_6-求树最大深度-用队列求","link":"#_6-求树最大深度-用队列求","children":[]}]}],"git":{"createdTime":1709064007000,"updatedTime":1709064007000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":10.92,"words":3276},"filePathRelative":"面试/面试.md","localizedDate":"2021年12月27日","excerpt":"<p>（面试大厂的面试题）https://juejin.im/post/5ec0ff4a6fb9a043271c76e9?utm_source=gold_browser_extension</p>\\n<h2>Java基础</h2>\\n<h3>1. String和StringBuffer和StringBuilder区别</h3>\\n<p><strong>可变性</strong>\\n简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以 String 对象是不可变的。</p>\\n<blockquote>\\n<p>补充（来自<a href=\\"https://github.com/Snailclimb/JavaGuide/issues/675\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">issue 675</a>）：在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 <code>private final byte[] value</code></p>\\n</blockquote>"}');export{j as comp,q as data};
