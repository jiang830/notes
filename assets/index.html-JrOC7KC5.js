import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,a as e}from"./app-CT4bPn0M.js";const t={},p=e(`<p><strong>Mysql安装文档参考</strong>：https://blog.csdn.net/yougoule/article/details/56680952</p><h2 id="explain工具介绍" tabindex="-1"><a class="header-anchor" href="#explain工具介绍"><span>Explain工具介绍</span></a></h2><p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，分析你的查询语句或是结构的性能瓶颈</p><p>在 select 语句之前增加 explain 关键字，MySQL 会在查询上设置一个标记，执行查询会返回执行计划的信息，而不是执行这条SQL</p><p>注意：如果 from 中包含子查询，仍会执行该子查询，将结果放入临时表中</p><h2 id="explain分析示例" tabindex="-1"><a class="header-anchor" href="#explain分析示例"><span>Explain分析示例</span></a></h2><p>参考官方文档：https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>示例表：
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>actor<span class="token punctuation">\`</span></span><span class="token punctuation">;</span> 
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>actor<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>update_time<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>actor<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>update_time<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2017-12-22 15:27:18&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2017-12-22 15:27:18&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2017-12-22 15:27:18&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>film<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>film<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_name<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>film<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;film0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;film1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;film2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>film_actor<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>film_actor<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>film_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>actor_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>remark<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_film_actor_id<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>film_id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>actor_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>film_actor<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>film_id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>actor_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select * from actor;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201720851.png" alt="img"></p><p>在查询中的每个表会输出一行，如果有两个表通过 join 连接查询，那么会输出两行</p><h2 id="explain-两个变种" tabindex="-1"><a class="header-anchor" href="#explain-两个变种"><span>explain 两个变种</span></a></h2><p>1）<strong>explain extended</strong>：会在 explain 的基础上额外提供一些查询优化的信息。紧随其后通过 show warnings 命令可以得到优化后的查询语句，从而看出优化器优化了什么。额外还有 filtered 列，是一个半分比的值，rows * filtered/100 可以<strong>估算</strong>出将要和 explain 中前一个表进行连接的行数（前一个表指 explain 中的id值比当前表id值小的表）。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">extended</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> film <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201723192.png" alt="img"></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">warnings</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201723668.png" alt="img"></p><p>2）<strong>explain partitions</strong>：相比 explain 多了个 partitions 字段，如果查询是基于分区表的话，会显示查询将访问的分区。</p><h2 id="explain中的列" tabindex="-1"><a class="header-anchor" href="#explain中的列"><span>explain中的列</span></a></h2><p>接下来我们将展示 explain 中每个列的信息。</p><h3 id="_1-id列" tabindex="-1"><a class="header-anchor" href="#_1-id列"><span>1. id列</span></a></h3><p>id列的编号是 select 的序列号，有几个 select 就有几个id，并且id的顺序是按 select 出现的顺序增长的。</p><p>id列越大执行优先级越高，id相同则从上往下执行，id为NULL最后执行。</p><h3 id="_2-select-type列" tabindex="-1"><a class="header-anchor" href="#_2-select-type列"><span>2. select_type列</span></a></h3><p>select_type 表示对应行是简单还是复杂的查询。</p><p>1）simple：简单查询。查询不包含子查询和union</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> film <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201723206.png" alt="img"></p><p>2）primary：复杂查询中最外层的 select</p><p>3）subquery：包含在 select 中的子查询（不在 from 子句中）</p><p>4）derived：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为派生表（derived的英文含义）</p><p>用这个例子来了解 primary、subquery 和 derived 类型</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">session</span> optimizer_switch<span class="token operator">=</span><span class="token string">&#39;derived_merge=off&#39;</span><span class="token punctuation">;</span>   <span class="token comment">#关闭mysql5.7新特性对衍生表的合并优化 </span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> actor <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> film <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> der<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201723317.png" alt="img"></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">session</span> optimizer_switch<span class="token operator">=</span><span class="token string">&#39;derived_merge=on&#39;</span><span class="token punctuation">;</span>	<span class="token comment">#还原默认配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5）union：在 union 中的第二个和随后的 select</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201723385.png" alt="img"></p><h3 id="_3-table列" tabindex="-1"><a class="header-anchor" href="#_3-table列"><span>3. table列</span></a></h3><p>这一列表示 explain 的一行正在访问哪个表。</p><p>当 from 子句中有子查询时，table列是 &lt;derivenN&gt; 格式，表示当前查询依赖 id=N 的查询，于是先执行 id=N 的查询。</p><p>当有 union 时，UNION RESULT 的 table 列的值为&lt;union1,2&gt;，1和2表示参与 union 的 select 行id。</p><h3 id="_4-partitions列" tabindex="-1"><a class="header-anchor" href="#_4-partitions列"><span>4. partitions列</span></a></h3><p>如果查询是基于分区表的话，partitions 字段会显示查询将访问的分区</p><h3 id="_5-type列" tabindex="-1"><a class="header-anchor" href="#_5-type列"><span>5. type列</span></a></h3><p>这一列表示<strong>关联类型或访问类型</strong>，即MySQL决定如何查找表中的行，查找数据行记录的大概范围。</p><p>依次从最优到最差分别为：<strong>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</strong></p><p>一般来说，<strong>得保证查询达到range级别，最好达到ref</strong></p><p><strong>NULL</strong>：mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> film<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012101116.png" alt="image-20230701210122934"></p><p><strong>const, system</strong>：mysql能对查询的某部分进行优化并将其转化成一个常量（可以看show warnings 的结果）。用于 primary key 或 unique key 的所有列与常数比较时，所以表最多有一个匹配行，读取1次，速度比较快。<strong>system是const的特例</strong>，表只有一行记录。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain extended select * from (select * from film where id = 1) tmp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012103349.png" alt="image-20230701210357477"></p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>mysql&gt; show warnings;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012105899.png" alt="image-20230701210556944"></p><p><strong>eq_ref</strong>：primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合条件的记录。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> film_actor <span class="token keyword">left</span> <span class="token keyword">join</span> film <span class="token keyword">on</span> film_actor<span class="token punctuation">.</span>film_id <span class="token operator">=</span> film<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012118787.png" alt="image-20230701211841719"></p><p><strong>ref</strong>：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一性索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。</p><ol><li>简单 select 查询，name是普通索引（非唯一索引）</li></ol><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> film <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;film1&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012121332.png" alt="image-20230701212149475"></p><p>2.关联表查询，idx_film_actor_id是film_id和actor_id的联合索引，这里使用到了film_actor的左边前缀film_id部分。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> film_id <span class="token keyword">from</span> film <span class="token keyword">left</span> <span class="token keyword">join</span> film_actor <span class="token keyword">on</span> film<span class="token punctuation">.</span>id <span class="token operator">=</span> film_actor<span class="token punctuation">.</span>film_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012121383.png" alt="image-20230701212153299"></p><p><strong>range</strong>：范围扫描通常出现在 in(), between ,&gt; ,&lt;, &gt;= 等操作中。使用一个索引来检索给定范围的行。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> actor <span class="token keyword">where</span> id <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012122558.png" alt="image-20230701212224493"></p><p><strong>index</strong>：扫描全索引就能拿到结果，一般是扫描某个二级索引，这种扫描不会从索引树根节点开始快速查找，而是直接对二级索引的叶子节点遍历和扫描，速度还是比较慢的，这种查询一般为使用覆盖索引，二级索引一般比较小，所以这种通常比ALL快一些。</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>mysql&gt; explain select * from film;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012128819.png" alt="image-20230701212826893"></p><p><strong>ALL</strong>：即全表扫描，扫描你的聚簇索引的所有叶子节点。通常情况下这需要增加索引来进行优化了。</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>mysql&gt; explain select * from actor;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.jssjqd.cn/202307012129175.png" alt="image-20230701212939293"></p><h3 id="_6-possible-keys列" tabindex="-1"><a class="header-anchor" href="#_6-possible-keys列"><span>6. possible_keys列</span></a></h3><p>这一列显示查询可能使用哪些索引来查找。</p><p>explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中数据不多，mysql认为索引对此查询帮助不大，选择了全表查询。</p><p>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可以创造一个适当的索引来提高查询性能，然后用 explain 查看效果。</p><h3 id="_7-key列" tabindex="-1"><a class="header-anchor" href="#_7-key列"><span>7. key列</span></a></h3><p>这一列显示mysql实际采用哪个索引来优化对该表的访问。</p><p>如果没有使用索引，则该列是 NULL。如果想强制mysql使用或忽视possible_keys列中的索引，在查询中使用 force index、ignore index。</p><h3 id="_8-key-len列" tabindex="-1"><a class="header-anchor" href="#_8-key-len列"><span>8. key_len列</span></a></h3><p>这一列显示了mysql在索引里使用的字节数，通过这个值可以算出具体使用了索引中的哪些列。</p><p>举例来说，film_actor的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个int列组成，并且每个int是4字节。通过结果中的key_len=4可推断出查询使用了第一个列：film_id列来执行索引查找。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select * from film_actor where film_id = 2;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201725382.png" alt="img"></p><p><strong>key_len计算规则如下：</strong></p><ul><li><p>字符串，char(n)和varchar(n)，5.0.3以后版本中，**n均代表字符数，而不是字节数，**如果是utf-8，一个数字或字母占1个字节，一个汉字占3个字节</p></li><li><ul><li>char(n)：如果存汉字长度就是 3n 字节</li><li>varchar(n)：如果存汉字则长度是 3n + 2 字节，加的2字节用来存储字符串长度，因为varchar是变长字符串</li></ul></li><li><p>数值类型</p></li><li><ul><li>tinyint：1字节</li><li>smallint：2字节</li><li>int：4字节</li><li>bigint：8字节</li></ul></li><li><p>时间类型</p></li><li><ul><li>date：3字节</li><li>timestamp：4字节</li><li>datetime：8字节</li></ul></li><li><p>如果字段允许为 NULL，需要1字节记录是否为 NULL</p></li></ul><p>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引。</p><h3 id="_9-ref列" tabindex="-1"><a class="header-anchor" href="#_9-ref列"><span>9. ref列</span></a></h3><p>这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），字段名（例：film.id）</p><h3 id="_10-rows列" tabindex="-1"><a class="header-anchor" href="#_10-rows列"><span>10. rows列</span></a></h3><p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p><h3 id="_11-filtered-列" tabindex="-1"><a class="header-anchor" href="#_11-filtered-列"><span>11. filtered 列</span></a></h3><p>该列是一个百分比的值，rows * filtered/100 可以<strong>估算</strong>出将要和 explain 中前一个表进行连接的行数（前一个表指 explain 中的id值比当前表id值小的表）。</p><h3 id="_12-extra列" tabindex="-1"><a class="header-anchor" href="#_12-extra列"><span>12. Extra列</span></a></h3><p>这一列展示的是额外信息。常见的重要值如下：</p><p>1）<strong>Using index</strong>：使用覆盖索引</p><p><strong>覆盖索引定义</strong>：mysql执行计划explain结果里的key有使用索引，如果select后面查询的字段都可以从这个索引的树中获取，这种情况一般可以说是用到了覆盖索引，extra里一般都有using index；覆盖索引一般针对的是辅助索引，整个查询结果只通过辅助索引就能拿到结果，不需要通过辅助索引树找到主键，再通过主键去主键索引树里获取其它字段值</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select film_id from film_actor where film_id = 1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201725118.png" alt="img"></p><p>2）<strong>Using where</strong>：使用 where 语句来处理结果，并且查询的列未被索引覆盖</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select * from actor where name = &#39;a&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726490.png" alt="img"></p><p>3）<strong>Using index condition</strong>：查询的列不完全被索引覆盖，where条件中是一个前导列的范围；</p><p>mysql&gt; explain select * from film_actor where film_id &gt; 1;</p><p><img src="http://img.jssjqd.cn/202110201726190.png" alt="img"></p><p>4）<strong>Using temporary</strong>：mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行优化的，首先是想到用索引来优化。</p><ol><li>actor.name没有索引，此时创建了张临时表来distinct</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select distinct name from actor;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726128.png" alt="img"></p><ol start="2"><li>film.name建立了idx_name索引，此时查询时extra是using index,没有用临时表</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select distinct name from film;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726128.png" alt="img"></p><p>5）<strong>Using filesort</strong>：将用外部排序而不是索引排序，数据较小时从内存排序，否则需要在磁盘完成排序。这种情况下一般也是要考虑使用索引来优化的。</p><ol><li>actor.name未创建索引，会浏览actor整个表，保存排序关键字name和对应的id，然后排序name并检索行记录</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select * from actor order by name;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726408.png" alt="img"></p><ol start="2"><li>film.name建立了idx_name索引,此时查询时extra是using index</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select * from film order by name;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726541.png" alt="img"></p><p>6）<strong>Select tables optimized away</strong>：使用某些聚合函数（比如 max、min）来访问存在索引的某个字段是</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mysql&gt; explain select min(id) from film;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726462.png" alt="img"></p><h2 id="索引最佳实践" tabindex="-1"><a class="header-anchor" href="#索引最佳实践"><span>索引最佳实践</span></a></h2><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>示例表： 
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>employees<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
	<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">24</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>position<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;职位&#39;</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">\`</span>hire_time<span class="token punctuation">\`</span></span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;入职时间&#39;</span><span class="token punctuation">,</span>
	<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_name_age_position<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>position<span class="token punctuation">\`</span></span> <span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span> 
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">&#39;员工记录表&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token punctuation">(</span> NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> position<span class="token punctuation">,</span> hire_time <span class="token punctuation">)</span>
<span class="token keyword">VALUES</span>
	<span class="token punctuation">(</span>
		<span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">,</span>
		<span class="token number">22</span><span class="token punctuation">,</span>
		<span class="token string">&#39;manager&#39;</span><span class="token punctuation">,</span>
	<span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token punctuation">(</span> NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> position<span class="token punctuation">,</span> hire_time <span class="token punctuation">)</span>
<span class="token keyword">VALUES</span>
	<span class="token punctuation">(</span>
		<span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">,</span>
		<span class="token number">23</span><span class="token punctuation">,</span>
		<span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span>
	<span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token punctuation">(</span> NAME<span class="token punctuation">,</span> age<span class="token punctuation">,</span> position<span class="token punctuation">,</span> hire_time <span class="token punctuation">)</span>
<span class="token keyword">VALUES</span>
	<span class="token punctuation">(</span>
		<span class="token string">&#39;Lucy&#39;</span><span class="token punctuation">,</span>
		<span class="token number">23</span><span class="token punctuation">,</span>
	<span class="token string">&#39;dev&#39;</span><span class="token punctuation">,</span>
	<span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-全值匹配" tabindex="-1"><a class="header-anchor" href="#_1-全值匹配"><span>1.全值匹配</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>EXPLAIN SELECT * FROM employees WHERE name= &#39;LiLei&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726115.png" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>EXPLAIN SELECT * FROM employees WHERE name= &#39;LiLei&#39; AND age = 22;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726859.png" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>EXPLAIN SELECT * FROM employees WHERE  name= &#39;LiLei&#39; AND  age = 22 AND position =&#39;manager&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726090.png" alt="img"></p><h3 id="_2-最左前缀法则" tabindex="-1"><a class="header-anchor" href="#_2-最左前缀法则"><span>2.最左前缀法则</span></a></h3><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>EXPLAIN SELECT * FROM employees WHERE name = &#39;Bill&#39; and age = 31; 
EXPLAIN SELECT * FROM employees WHERE age = 30 AND position = &#39;dev&#39;; 
EXPLAIN SELECT * FROM employees WHERE position = &#39;manager&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726372.png" alt="img"></p><h3 id="_3-不在索引列上做任何操作-计算、函数、-自动or手动-类型转换-会导致索引失效而转向全表扫描" tabindex="-1"><a class="header-anchor" href="#_3-不在索引列上做任何操作-计算、函数、-自动or手动-类型转换-会导致索引失效而转向全表扫描"><span>3.不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</span></a></h3><p>索引字段被计算后，所产生的结果在索引列上并不是有序的，所以索引会失效</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> <span class="token keyword">left</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726806.png" alt="img"></p><p>给hire_time增加一个普通索引</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>employees<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_hire_time<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>hire_time<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span> <span class="token punctuation">;</span>

<span class="token keyword">EXPLAIN</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> <span class="token keyword">date</span><span class="token punctuation">(</span>hire_time<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token string">&#39;2018-09-30&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201726942.png" alt="img"></p><p>转化为日期范围查询，有可能会走索引：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> hire_time <span class="token operator">&gt;=</span><span class="token string">&#39;2018-09-30 00:00:00&#39;</span>  <span class="token operator">and</span>  hire_time <span class="token operator">&lt;=</span><span class="token string">&#39;2018-09-30 23:59:59&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727070.png" alt="img"></p><p>还原最初索引状态</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>employees<span class="token punctuation">\`</span></span> <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_hire_time<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-存储引擎不能使用索引中范围条件右边的列" tabindex="-1"><a class="header-anchor" href="#_4-存储引擎不能使用索引中范围条件右边的列"><span>4.存储引擎不能使用索引中范围条件右边的列</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span> 
<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">&gt;</span> <span class="token number">22</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727304.png" alt="img"></p><h3 id="_5-尽量使用覆盖索引-只访问索引的查询-索引列包含查询列-减少-select-语句" tabindex="-1"><a class="header-anchor" href="#_5-尽量使用覆盖索引-只访问索引的查询-索引列包含查询列-减少-select-语句"><span>5.尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727263.png" alt="img"></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name<span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">AND</span> age <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">AND</span> position <span class="token operator">=</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-mysql在使用不等于-或者-not-in-not-exists-的时候无法使用索引会导致全表扫描" tabindex="-1"><a class="header-anchor" href="#_6-mysql在使用不等于-或者-not-in-not-exists-的时候无法使用索引会导致全表扫描"><span><img src="http://img.jssjqd.cn/202110201727882.png" alt="img">6.mysql在使用不等于（！=或者&lt;&gt;)，not in ，not exists 的时候无法使用索引会导致全表扫描</span></a></h3><p>**&lt; 小于、 &gt; 大于、 &lt;=、&gt;= 这些，**<strong>mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">!=</span> <span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727920.png" alt="img"></p><h3 id="_7-is-null-is-not-null-一般情况下也无法使用索引" tabindex="-1"><a class="header-anchor" href="#_7-is-null-is-not-null-一般情况下也无法使用索引"><span>7.is null,is not null 一般情况下也无法使用索引</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">is</span> <span class="token boolean">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727993.png" alt="img"></p><h3 id="_8-like以通配符开头-abc-mysql索引失效会变成全表扫描操作" tabindex="-1"><a class="header-anchor" href="#_8-like以通配符开头-abc-mysql索引失效会变成全表扫描操作"><span>8.like以通配符开头（&#39;$abc...&#39;）mysql索引失效会变成全表扫描操作</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;%Lei&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727111.png" alt="img"></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;Lei%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727981.png" alt="img"></p><p>问题：解决like&#39;%字符串%&#39;索引不被使用的方法？</p><p>a）使用覆盖索引，查询字段必须是建立覆盖索引字段</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token string">&#39;%Lei%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727745.png" alt="img"></p><p>b）如果不能使用覆盖索引则可能需要借助搜索引擎</p><h3 id="_9-字符串不加单引号索引失效" tabindex="-1"><a class="header-anchor" href="#_9-字符串不加单引号索引失效"><span>9.字符串不加单引号索引失效</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">;</span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727401.png" alt="img"></p><h3 id="_10-少用or或in-用它查询时-mysql不一定使用索引-mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引-详见范围查询优化" tabindex="-1"><a class="header-anchor" href="#_10-少用or或in-用它查询时-mysql不一定使用索引-mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引-详见范围查询优化"><span>10.少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;LiLei&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;HanMeimei&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727701.png" alt="img"></p><h3 id="_11-范围查询优化" tabindex="-1"><a class="header-anchor" href="#_11-范围查询优化"><span>11.范围查询优化</span></a></h3><p>给年龄添加单值索引</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>employees<span class="token punctuation">\`</span></span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_age<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span> <span class="token punctuation">;</span>

<span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> age <span class="token operator">&gt;=</span><span class="token number">1</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727731.png" alt="img"></p><p>没走索引原因：mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引。比如这个例子，可能是由于单次数据量查询过大导致优化器最终选择不走索引</p><p>优化方法：可以将大的范围拆分成多个小范围</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> age <span class="token operator">&gt;=</span><span class="token number">1</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> age <span class="token operator">&gt;=</span><span class="token number">1001</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.jssjqd.cn/202110201727971.png" alt="img"></p><p>还原最初索引状态</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>employees<span class="token punctuation">\`</span></span> <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">\`</span>idx_age<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="索引使用总结" tabindex="-1"><a class="header-anchor" href="#索引使用总结"><span>索引使用总结</span></a></h2><p><img src="http://img.jssjqd.cn/202110201727091.png" alt="img"></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>like KK%相当于=常量，%KK和%KK% 相当于范围

-- mysql5.7关闭ONLY_FULL_GROUP_BY报错 select version(), @@sql_mode;SET sql_mode=(SELECT REPLACE(@@sql_mode,&#39;ONLY_FULL_GROUP_BY&#39;,&#39;&#39;));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,193),l=[p];function o(i,c){return n(),a("div",null,l)}const k=s(t,[["render",o],["__file","index.html.vue"]]),u=JSON.parse(`{"path":"/pages/0313c2/","title":"Explain详解与索引最佳实践","lang":"zh-CN","frontmatter":{"title":"Explain详解与索引最佳实践","date":"2022-08-31T01:56:40.000Z","permalink":"/pages/0313c2/","categories":["MySQL"],"tags":[null],"author":{"name":"江"}},"headers":[{"level":2,"title":"Explain工具介绍","slug":"explain工具介绍","link":"#explain工具介绍","children":[]},{"level":2,"title":"Explain分析示例","slug":"explain分析示例","link":"#explain分析示例","children":[]},{"level":2,"title":"explain 两个变种","slug":"explain-两个变种","link":"#explain-两个变种","children":[]},{"level":2,"title":"explain中的列","slug":"explain中的列","link":"#explain中的列","children":[{"level":3,"title":"1. id列","slug":"_1-id列","link":"#_1-id列","children":[]},{"level":3,"title":"2. select_type列","slug":"_2-select-type列","link":"#_2-select-type列","children":[]},{"level":3,"title":"3. table列","slug":"_3-table列","link":"#_3-table列","children":[]},{"level":3,"title":"4. partitions列","slug":"_4-partitions列","link":"#_4-partitions列","children":[]},{"level":3,"title":"5. type列","slug":"_5-type列","link":"#_5-type列","children":[]},{"level":3,"title":"6. possible_keys列","slug":"_6-possible-keys列","link":"#_6-possible-keys列","children":[]},{"level":3,"title":"7. key列","slug":"_7-key列","link":"#_7-key列","children":[]},{"level":3,"title":"8. key_len列","slug":"_8-key-len列","link":"#_8-key-len列","children":[]},{"level":3,"title":"9. ref列","slug":"_9-ref列","link":"#_9-ref列","children":[]},{"level":3,"title":"10. rows列","slug":"_10-rows列","link":"#_10-rows列","children":[]},{"level":3,"title":"11. filtered 列","slug":"_11-filtered-列","link":"#_11-filtered-列","children":[]},{"level":3,"title":"12. Extra列","slug":"_12-extra列","link":"#_12-extra列","children":[]}]},{"level":2,"title":"索引最佳实践","slug":"索引最佳实践","link":"#索引最佳实践","children":[{"level":3,"title":"1.全值匹配","slug":"_1-全值匹配","link":"#_1-全值匹配","children":[]},{"level":3,"title":"2.最左前缀法则","slug":"_2-最左前缀法则","link":"#_2-最左前缀法则","children":[]},{"level":3,"title":"3.不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描","slug":"_3-不在索引列上做任何操作-计算、函数、-自动or手动-类型转换-会导致索引失效而转向全表扫描","link":"#_3-不在索引列上做任何操作-计算、函数、-自动or手动-类型转换-会导致索引失效而转向全表扫描","children":[]},{"level":3,"title":"4.存储引擎不能使用索引中范围条件右边的列","slug":"_4-存储引擎不能使用索引中范围条件右边的列","link":"#_4-存储引擎不能使用索引中范围条件右边的列","children":[]},{"level":3,"title":"5.尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句","slug":"_5-尽量使用覆盖索引-只访问索引的查询-索引列包含查询列-减少-select-语句","link":"#_5-尽量使用覆盖索引-只访问索引的查询-索引列包含查询列-减少-select-语句","children":[]},{"level":3,"title":"6.mysql在使用不等于（！=或者<>)，not in ，not exists 的时候无法使用索引会导致全表扫描","slug":"_6-mysql在使用不等于-或者-not-in-not-exists-的时候无法使用索引会导致全表扫描","link":"#_6-mysql在使用不等于-或者-not-in-not-exists-的时候无法使用索引会导致全表扫描","children":[]},{"level":3,"title":"7.is null,is not null 一般情况下也无法使用索引","slug":"_7-is-null-is-not-null-一般情况下也无法使用索引","link":"#_7-is-null-is-not-null-一般情况下也无法使用索引","children":[]},{"level":3,"title":"8.like以通配符开头（'$abc...'）mysql索引失效会变成全表扫描操作","slug":"_8-like以通配符开头-abc-mysql索引失效会变成全表扫描操作","link":"#_8-like以通配符开头-abc-mysql索引失效会变成全表扫描操作","children":[]},{"level":3,"title":"9.字符串不加单引号索引失效","slug":"_9-字符串不加单引号索引失效","link":"#_9-字符串不加单引号索引失效","children":[]},{"level":3,"title":"10.少用or或in，用它查询时，mysql不一定使用索引，mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引，详见范围查询优化","slug":"_10-少用or或in-用它查询时-mysql不一定使用索引-mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引-详见范围查询优化","link":"#_10-少用or或in-用它查询时-mysql不一定使用索引-mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引-详见范围查询优化","children":[]},{"level":3,"title":"11.范围查询优化","slug":"_11-范围查询优化","link":"#_11-范围查询优化","children":[]}]},{"level":2,"title":"索引使用总结","slug":"索引使用总结","link":"#索引使用总结","children":[]}],"git":{"createdTime":1709200080000,"updatedTime":1709200080000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":12.94,"words":3882},"filePathRelative":"性能调优/00.MySQL/02.Explain详解与索引最佳实践.md","localizedDate":"2022年8月31日","excerpt":"<p><strong>Mysql安装文档参考</strong>：https://blog.csdn.net/yougoule/article/details/56680952</p>\\n<h2>Explain工具介绍</h2>\\n<p>使用EXPLAIN关键字可以模拟优化器执行SQL语句，分析你的查询语句或是结构的性能瓶颈</p>\\n<p>在 select 语句之前增加 explain 关键字，MySQL 会在查询上设置一个标记，执行查询会返回执行计划的信息，而不是执行这条SQL</p>\\n<p>注意：如果 from 中包含子查询，仍会执行该子查询，将结果放入临时表中</p>\\n<h2>Explain分析示例</h2>"}`);export{k as comp,u as data};
