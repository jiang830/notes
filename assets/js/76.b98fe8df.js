(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{401:function(a,t,d){"use strict";d.r(t);var s=d(4),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",{attrs:{"data-nodeid":"1577"}},[a._v("在介绍 Dockerfile 最佳实践前，这里再强调一下，"),t("strong",{attrs:{"data-nodeid":"1719"}},[a._v("生产实践中一定优先使用 Dockerfile 的方式构建镜像。")]),a._v(" 因为使用 Dockerfile 构建镜像可以带来很多好处：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"1578"}},[t("li",{attrs:{"data-nodeid":"1579"}},[t("p",{attrs:{"data-nodeid":"1580"}},[a._v("易于版本化管理，Dockerfile 本身是一个文本文件，方便存放在代码仓库做版本管理，可以很方便地找到各个版本之间的变更历史；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"1581"}},[t("p",{attrs:{"data-nodeid":"1582"}},[a._v("过程可追溯，Dockerfile 的每一行指令代表一个镜像层，根据 Dockerfile 的内容即可很明确地查看镜像的完整构建过程；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"1583"}},[t("p",{attrs:{"data-nodeid":"1584"}},[a._v("屏蔽构建环境异构，使用 Dockerfile 构建镜像无须考虑构建环境，基于相同 Dockerfile 无论在哪里运行，构建结果都一致。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1585"}},[a._v("虽然有这么多好处，但是如果你 Dockerfile 使用不当也会引发很多问题。比如镜像构建时间过长，甚至镜像构建失败；镜像层数过多，导致镜像文件过大。所以，这一课时我就教你如何在生产环境中编写最优的 Dockerfile。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1586"}},[a._v("在介绍 Dockerfile 最佳实践前，我们再聊一下我们平时书写 Dockerfile 应该尽量遵循的原则。")]),a._v(" "),t("h3",{attrs:{"data-nodeid":"1587"}},[a._v("Dockerfile 书写原则")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1588"}},[a._v("遵循以下 Dockerfile 书写原则，不仅可以使得我们的 Dockerfile 简洁明了，让协作者清楚地了解镜像的完整构建流程，还可以帮助我们减少镜像的体积，加快镜像构建的速度和分发速度。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1589"}},[a._v("（1）单一职责")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1590"}},[a._v("由于容器的本质是进程，一个容器代表一个进程，因此不同功能的应用应该尽量拆分为不同的容器，每个容器只负责单一业务进程。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1591"}},[a._v("（2）提供注释信息")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1592"}},[a._v("Dockerfile 也是一种代码，我们应该保持良好的代码编写习惯，晦涩难懂的代码尽量添加注释，让协作者可以一目了然地知道每一行代码的作用，并且方便扩展和使用。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1593"}},[a._v("（3）保持容器最小化")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1594"}},[a._v("应该避免安装无用的软件包，比如在一个 nginx 镜像中，我并不需要安装 vim 、gcc 等开发编译工具。这样不仅可以加快容器构建速度，而且可以避免镜像体积过大。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1595"}},[a._v("（4）合理选择基础镜像")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1596"}},[a._v("容器的核心是应用，因此只要基础镜像能够满足应用的运行环境即可。例如一个"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1735"}},[a._v("Java")]),a._v("类型的应用运行时只需要"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1737"}},[a._v("JRE")]),a._v("，并不需要"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1739"}},[a._v("JDK")]),a._v("，因此我们的基础镜像只需要安装"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1741"}},[a._v("JRE")]),a._v("环境即可。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1597"}},[a._v("（5）使用 .dockerignore 文件")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1598"}},[a._v("在使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1745"}},[a._v("git")]),a._v("时，我们可以使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1747"}},[a._v(".gitignore")]),a._v("文件忽略一些不需要做版本管理的文件。同理，使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1749"}},[a._v(".dockerignore")]),a._v("文件允许我们在构建时，忽略一些不需要参与构建的文件，从而提升构建效率。"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1751"}},[a._v(".dockerignore")]),a._v("的定义类似于"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1753"}},[a._v(".gitignore")]),a._v("。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1599"}},[t("code",{attrs:{"data-backticks":"1","data-nodeid":"1755"}},[a._v(".dockerignore")]),a._v("的本质是文本文件，Docker 构建时可以使用换行符来解析文件定义，每一行可以忽略一些文件或者文件夹。具体使用方式如下：")]),a._v(" "),t("table",{attrs:{"data-nodeid":"1601"}},[t("thead",{attrs:{"data-nodeid":"1602"}},[t("tr",{attrs:{"data-nodeid":"1603"}},[t("th",{attrs:{"data-org-content":"规则","data-nodeid":"1605"}},[a._v("规则")]),a._v(" "),t("th",{attrs:{"data-org-content":"含义","data-nodeid":"1606"}},[a._v("含义")])])]),a._v(" "),t("tbody",{attrs:{"data-nodeid":"1609"}},[t("tr",{attrs:{"data-nodeid":"1610"}},[t("td",{attrs:{"data-org-content":"#","data-nodeid":"1611"}},[a._v("#")]),a._v(" "),t("td",{attrs:{"data-org-content":"\\# 开头的表示注释，\\# 后面所有内容将会被忽略","data-nodeid":"1612"}},[a._v("# 开头的表示注释，# 后面所有内容将会被忽略")])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"1613"}},[t("td",{attrs:{"data-org-content":"*/tmp*","data-nodeid":"1614"}},[t("em",{attrs:{"data-nodeid":"1767"}},[a._v("/tmp")])]),a._v(" "),t("td",{attrs:{"data-org-content":"匹配当前目录下任何以 tmp 开头的文件或者文件夹","data-nodeid":"1615"}},[a._v("匹配当前目录下任何以 tmp 开头的文件或者文件夹")])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"1616"}},[t("td",{attrs:{"data-org-content":"\\*.md","data-nodeid":"1617"}},[a._v("*.md")]),a._v(" "),t("td",{attrs:{"data-org-content":"匹配以 .md 为后缀的任意文件","data-nodeid":"1618"}},[a._v("匹配以 .md 为后缀的任意文件")])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"1619"}},[t("td",{attrs:{"data-org-content":"tem?","data-nodeid":"1620"}},[a._v("tem?")]),a._v(" "),t("td",{attrs:{"data-org-content":"匹配以 tem 开头并且以任意字符结尾的文件，？代表任意一个字符","data-nodeid":"1621"}},[a._v("匹配以 tem 开头并且以任意字符结尾的文件，？代表任意一个字符")])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"1622"}},[t("td",{attrs:{"data-org-content":"!README.md","data-nodeid":"1623"}},[a._v("!README.md")]),a._v(" "),t("td",{attrs:{"data-org-content":"! 表示排除忽略。<br>例如 .dockerignore 定义如下：<br><br>\\*.md<br>!README.md<br><br>表示除了 README.md 文件外所有以 .md 结尾的文件。","data-nodeid":"1624"}},[a._v("! 表示排除忽略。"),t("br"),a._v("例如 .dockerignore 定义如下："),t("br"),t("br"),a._v("*.md"),t("br"),a._v("!README.md"),t("br"),t("br"),a._v("表示除了 README.md 文件外所有以 .md 结尾的文件。")])])])]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1625"}},[a._v("（6）尽量使用构建缓存")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1626"}},[a._v("Docker 构建过程中，每一条 Dockerfile 指令都会提交为一个镜像层，下一条指令都是基于上一条指令构建的。如果构建时发现要构建的镜像层的父镜像层已经存在，并且下一条命令使用了相同的指令，即可命中构建缓存。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1627"}},[a._v("Docker 构建时判断是否需要使用缓存的规则如下：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"1628"}},[t("li",{attrs:{"data-nodeid":"1629"}},[t("p",{attrs:{"data-nodeid":"1630"}},[a._v("从当前构建层开始，比较所有的子镜像，检查所有的构建指令是否与当前完全一致，如果不一致，则不使用缓存；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"1631"}},[t("p",{attrs:{"data-nodeid":"1632"}},[a._v("一般情况下，只需要比较构建指令即可判断是否需要使用缓存，但是有些指令除外（例如"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1795"}},[a._v("ADD")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1797"}},[a._v("COPY")]),a._v("）；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"1633"}},[t("p",{attrs:{"data-nodeid":"1634"}},[a._v("对于"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1800"}},[a._v("ADD")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1802"}},[a._v("COPY")]),a._v("指令不仅要校验命令是否一致，还要为即将拷贝到容器的文件计算校验和（根据文件内容计算出的一个数值，如果两个文件计算的数值一致，表示两个文件内容一致 ），命令和校验和完全一致，才认为命中缓存。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1635"}},[a._v("因此，基于 Docker 构建时的缓存特性，我们可以把不轻易改变的指令放到 Dockerfile 前面（例如安装软件包），而可能经常发生改变的指令放在 Dockerfile 末尾（例如编译应用程序）。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1636"}},[a._v("例如，我们想要定义一些环境变量并且安装一些软件包，可以按照如下顺序编写 Dockerfile：")]),a._v(" "),t("pre",{staticClass:"lang-dart",attrs:{"data-nodeid":"1637"}},[t("code",{attrs:{"data-language":"dart"}},[a._v("FROM centos:"),t("span",{staticClass:"hljs-number"},[a._v("7")]),a._v("\n# 设置环境变量指令放前面\nENV PATH /usr/local/bin:$PATH\n# 安装软件指令放前面\nRUN yum install -y make\n# 把业务软件的配置,版本等经常变动的步骤放最后\n...\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1638"}},[a._v("按照上面原则编写的 Dockerfile 在构建镜像时，前面步骤命中缓存的概率会增加，可以大大缩短镜像构建时间。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1639"}},[a._v("（7）正确设置时区")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1640"}},[a._v("我们从 Docker Hub 拉取的官方操作系统镜像大多数都是 UTC 时间（世界标准时间）。如果你想要在容器中使用中国区标准时间（东八区），请根据使用的操作系统修改相应的时区信息，下面我介绍几种常用操作系统的修改方式：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"1641"}},[t("li",{attrs:{"data-nodeid":"1642"}},[t("p",{attrs:{"data-nodeid":"1643"}},[t("strong",{attrs:{"data-nodeid":"1812"}},[a._v("Ubuntu 和Debian 系统")])])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1644"}},[a._v("Ubuntu 和Debian 系统可以向 Dockerfile 中添加以下指令：")]),a._v(" "),t("pre",{staticClass:"lang-dockerfile",attrs:{"data-nodeid":"1645"}},[t("code",{attrs:{"data-language":"dockerfile"}},[t("span",{staticClass:"hljs-keyword"},[a._v("RUN")]),t("span",{staticClass:"bash"},[a._v(" ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime")]),a._v("\n"),t("span",{staticClass:"hljs-keyword"},[a._v("RUN")]),t("span",{staticClass:"bash"},[a._v(" "),t("span",{staticClass:"hljs-built_in"},[a._v("echo")]),a._v(" "),t("span",{staticClass:"hljs-string"},[a._v('"Asia/Shanghai"')]),a._v(" >> /etc/timezone")]),a._v("\n")])]),a._v(" "),t("ul",{attrs:{"data-nodeid":"1646"}},[t("li",{attrs:{"data-nodeid":"1647"}},[t("p",{attrs:{"data-nodeid":"1648"}},[t("strong",{attrs:{"data-nodeid":"1817"}},[a._v("CentOS系统")])])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1649"}},[a._v("CentOS 系统则向 Dockerfile 中添加以下指令：")]),a._v(" "),t("pre",{staticClass:"lang-dockerfile",attrs:{"data-nodeid":"1650"}},[t("code",{attrs:{"data-language":"dockerfile"}},[t("span",{staticClass:"hljs-keyword"},[a._v("RUN")]),t("span",{staticClass:"bash"},[a._v(" ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime")]),a._v("\n")])]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1651"}},[a._v("（8）使用国内软件源加快镜像构建速度")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1652"}},[a._v("由于我们常用的官方操作系统镜像基本都是国外的，软件服务器大部分也在国外，所以我们构建镜像的时候想要安装一些软件包可能会非常慢。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1653"}},[a._v("这里我以 CentOS 7 为例，介绍一下如何使用 163 软件源（国内有很多大厂，例如阿里、腾讯、网易等公司都免费提供的软件加速源）加快镜像构建。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1654"}},[a._v("首先在容器构建目录创建文件 CentOS7-Base-163.repo，文件内容如下：")]),a._v(" "),t("pre",{staticClass:"lang-shell",attrs:{"data-nodeid":"1655"}},[t("code",{attrs:{"data-language":"shell"}},[t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v(" CentOS-Base.repo")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v(" The mirror system uses the connecting IP address of the client and the")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v(" update status of each mirror to pick mirrors that are updated to and")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v(" geographically close to the client.  You should use this "),t("span",{staticClass:"hljs-keyword"},[a._v("for")]),a._v(" CentOS updates")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v(" unless you are manually picking other mirrors.")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v(" If the mirrorlist= does not work "),t("span",{staticClass:"hljs-keyword"},[a._v("for")]),a._v(" you, as a fall back you can try the ")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v(" remarked out baseurl= line instead.")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),a._v("\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),a._v("\n[base]\nname=CentOS-$releasever - Base - 163.com\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v("mirrorlist=http://mirrorlist.centos.org/?release="),t("span",{staticClass:"hljs-variable"},[a._v("$releasever")]),a._v("&arch="),t("span",{staticClass:"hljs-variable"},[a._v("$basearch")]),a._v("&repo=os")]),a._v("\nbaseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v("released updates")]),a._v("\n[updates]\nname=CentOS-$releasever - Updates - 163.com\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v("mirrorlist=http://mirrorlist.centos.org/?release="),t("span",{staticClass:"hljs-variable"},[a._v("$releasever")]),a._v("&arch="),t("span",{staticClass:"hljs-variable"},[a._v("$basearch")]),a._v("&repo=updates")]),a._v("\nbaseurl=http://mirrors.163.com/centos/$releasever/updates/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v("additional packages that may be useful")]),a._v("\n[extras]\nname=CentOS-$releasever - Extras - 163.com\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v("mirrorlist=http://mirrorlist.centos.org/?release="),t("span",{staticClass:"hljs-variable"},[a._v("$releasever")]),a._v("&arch="),t("span",{staticClass:"hljs-variable"},[a._v("$basearch")]),a._v("&repo=extras")]),a._v("\nbaseurl=http://mirrors.163.com/centos/$releasever/extras/$basearch/\ngpgcheck=1\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n"),t("span",{staticClass:"hljs-meta"},[a._v("#")]),t("span",{staticClass:"bash"},[a._v("additional packages that extend functionality of existing packages")]),a._v("\n[centosplus]\nname=CentOS-$releasever - Plus - 163.com\nbaseurl=http://mirrors.163.com/centos/$releasever/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1656"}},[a._v("然后在 Dockerfile 中添加如下指令：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1657"}},[t("code",{attrs:{"data-language":"java"}},[a._v("COPY CentOS7-Base-"),t("span",{staticClass:"hljs-number"},[a._v("163.")]),a._v("repo /etc/yum.repos.d/CentOS7-Base.repo\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1658"}},[a._v("执行完上述步骤后，再使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1825"}},[a._v("yum install")]),a._v("命令安装软件时就会默认从 163 获取软件包，这样可以大大提升构建速度。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1659"}},[a._v("（9）最小化镜像层数")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1660"}},[a._v("在构建镜像时尽可能地减少 Dockerfile 指令行数。例如我们要在 CentOS 系统中安装"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1829"}},[a._v("make")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1831"}},[a._v("net-tools")]),a._v("两个软件包，应该在 Dockerfile 中使用以下指令：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1661"}},[t("code",{attrs:{"data-language":"java"}},[a._v("RUN yum install -y make net-tools\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1662"}},[a._v("而不应该写成这样：")]),a._v(" "),t("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1663"}},[t("code",{attrs:{"data-language":"java"}},[a._v("RUN yum install -y make\nRUN yum install -y net-tools\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1664"}},[a._v("了解完 Dockerfile 的书写原则后，我们再来具体了解下这些原则落实到具体的 Dockerfile 指令应该如何书写。")]),a._v(" "),t("h3",{attrs:{"data-nodeid":"1665"}},[a._v("Dockerfile 指令书写建议")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1666"}},[a._v("下面是我们常用的一些指令，这些指令对于刚接触 Docker 的人来说会非常容易出错，下面我对这些指令的书写建议详细讲解一下。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1667"}},[a._v("（1）RUN")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1668"}},[t("code",{attrs:{"data-backticks":"1","data-nodeid":"1838"}},[a._v("RUN")]),a._v("指令在构建时将会生成一个新的镜像层并且执行"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1840"}},[a._v("RUN")]),a._v("指令后面的内容。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1669"}},[a._v("使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1843"}},[a._v("RUN")]),a._v("指令时应该尽量遵循以下原则：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"1670"}},[t("li",{attrs:{"data-nodeid":"1671"}},[t("p",{attrs:{"data-nodeid":"1672"}},[a._v("当"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1846"}},[a._v("RUN")]),a._v("指令后面跟的内容比较复杂时，建议使用反斜杠（\\） 结尾并且换行；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"1673"}},[t("p",{attrs:{"data-nodeid":"1674"}},[t("code",{attrs:{"data-backticks":"1","data-nodeid":"1850"}},[a._v("RUN")]),a._v("指令后面的内容尽量按照字母顺序排序，提高可读性。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1675"}},[a._v("例如，我想在官方的 CentOS 镜像下安装一些软件，一个建议的 Dockerfile 指令如下：")]),a._v(" "),t("pre",{staticClass:"lang-dockerfile",attrs:{"data-nodeid":"1676"}},[t("code",{attrs:{"data-language":"dockerfile"}},[t("span",{staticClass:"hljs-keyword"},[a._v("FROM")]),a._v(" centos:"),t("span",{staticClass:"hljs-number"},[a._v("7")]),a._v("\n"),t("span",{staticClass:"hljs-keyword"},[a._v("RUN")]),t("span",{staticClass:"bash"},[a._v(" yum install -y automake \\\n                   curl \\\n                   python \\\n                   vim")]),a._v("\n")])]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1677"}},[a._v("（2）CMD 和 ENTRYPOINT")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1678"}},[t("code",{attrs:{"data-backticks":"1","data-nodeid":"1854"}},[a._v("CMD")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1856"}},[a._v("ENTRYPOINT")]),a._v("指令都是容器运行的命令入口，这两个指令使用中有很多相似的地方，但是也有一些区别。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1679"}},[a._v("这两个指令的相同之处，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1859"}},[a._v("CMD")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1861"}},[a._v("ENTRYPOINT")]),a._v("的基本使用格式分为两种。")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"5330"}},[t("li",{attrs:{"data-nodeid":"5331"}},[t("p",{attrs:{"data-nodeid":"5332"}},[a._v("第一种为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5339"}},[a._v("CMD")]),a._v("/"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5341"}},[a._v("ENTRYPOINT")]),a._v('["command" , "param"]。这种格式是使用 Linux 的'),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5352"}},[a._v("exec")]),a._v("实现的， 一般称为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5354"}},[a._v("exec")]),a._v("模式，这种书写格式为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5356"}},[a._v("CMD")]),a._v("/"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5358"}},[a._v("ENTRYPOINT")]),a._v("后面跟 json 数组，也是Docker 推荐的使用格式。")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"5333"}},[t("p",{attrs:{"data-nodeid":"5334"}},[a._v("另外一种格式为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5361"}},[a._v("CMD")]),a._v("/"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5363"}},[a._v("ENTRYPOINT")]),a._v("command param ，这种格式是基于 shell 实现的， 通常称为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5365"}},[a._v("shell")]),a._v("模式。当使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"5367"}},[a._v("shell")]),a._v("模式时，Docker 会以 /bin/sh -c command 的方式执行命令。")])])]),a._v(" "),t("blockquote",{attrs:{"data-nodeid":"5335"}},[t("p",{attrs:{"data-nodeid":"5336"}},[a._v('使用 exec 模式启动容器时，容器的 1 号进程就是 CMD/ENTRYPOINT 中指定的命令，而使用 shell 模式启动容器时相当于我们把启动命令放在了 shell 进程中执行，等效于执行  /bin/sh -c "task command" 命令。因此 shell 模式启动的进程在容器中实际上并不是 1 号进程。')])]),a._v(" "),t("p",{attrs:{"data-nodeid":"5337"}},[a._v("这两个指令的区别：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"1686"}},[t("li",{attrs:{"data-nodeid":"1687"}},[t("p",{attrs:{"data-nodeid":"1688"}},[a._v("Dockerfile 中如果使用了"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1896"}},[a._v("ENTRYPOINT")]),a._v("指令，启动 Docker 容器时需要使用 --entrypoint 参数才能覆盖 Dockerfile 中的"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1898"}},[a._v("ENTRYPOINT")]),a._v("指令 ，而使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1900"}},[a._v("CMD")]),a._v("设置的命令则可以被"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1902"}},[a._v("docker run")]),a._v("后面的参数直接覆盖。")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"1689"}},[t("p",{attrs:{"data-nodeid":"1690"}},[t("code",{attrs:{"data-backticks":"1","data-nodeid":"1904"}},[a._v("ENTRYPOINT")]),a._v("指令可以结合"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1906"}},[a._v("CMD")]),a._v("指令使用，也可以单独使用，而"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1908"}},[a._v("CMD")]),a._v("指令只能单独使用。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1691"}},[a._v("看到这里你也许会问，我什么时候应该使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1911"}},[a._v("ENTRYPOINT")]),a._v(",什么时候使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1913"}},[a._v("CMD")]),a._v("呢？")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1692"}},[a._v("如果你希望你的镜像足够灵活，推荐使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1916"}},[a._v("CMD")]),a._v("指令。如果你的镜像只执行单一的具体程序，并且不希望用户在执行"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1918"}},[a._v("docker run")]),a._v("时覆盖默认程序，建议使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1920"}},[a._v("ENTRYPOINT")]),a._v("。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1693"}},[a._v("最后再强调一下，无论使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1923"}},[a._v("CMD")]),a._v("还是"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1925"}},[a._v("ENTRYPOINT")]),a._v("，都尽量使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1927"}},[a._v("exec")]),a._v("模式。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1694"}},[a._v("（3）ADD 和 COPY")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1695"}},[t("code",{attrs:{"data-backticks":"1","data-nodeid":"1930"}},[a._v("ADD")]),a._v("和"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1932"}},[a._v("COPY")]),a._v("指令功能类似，都是从外部往容器内添加文件。但是"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1934"}},[a._v("COPY")]),a._v("指令只支持基本的文件和文件夹拷贝功能，"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1936"}},[a._v("ADD")]),a._v("则支持更多文件来源类型，比如自动提取 tar 包，并且可以支持源文件为 URL 格式。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1696"}},[a._v("那么在日常应用中，我们应该使用哪个命令向容器里添加文件呢？你可能在想，既然"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1939"}},[a._v("ADD")]),a._v("指令支持的功能更多，当然应该使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1941"}},[a._v("ADD")]),a._v("指令了。然而事实恰恰相反，我更推荐你使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1943"}},[a._v("COPY")]),a._v("指令，因为"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1945"}},[a._v("COPY")]),a._v("指令更加透明，仅支持本地文件向容器拷贝，而且使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1947"}},[a._v("COPY")]),a._v("指令可以更好地利用构建缓存，有效减小镜像体积。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1697"}},[a._v("当你想要使用"),t("code",{attrs:{"data-backticks":"1","data-nodeid":"1950"}},[a._v("ADD")]),a._v("向容器中添加 URL 文件时，请尽量考虑使用其他方式替代。例如你想要在容器中安装 memtester（一种内存压测工具），你应该避免使用以下格式：")]),a._v(" "),t("pre",{staticClass:"lang-dockerfile",attrs:{"data-nodeid":"1698"}},[t("code",{attrs:{"data-language":"dockerfile"}},[t("span",{staticClass:"hljs-keyword"},[a._v("ADD")]),t("span",{staticClass:"bash"},[a._v(" http://pyropus.ca/software/memtester/old-versions/memtester-4.3.0.tar.gz /tmp/")]),a._v("\n"),t("span",{staticClass:"hljs-keyword"},[a._v("RUN")]),t("span",{staticClass:"bash"},[a._v(" tar -xvf /tmp/memtester-4.3.0.tar.gz -C /tmp")]),a._v("\n"),t("span",{staticClass:"hljs-keyword"},[a._v("RUN")]),t("span",{staticClass:"bash"},[a._v(" make -C /tmp/memtester-4.3.0 && make -C /tmp/memtester-4.3.0 install")]),a._v("\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"1699"}},[a._v("下面是推荐写法：")]),a._v(" "),t("pre",{staticClass:"lang-dockerfile",attrs:{"data-nodeid":"1700"}},[t("code",{attrs:{"data-language":"dockerfile"}},[t("span",{staticClass:"hljs-keyword"},[a._v("RUN")]),t("span",{staticClass:"bash"},[a._v(" wget -O /tmp/memtester-4.3.0.tar.gz http://pyropus.ca/software/memtester/old-versions/memtester-4.3.0.tar.gz \\\n&& tar -xvf /tmp/memtester-4.3.0.tar.gz -C /tmp \\\n&& make -C /tmp/memtester-4.3.0 && make -C /tmp/memtester-4.3.0 install")]),a._v("\n")])]),a._v(" "),t("h4",{attrs:{"data-nodeid":"1701"}},[a._v("（4）WORKDIR")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1702"}},[a._v("为了使构建过程更加清晰明了，推荐使用 WORKDIR 来指定容器的工作路径，应该尽量避免使用 RUN cd /work/path && do some work 这样的指令。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1703"}},[a._v("最后给出几个常用软件的官方 Dockerfile 示例链接，希望可以对你有所帮助。")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"1704"}},[t("li",{attrs:{"data-nodeid":"1705"}},[t("p",{attrs:{"data-nodeid":"1706"}},[t("a",{attrs:{href:"https://github.com/docker-library/golang/blob/4d68c4dd8b51f83ce4fdce0f62484fdc1315bfa8/1.15/buster/Dockerfile","data-nodeid":"1961"}},[a._v("Go")])])]),a._v(" "),t("li",{attrs:{"data-nodeid":"1707"}},[t("p",{attrs:{"data-nodeid":"1708"}},[t("a",{attrs:{href:"https://github.com/nginxinc/docker-nginx/blob/9774b522d4661effea57a1fbf64c883e699ac3ec/mainline/buster/Dockerfile","data-nodeid":"1964"}},[a._v("Nginx")])])]),a._v(" "),t("li",{attrs:{"data-nodeid":"1709"}},[t("p",{attrs:{"data-nodeid":"1710"}},[t("a",{attrs:{href:"https://github.com/hylang/docker-hylang/blob/f9c873b7f71f466e5af5ea666ed0f8f42835c688/dockerfiles-generated/Dockerfile.python3.8-buster","data-nodeid":"1967"}},[a._v("Hy")])])])]),a._v(" "),t("h3",{attrs:{"data-nodeid":"1711"}},[a._v("结语")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1712"}},[a._v("好了，到此为止，相信你已经对 Dockerfile 的书写原则和一些重要指令有了较深的认识。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"1713"}},[a._v("当你需要编写编译型语言（例如 Golang、Java）的 Dockerfile 时，如何分离编译环境和运行环境，使得镜像体积尽可能小呢？思考后，可以把你的想法写在留言区。")]),a._v(" "),t("hr"),a._v(" "),t("h3",{attrs:{id:"精选评论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[a._v("#")]),a._v(" 精选评论")]),a._v(" "),t("h5",{attrs:{id:"ben-zhong"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ben-zhong"}},[a._v("#")]),a._v(" Ben.Zhong：")]),a._v(" "),t("blockquote",[t("p",[a._v("把 编译环境 单独打包镜像，只提供编译好的二进制（注意运行 CPU 架构）。运行环境单独做镜像，只考虑基础运行环境的配置。好处还是很明显，程序发布单独版本管理，运行环境也单独组合。还有好处就是，运行环境打补丁升级等等，不用影响程序发布。")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    是的，这位同学理解很到位，分离编译环境和运行环境对于生产环境很重要")])]),a._v(" "),t("h5",{attrs:{id:"潘"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#潘"}},[a._v("#")]),a._v(" 潘：")]),a._v(" "),t("blockquote",[t("p",[a._v("这个docker学习通俗易懂")])]),a._v(" "),t("h5",{attrs:{id:"庚"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#庚"}},[a._v("#")]),a._v(" *庚：")]),a._v(" "),t("blockquote",[t("p",[a._v("为什么推荐exec模式")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    exec 可以保证我们的业务进程就是 1 号进程，这对于需要处理 SIGTERM 信号量实现优雅终止十分重要。")])]),a._v(" "),t("h5",{attrs:{id:"的蜗牛"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#的蜗牛"}},[a._v("#")]),a._v(" **的蜗牛：")]),a._v(" "),t("blockquote",[t("p",[a._v("「尽量使用构建缓存」放在后面命中缓存的概率是一样的，构建镜像的整体时间原则上也一样。所以对这个原则不是很理解？")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-3"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    简单来说就是如果第n层有改动，则n层以后的缓存都会失效，⼤多数情况下判断有⽆改动的⽅法是判断这层的指令和缓存中的构建 指令是否⼀致，但是对于COPY和ADD命令会计算镜像内的⽂件和构建⽬录⽂件的校验和然后做⽐较来判断本层是否有改动。")])]),a._v(" "),t("h5",{attrs:{id:"朋"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#朋"}},[a._v("#")]),a._v(" *朋：")]),a._v(" "),t("blockquote",[t("p",[a._v("docker-compose. yml中，service下配置了volumn，在全局中也有volumn的声明，这个声明有什么用")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-4"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    全局中声明 volumns，在 service 中使用，这样设计是为了方便多个 service 中的服务共享相同的 volumn")])]),a._v(" "),t("h5",{attrs:{id:"kopelan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kopelan"}},[a._v("#")]),a._v(" kopelan：")]),a._v(" "),t("blockquote",[t("p",[a._v("hi，dockerfile中的ENV是否也是每局一层呢？比如我要配置多个ENV环境变量，我应该怎么写？另外我看教程中ENV 有写作ENV key value，也有写作ENV key=value，这个有什么区别呢？")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-5"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    定义多个 ENV 直接多行写就行,基本不会占用额外空间, 一般推荐写成 ENV key=value 的形式")])]),a._v(" "),t("h5",{attrs:{id:"斯"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#斯"}},[a._v("#")]),a._v(" **斯：")]),a._v(" "),t("blockquote",[t("p",[a._v("要尽量减小,镜像的体积！ 为什么基础底层镜像不使用alpine呢")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-6"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    生产中如果公司镜像统一,底层镜像尽量使用工具较多的镜像, alpine 虽然小,但是功能相对也少,而底层镜像只需要拉取一次.")])]),a._v(" "),t("h5",{attrs:{id:"佳"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#佳"}},[a._v("#")]),a._v(" **佳：")]),a._v(" "),t("blockquote",[t("p",[a._v('老师，请教一个Linux的问题。为什么以下两个命令输出的结果不一样呢？我想这也是要尽量用exec的原因是吗？echo HOME=$HOMEsh -c echo">HOME=$HOME')])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-7"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    第一个命令相当于在容器主进程下执行命令，第二个命令是先创建一个 sh 进程，然后再执行相关的命令")])]),a._v(" "),t("h5",{attrs:{id:"博"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#博"}},[a._v("#")]),a._v(" **博：")]),a._v(" "),t("blockquote",[t("p",[a._v('不太懂编译环境和运行环境，比如我现在的dockerFile，jar包直接运行了FROM openjdk:8-jre-alpineCOPY . /usr/src/myappWORKDIR /usr/src/myappENTRYPOINT ["java", "-jar", "channeladminservice.jar"]CMD ["--spring.profiles.active=cloud-smoke"]')])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-8"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    编译环境是指编译运行程序所需要的环境，运行环境即我们的应用程序想要正常运行所依赖的环境。例如我们编译 Java 应用程序需要 JDK 环境，而真正运行我们的 Java 程序则仅需要 JRE 环境即可。")])]),a._v(" "),t("h5",{attrs:{id:"升"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#升"}},[a._v("#")]),a._v(" **升：")]),a._v(" "),t("blockquote",[t("p",[a._v("真的很赞啊，写得太好了")])]),a._v(" "),t("h5",{attrs:{id:"峰"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#峰"}},[a._v("#")]),a._v(" *峰：")]),a._v(" "),t("blockquote",[t("p",[a._v("能否分享下java栈最优dockfile")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-9"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    这个需要根据不同的业务场景来制定的，推荐使用多阶段编译的方式，将编译环境和运行环境分开，然后遵循第6讲 Dockerfile 最佳实践中的原则编写 Dockerfile 即可")])]),a._v(" "),t("h5",{attrs:{id:"_1156"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1156"}},[a._v("#")]),a._v(" **1156：")]),a._v(" "),t("blockquote",[t("p",[a._v('CMD ["nginx", "-g", "daemon off;"]这个-g和daemon off是什么意思')])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-10"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    就是让 nginx 以前台的方式启动，启动后不退出当前窗口")])]),a._v(" "),t("p",[a._v("b")])])}),[],!1,null,null,null);t.default=e.exports}}]);