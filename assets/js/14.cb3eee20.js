(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{338:function(t,e,a){"use strict";a.r(e);var r=a(4),n=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("本文的主要内容：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("介绍装饰者模式")])]),t._v(" "),e("li",[e("p",[t._v("示例")])]),t._v(" "),e("li",[e("p",[t._v("源码分析装饰者模式的典型应用")])]),t._v(" "),e("li",[e("p",[t._v("Java I/O 中的装饰者模式")])]),t._v(" "),e("li",[e("p",[t._v("spring session 中的装饰者模式")])]),t._v(" "),e("li",[e("p",[t._v("Mybatis 缓存中的装饰者模式")])]),t._v(" "),e("li",[e("p",[t._v("总结")])])]),t._v(" "),e("h3",{attrs:{id:"装饰者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式"}},[t._v("#")]),t._v(" 装饰者模式")]),t._v(" "),e("p",[e("strong",[t._v("装饰者模式 (Decorator Pattern)")]),t._v("：动态地给一个对象增加一些额外的职责，增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。")]),t._v(" "),e("p",[t._v("在装饰者模式中，为了让系统具有更好的灵活性和可扩展性，我们通常会定义一个抽象装饰类，而将具体的装饰类作为它的子类")]),t._v(" "),e("h4",{attrs:{id:"角色"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#角色"}},[t._v("#")]),t._v(" 角色")]),t._v(" "),e("p",[e("strong",[t._v("Component（抽象构件）")]),t._v("：它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法，它的引入可以使客户端以一致的方式处理未被装饰的对象以及装饰之后的对象，实现客户端的透明操作。")]),t._v(" "),e("p",[e("strong",[t._v("ConcreteComponent（具体构件）")]),t._v("：它是抽象构件类的子类，用于定义具体的构件对象，实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）。")]),t._v(" "),e("p",[e("strong",[t._v("Decorator（抽象装饰类）")]),t._v("：它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法，并通过其子类扩展该方法，以达到装饰的目的。")]),t._v(" "),e("p",[e("strong",[t._v("ConcreteDecorator（具体装饰类）")]),t._v("：它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，它可以调用在抽象装饰类中定义的方法，并可以增加新的方法用以扩充对象的行为。")]),t._v(" "),e("p",[t._v("由于具体构件类和装饰类都实现了相同的抽象构件接口，因此装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任，换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不需要创造更多子类的情况下，将对象的功能加以扩展。")]),t._v(" "),e("p",[t._v("装饰模式的"),e("strong",[t._v("核心在于抽象装饰类的设计")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("p",[t._v("煎饼抽象类")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public abstract class ABattercake {    \n\tprotected abstract String getDesc();   \n\tprotected abstract int cost();\n}\n")])])]),e("p",[t._v("煎饼类，继承了煎饼抽象类，一个煎饼 8 块钱")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class Battercake extends ABattercake {    \n\n \t@Override    \n \tprotected String getDesc() {        \n \treturn "煎饼";    \n \t}    \n \t@Override    \n \tprotected int cost() {       \n    return 8;    \n    }\n    \n}\n')])])]),e("p",[t._v("抽象装饰类，需要注意的是，"),e("strong",[t._v("抽象装饰类通过成员属性的方式将 煎饼抽象类组合进来，同时也继承了煎饼抽象类")]),t._v("，且这里定义了新的业务方法 "),e("code",[t._v("doSomething()")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public abstract class AbstractDecorator extends ABattercake {    \n\n    private ABattercake aBattercake;   \n    public AbstractDecorator(ABattercake aBattercake) {        \n        this.aBattercake = aBattercake;    \n    }    \n    protected abstract void doSomething();    \n    @Override    \n    protected String getDesc() {        \n        return this.aBattercake.getDesc();   \n         }    \n    @Override   \n    protected int cost() {        \n        return this.aBattercake.cost();    \n    }\n}\n")])])]),e("p",[t._v("鸡蛋装饰器，继承了抽象装饰类，鸡蛋装饰器在父类的基础上增加了一个鸡蛋，同时价格加上 1 块钱")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class EggDecorator extends AbstractDecorator { \n\n    public EggDecorator(ABattercake aBattercake) {       \n   \t\tsuper(aBattercake);   \n    }  \n    \n    @Override   \n    protected void doSomething() {    \n    } \n    \n    @Override    \n    protected String getDesc() {        \n    \treturn super.getDesc() + " 加一个鸡蛋";    \n    }   \n    \n    @Override    \n    protected int cost() {        \n    return super.cost() + 1;   \n    }    \n    public void egg() {       \n    System.out.println("增加了一个鸡蛋");    \n    }\n}\n')])])]),e("p",[t._v("香肠装饰器，与鸡蛋装饰器类似，继承了抽象装饰类，给在父类的基础上加上一根香肠，同时价格增加 2 块钱")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class SausageDecorator extends AbstractDecorator{    \n\n    public SausageDecorator(ABattercake aBattercake) {        \n        super(aBattercake);   \n    }   \n    \n    @Override   \n        protected void doSomething() {    \n    }   \n    \n    @Override   \n    protected String getDesc() {        \n        return super.getDesc() + " 加一根香肠";    \n    }  \n    \n    @Override    \n    protected int cost() {        \n        return super.cost() + 2;    \n    }\n    \n}\n')])])]),e("h4",{attrs:{id:"测试-购买煎饼"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试-购买煎饼"}},[t._v("#")]),t._v(" 测试，购买煎饼")]),t._v(" "),e("p",[e("strong",[t._v("1、购买一个煎饼")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class Test {    \n\tpublic static void main(String[] args) {       \n\tABattercake aBattercake = new Battercake();        \n\tSystem.out.println(aBattercake.getDesc() + ", 销售价格: " + aBattercake.cost());    \n\t}\n}\n')])])]),e("p",[t._v("输出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("煎饼, 销售价格: 8\n")])])]),e("p",[e("strong",[t._v("2、购买一个加鸡蛋的煎饼")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class Test {    \n\tpublic static void main(String[] args) {        \n\tABattercake aBattercake = new Battercake();        \n\taBattercake = new EggDecorator(aBattercake);        \n\tSystem.out.println(aBattercake.getDesc() + ", 销售价格: " + aBattercake.cost());    \n\t}\n}\n')])])]),e("p",[t._v("输出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("煎饼 加一个鸡蛋, 销售价格: 9\n")])])]),e("p",[e("strong",[t._v("3、购买一个加两个鸡蛋的煎饼")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class Test {    \n    public static void main(String[] args) {       \n        ABattercake aBattercake = new Battercake();       \n        aBattercake = new EggDecorator(aBattercake);        \n        aBattercake = new EggDecorator(aBattercake);        \n        System.out.println(aBattercake.getDesc() + ", 销售价格: " + aBattercake.cost());   \n    }\n}\n')])])]),e("p",[t._v("输出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("煎饼 加一个鸡蛋 加一个鸡蛋, 销售价格: 10\n")])])]),e("p",[e("strong",[t._v("4、购买一个加两个鸡蛋和一根香肠的煎饼")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class Test {    \n    public static void main(String[] args) {        \n        ABattercake aBattercake = new Battercake();        \n        aBattercake = new EggDecorator(aBattercake);        \n        aBattercake = new EggDecorator(aBattercake);        \n        aBattercake = new SausageDecorator(aBattercake);        \n        System.out.println(aBattercake.getDesc() + ", 销售价格: " + aBattercake.cost());    \n    }\n}\n')])])]),e("p",[t._v("输出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("煎饼 加一个鸡蛋 加一个鸡蛋 加一根香肠, 销售价格: 12\n")])])]),e("p",[t._v("画出 UML 类图如下所示")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.jssjqd.cn/20200708175926.png",alt:""}})]),t._v(" "),e("p",[t._v("装饰者模式类图")]),t._v(" "),e("h4",{attrs:{id:"小结一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结一下"}},[t._v("#")]),t._v(" 小结一下")]),t._v(" "),e("p",[t._v("由于具体构件类和装饰类都实现了相同的抽象构件接口，因此装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任，换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。")]),t._v(" "),e("p",[t._v("譬如我们给煎饼加上一个鸡蛋可以这么写 "),e("code",[t._v("aBattercake = new EggDecorator(aBattercake);")]),t._v("，客户端仍然可以把 "),e("code",[t._v("aBattercake")]),t._v(" 当成原来的 "),e("code",[t._v("aBattercake")]),t._v("一样，不过现在的 "),e("code",[t._v("aBattercake")]),t._v("已经被装饰加上了鸡蛋")]),t._v(" "),e("p",[t._v("装饰模式可以在不需要创造更多子类的情况下，将对象的功能加以扩展。")]),t._v(" "),e("h4",{attrs:{id:"透明装饰模式与半透明装饰模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#透明装饰模式与半透明装饰模式"}},[t._v("#")]),t._v(" 透明装饰模式与半透明装饰模式")]),t._v(" "),e("p",[t._v("在上面的示例中，装饰后的对象是通过抽象构建类类型 "),e("code",[t._v("ABattercake")]),t._v(" 的变量来引用的，在鸡蛋装饰器这个类中我们新增了 "),e("code",[t._v("egg()")]),t._v(" 方法，如果此时我们想要"),e("strong",[t._v("单独调用该方法")]),t._v("是调用不到的")]),t._v(" "),e("p",[t._v("除非引用变量的类型改为 "),e("code",[t._v("EggDecorator")]),t._v("，这样就可以调用了")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("EggDecorator eggBattercake = new EggDecorator(aBattercake); eggBattercake.egg();\n")])])]),e("p",[t._v("在实际使用过程中，由于新增行为可能需要单独调用，因此这种形式的装饰模式也经常出现，这种装饰模式被称为"),e("strong",[t._v("半透明 (Semi-transparent) 装饰模式")]),t._v("，而标准的装饰模式是"),e("strong",[t._v("透明 (Transparent) 装饰模式")]),t._v("。")]),t._v(" "),e("p",[e("strong",[t._v("(1) 透明装饰模式")])]),t._v(" "),e("p",[t._v("在透明装饰模式中，要求客户端完全针对抽象编程，装饰模式的透明性要求客户端程序不应该将对象声明为具体构件类型或具体装饰类型，而应该全部声明为抽象构件类型。")]),t._v(" "),e("p",[e("strong",[t._v("(2) 半透明装饰模式")])]),t._v(" "),e("p",[t._v("透明装饰模式的设计难度较大，而且有时我们需要单独调用新增的业务方法。为了能够调用到新增方法，我们不得不用具体装饰类型来定义装饰之后的对象，而具体构件类型还是可以使用抽象构件类型来定义，这种装饰模式即为半透明装饰模式。")]),t._v(" "),e("p",[t._v("半透明装饰模式可以给系统带来更多的灵活性，设计相对简单，使用起来也非常方便；但是其最大的缺点在于"),e("strong",[t._v("不能实现对同一个对象的多次装饰")]),t._v("，而且客户端需要有区别地对待装饰之前的对象和装饰之后的对象。")]),t._v(" "),e("h4",{attrs:{id:"装饰模式注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#装饰模式注意事项"}},[t._v("#")]),t._v(" 装饰模式注意事项")]),t._v(" "),e("p",[t._v("(1) 尽量保持装饰类的接口与被装饰类的接口相同，这样，对于客户端而言，无论是装饰之前的对象还是装饰之后的对象都可以一致对待。这也就是说，在可能的情况下，我们应该尽量使用透明装饰模式。")]),t._v(" "),e("p",[t._v("(2) 尽量保持具体构件类是一个 “轻” 类，也就是说不要把太多的行为放在具体构件类中，我们可以通过装饰类对其进行扩展。")]),t._v(" "),e("p",[t._v("(3) 如果只有一个具体构件类，那么抽象装饰类可以作为该具体构件类的直接子类。")]),t._v(" "),e("h3",{attrs:{id:"源码分析装饰者模式的典型应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码分析装饰者模式的典型应用"}},[t._v("#")]),t._v(" 源码分析装饰者模式的典型应用")]),t._v(" "),e("h4",{attrs:{id:"java-i-o-中的装饰者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-i-o-中的装饰者模式"}},[t._v("#")]),t._v(" Java I/O 中的装饰者模式")]),t._v(" "),e("p",[t._v("使用 Java I/O 的时候总是有各种输入流、输出流、字符流、字节流、过滤流、缓冲流等等各种各样的流，不熟悉里边的设计模式的话总会看得云里雾里的，现在通过设计模式的角度来看 Java I/O，会好理解很多。")]),t._v(" "),e("p",[t._v("先用一幅图来看看 Java I/O 到底是什么，下面的这幅图生动的刻画了 Java I/O 的作用。")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.jssjqd.cn/20200708180017.png",alt:""}}),t._v("Java I/O 的作用图")]),t._v(" "),e("p",[t._v("由上图可知在 Java 中应用程序通过输入流（InputStream）的 Read 方法从源地址处读取字节，然后通过输出流（OutputStream）的 Write 方法将流写入到目的地址。")]),t._v(" "),e("p",[t._v("流的来源主要有三种：本地的文件（File）、控制台、通过 socket 实现的网络通信")]),t._v(" "),e("p",[t._v("下面的图可以看出 Java 中的装饰者类和被装饰者类以及它们之间的关系，这里只列出了 InputStream 中的关系：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.jssjqd.cn/20200708180119.png",alt:""}}),t._v("InputStream 部分类关系")]),t._v(" "),e("p",[t._v("由上图可以看出只要继承了 FilterInputStream 的类就是装饰者类，可以用于包装其他的流，装饰者类还可以对装饰者和类进行再包装。")]),t._v(" "),e("p",[e("strong",[t._v("这里总结几种常用流的应用场景")]),t._v("：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("流名称")]),t._v(" "),e("th",[t._v("应用场景")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("ByteArrayInputStream")]),t._v(" "),e("td",[t._v("访问数组，把内存中的一个缓冲区作为 InputStream 使用，CPU 从缓存区读取数据比从存储介质的速率快 10 倍以上")])]),t._v(" "),e("tr",[e("td",[t._v("StringBufferInputStream")]),t._v(" "),e("td",[t._v("把一个 String 对象作为。InputStream。不建议使用，在转换字符的问题上有缺陷")])]),t._v(" "),e("tr",[e("td",[t._v("FileInputStream")]),t._v(" "),e("td",[t._v("访问文件，把一个文件作为 InputStream ，实现对文件的读取操作")])]),t._v(" "),e("tr",[e("td",[t._v("PipedInputStream")]),t._v(" "),e("td",[t._v("访问管道，主要在线程中使用，一个线程通过管道输出流发送数据，而另一个线程通过管道输入流读取数据，这样可实现两个线程间的通讯")])]),t._v(" "),e("tr",[e("td",[t._v("SequenceInputStream")]),t._v(" "),e("td",[t._v("把多个 InputStream 合并为一个 InputStream . “序列输入流” 类允许应用程序把几个输入流连续地合并起来")])]),t._v(" "),e("tr",[e("td",[t._v("DataInputStream")]),t._v(" "),e("td",[t._v("特殊流，读各种基本类型数据, 如 byte、int、String 的功能")])]),t._v(" "),e("tr",[e("td",[t._v("ObjectInputStream")]),t._v(" "),e("td",[t._v("对象流，读对象的功能")])]),t._v(" "),e("tr",[e("td",[t._v("PushBackInputStream")]),t._v(" "),e("td",[t._v("推回输入流，可以把读取进来的某些数据重新回退到输入流的缓冲区之中")])]),t._v(" "),e("tr",[e("td",[t._v("BufferedInputStream")]),t._v(" "),e("td",[t._v("缓冲流，增加了缓冲功能")])])])]),t._v(" "),e("p",[e("strong",[t._v("下面看一下 Java 中包装流的实例")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import java.io.BufferedInputStream;\nimport java.io.DataInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class StreamDemo {    \n    public static void main(String[] args) throws IOException{        \n        DataInputStream in=new DataInputStream(new BufferedInputStream(new  FileInputStream("D:\\\\hello.txt")));       \n        while(in.available()!=0) {           \n        System.out.print((char)in.readByte());        \n        }        \n        in.close();    \n    }\n}\n')])])]),e("p",[t._v("输出结果")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("hello world!hello Java I/O!\n")])])]),e("p",[t._v("上面程序中对流进行了两次包装，先用 BufferedInputStream 将 FileInputStream 包装成缓冲流也就是给 FileInputStream 增加缓冲功能，再 DataInputStream 进一步包装方便数据处理。")]),t._v(" "),e("p",[t._v("如果要"),e("strong",[t._v("实现一个自己的包装流")]),t._v("，根据上面的类图，需要继承抽象装饰类 FilterInputStream")]),t._v(" "),e("p",[t._v("譬如来实现这样一个操作的装饰者类：将输入流中的所有小写字母变成大写字母")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import java.io.FileInputStream;\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\npublic class UpperCaseInputStream extends FilterInputStream {    \n\n    protected UpperCaseInputStream(InputStream in) {        \n    \tsuper(in);   \n    }    \n\n    @Override    \n    public int read() throws IOException {        \n        int c = super.read();       \n        return (c == -1 ? c : Character.toUpperCase(c));    \n    }    \n    @Override    \n    public int read(byte[] b, int off, int len) throws IOException {        \n        int result = super.read(b, off, len);        \n        for (int i = off; i < off + result; i++) {           \n        b[i] = (byte) Character.toUpperCase((char) b[i]);        \n    }       \n    \treturn result;    \n    }    \n    public static void main(String[] args) throws IOException {        \n        int c;        \n        InputStream in = new UpperCaseInputStream(new FileInputStream("D:\\\\hello.txt"));        \n        try {            \n        while ((c = in.read()) >= 0) {                \n        System.out.print((char) c);           \n        }        } \n        finally {            \n        in.close();        \n    \t}    \n    }\n}\n')])])]),e("p",[t._v("输出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("HELLO WORLD!HELLO JAVA I/O!\n")])])]),e("p",[t._v("整个 Java IO 体系都是基于字符流 (InputStream/OutputStream) 和 字节流(Reader/Writer) 作为基类，下面画出 OutputStream、Reader、Writer 的部分类图，更多细节请查看其它资料")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.jssjqd.cn/20200708180210.png",alt:""}}),t._v("OutputStream 类图"),e("img",{attrs:{src:"http://img.jssjqd.cn/20200708180309.png",alt:""}})]),t._v(" "),e("p",[t._v("Reader 类图"),e("img",{attrs:{src:"http://img.jssjqd.cn/20200708180336.png",alt:""}}),t._v(" Writer 类图")]),t._v(" "),e("h4",{attrs:{id:"spring-cache-中的装饰者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-cache-中的装饰者模式"}},[t._v("#")]),t._v(" spring cache 中的装饰者模式")]),t._v(" "),e("p",[t._v("看 "),e("code",[t._v("org.springframework.cache.transaction")]),t._v(" 包下的 "),e("code",[t._v("TransactionAwareCacheDecorator")]),t._v(" 这个类")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class TransactionAwareCacheDecorator implements Cache {    \n\n    private final Cache targetCache;  \n    \n    public TransactionAwareCacheDecorator(Cache targetCache) { \n    \n        Assert.notNull(targetCache, "Target Cache must not be null");        \n        this.targetCache = targetCache;  \n        \n    }    \n    public <T> T get(Object key, Class<T> type) {        \n    \t\n    \treturn this.targetCache.get(key, type);  \n        \n    }    \n    \n    public void put(final Object key, final Object value) { \n    \n    // 判断是否开启了事务        \n    if (TransactionSynchronizationManager.isSynchronizationActive()) {           \n    // 将操作注册到 afterCommit 阶段            \n    TransactionSynchronizationManager.registerSynchronization(\n        new TransactionSynchronizationAdapter() {                \n        public void afterCommit() {                    \n        TransactionAwareCacheDecorator.this.targetCache.put(key, value);               \n        }            \n    });\n    } else {            \n        this.targetCache.put(key, value);        \n    }    \n    }    \n    // ...省略...\n}\n')])])]),e("p",[t._v("该类实现了 "),e("code",[t._v("Cache")]),t._v(" 接口，同时将 "),e("code",[t._v("Cache")]),t._v(" 组合到类中成为了成员属性 "),e("code",[t._v("targetCache")]),t._v("，所以可以大胆猜测 "),e("code",[t._v("TransactionAwareCacheDecorator")]),t._v(" 是一个装饰类，不过这里并没有抽象装饰类，且 "),e("code",[t._v("TransactionAwareCacheDecorator")]),t._v(" 没有子类，这里的装饰类关系并没有 Java I/O 中的装饰关系那么复杂")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.jssjqd.cn/20200708180408.png",alt:""}})]),t._v(" "),e("p",[t._v("spring cache 中类图关系")]),t._v(" "),e("p",[t._v("该类的主要功能：通过 Spring 的 "),e("code",[t._v("TransactionSynchronizationManager")]),t._v(" 将其 "),e("code",[t._v("put/evict/clear")]),t._v(" 操作与 Spring 管理的事务同步，仅在成功的事务的 "),e("code",[t._v("after-commit")]),t._v(" 阶段执行实际的缓存 "),e("code",[t._v("put/evict/clear")]),t._v(" 操作。如果没有事务是 "),e("code",[t._v("active")]),t._v(" 的，将立即执行 "),e("code",[t._v("put/evict/clear")]),t._v(" 操作")]),t._v(" "),e("h4",{attrs:{id:"spring-session-中的装饰者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-session-中的装饰者模式"}},[t._v("#")]),t._v(" spring session 中的装饰者模式")]),t._v(" "),e("blockquote",[e("p",[t._v("注意：适配器模式的结尾也可能是 Wrapper")])]),t._v(" "),e("p",[t._v("类 "),e("code",[t._v("ServletRequestWrapper")]),t._v(" 的代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('public class ServletRequestWrapper implements ServletRequest {   \n\n    private ServletRequest request;    \n    \n    public ServletRequestWrapper(ServletRequest request) {        \n        if (request == null) {            \n        throw new IllegalArgumentException("Request cannot be null");        \n        }        \n    \tthis.request = request;    \n    }    \n    \n    @Override    \n    public Object getAttribute(String name) {        \n    \treturn this.request.getAttribute(name);    \n    }    \n    //...省略...\n}\n')])])]),e("p",[t._v("可以看到该类对 "),e("code",[t._v("ServletRequest")]),t._v(" 进行了包装，这里是一个装饰者模式，再看下图，spring session 中 "),e("code",[t._v("SessionRepositoryFilter")]),t._v(" 的一个内部类 "),e("code",[t._v("SessionRepositoryRequestWrapper")]),t._v(" 与 "),e("code",[t._v("ServletRequestWrapper")]),t._v(" 的关系")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.jssjqd.cn/20200708180436.png",alt:""}})]),t._v(" "),e("p",[t._v("ServletRequest 类图")]),t._v(" "),e("p",[t._v("可见 "),e("code",[t._v("ServletRequestWrapper")]),t._v(" 是第一层包装，"),e("code",[t._v("HttpServletRequestWrapper")]),t._v(" 通过继承进行包装，增加了 HTTP 相关的功能，"),e("code",[t._v("SessionRepositoryRequestWrapper")]),t._v(" 又通过继承进行包装，增加了 Session 相关的功能")]),t._v(" "),e("h4",{attrs:{id:"mybatis-缓存中的装饰者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-缓存中的装饰者模式"}},[t._v("#")]),t._v(" Mybatis 缓存中的装饰者模式")]),t._v(" "),e("p",[e("code",[t._v("org.apache.ibatis.cache")]),t._v(" 包的文件结构如下所示")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.jssjqd.cn/20200708180505.png",alt:""}})]),t._v(" "),e("p",[t._v("Mybatis cache 中的装饰者模式")]),t._v(" "),e("p",[t._v("我们通过类所在的包名即可判断出该类的角色，"),e("code",[t._v("Cache")]),t._v(" 为抽象构件类，"),e("code",[t._v("PerpetualCache")]),t._v(" 为具体构件类，"),e("code",[t._v("decorators")]),t._v(" 包下的类为装饰类，没有抽象装饰类")]),t._v(" "),e("p",[t._v("通过名称也可以判断出装饰类所要装饰的功能")]),t._v(" "),e("h3",{attrs:{id:"装饰者模式总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式总结"}},[t._v("#")]),t._v(" 装饰者模式总结")]),t._v(" "),e("p",[t._v("装饰模式的"),e("strong",[t._v("主要优点")]),t._v("如下：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("对于扩展一个对象的功能，装饰模式比继承更加灵活性，不会导致类的个数急剧增加。")])]),t._v(" "),e("li",[e("p",[t._v("可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的具体装饰类，从而实现不同的行为。")])]),t._v(" "),e("li",[e("p",[t._v("可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能更为强大的对象。")])]),t._v(" "),e("li",[e("p",[t._v("具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合 “开闭原则”。")])])]),t._v(" "),e("p",[t._v("装饰模式的"),e("strong",[t._v("主要缺点")]),t._v("如下：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，大量小对象的产生势必会占用更多的系统资源，在一定程序上影响程序的性能。")])]),t._v(" "),e("li",[e("p",[t._v("装饰模式提供了一种比继承更加灵活机动的解决方案，但同时也意味着比继承更加易于出错，排错也很困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐。")])])]),t._v(" "),e("p",[e("strong",[t._v("适用场景")]),t._v("：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。")])]),t._v(" "),e("li",[e("p",[t._v("当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。不能采用继承的情况主要有两类：第一类是系统中存在大量独立的扩展，为支持每一种扩展或者扩展之间的组合将产生大量的子类，使得子类数目呈爆炸性增长；第二类是因为类已定义为不能被继承（如 Java 语言中的 final 类）。")])])]),t._v(" "),e("blockquote",[e("p",[t._v("参考：  "),e("br"),t._v("\n刘伟：设计模式 Java 版  "),e("br"),t._v("\n慕课网 java 设计模式精讲 Debug 方式 + 内存分析    "),e("br"),t._v("\nJava 日志框架：slf4j 作用及其实现原理  "),e("br"),t._v("\nHankingHu：由装饰者模式来深入理解 Java I/O 整体框架  "),e("br"),t._v("\nHryReal：Java 的 io 类的使用场景")])])])}),[],!1,null,null,null);e.default=n.exports}}]);