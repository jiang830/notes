(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{367:function(s,t,v){"use strict";v.r(t);var a=v(7),_=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"redis持久化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis持久化"}},[s._v("#")]),s._v(" Redis持久化")]),s._v(" "),t("h3",{attrs:{id:"rdb快照-snapshot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rdb快照-snapshot"}},[s._v("#")]),s._v(" RDB快照（snapshot）")]),s._v(" "),t("p",[s._v("在默认情况下， Redis 将内存数据库快照保存在名字为 dump.rdb 的二进制文件中。")]),s._v(" "),t("p",[s._v("你可以对 Redis 进行设置，让它在"),t("strong",[s._v("N秒内数据集至少有M个改动")]),s._v("这一条件被满足时， 自动保存一次数据集。")]),s._v(" "),t("p",[s._v("比如说， 以下设置会让 Redis 在满足"),t("strong",[s._v("60秒内有至少有1000个键被改动")]),s._v("这一条件时， 自动保存一次数据集：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("save 60 1000    //关闭RDB只需要将所有的save保存策略注释掉即可\n")])])]),t("p",[s._v("还可以手动执行命令生成RDB快照，进入redis客户端执行命令"),t("strong",[s._v("save")]),s._v("或"),t("strong",[s._v("bgsave")]),s._v("可以生成dump.rdb文件，每次命令执行都会将所有redis内存快照到一个新的rdb文件里，并覆盖原有rdb快照文件。")]),s._v(" "),t("p",[t("strong",[s._v("bgsave的写时复制(COW)机制")])]),s._v(" "),t("p",[s._v("Redis 借助操作系统提供的写时复制技术（Copy-On-Write, COW），在生成快照的同时，依然可以正常处理写命令。简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。此时，如果主线程对这些数据也都是读操作，那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据，那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。")]),s._v(" "),t("p",[t("strong",[s._v("save与bgsave对比：")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("save命令")]),s._v("：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存 比较大的实例会造成长时间"),t("strong",[s._v("阻塞")]),s._v("，线上环境不建议使用")]),s._v(" "),t("li",[t("strong",[s._v("bgsave命令")]),s._v("：Redis进程执行fork操作创建子进程，RDB持久化过程由子 进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("命令")])]),s._v(" "),t("th",[t("strong",[s._v("save")])]),s._v(" "),t("th",[t("strong",[s._v("bgsave")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("IO类型")]),s._v(" "),t("td",[s._v("同步")]),s._v(" "),t("td",[s._v("异步")])]),s._v(" "),t("tr",[t("td",[s._v("是否阻塞redis其它命令")]),s._v(" "),t("td",[s._v("是")]),s._v(" "),t("td",[s._v("否(在生成子进程执行调用fork函数时会有短暂阻塞)")])]),s._v(" "),t("tr",[t("td",[s._v("复杂度")]),s._v(" "),t("td",[s._v("O(n)")]),s._v(" "),t("td",[s._v("O(n)")])]),s._v(" "),t("tr",[t("td",[s._v("优点")]),s._v(" "),t("td",[s._v("不会消耗额外内存")]),s._v(" "),t("td",[s._v("不阻塞客户端命令")])]),s._v(" "),t("tr",[t("td",[s._v("缺点")]),s._v(" "),t("td",[s._v("阻塞客户端命令")]),s._v(" "),t("td",[s._v("需要fork子进程，消耗内存")])])])]),s._v(" "),t("p",[t("strong",[s._v("配置自动生成rdb文件后台使用的是bgsave方式。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img.jssjqd.cn/202212031856658.png",alt:"img"}})]),s._v(" "),t("p",[s._v("具体流程如下：")]),s._v(" "),t("ul",[t("li",[s._v("redis客户端执行bgsave命令或者自动触发bgsave命令；")]),s._v(" "),t("li",[s._v("主进程判断当前是否已经存在正在执行的子进程，如果存在，那么主进程直接返回；")]),s._v(" "),t("li",[s._v("如果不存在正在执行的子进程，那么就fork一个新的子进程进行持久化数据，fork过程是阻塞的，fork操作完成后主进程即可执行其他操作；")]),s._v(" "),t("li",[s._v("子进程先将数据写入到临时的rdb文件中，待快照数据写入完成后再原子替换旧的rdb文件；")]),s._v(" "),t("li",[s._v("同时发送信号给主进程，通知主进程rdb持久化完成，主进程更新相关的统计信息（info Persitence下的rdb_*相关选项）。")])]),s._v(" "),t("p",[t("strong",[s._v("在进行快照操作的这段时间，如果发生服务崩溃怎么办")]),s._v("？")]),s._v(" "),t("p",[s._v("很简单，在没有将数据全部写入到磁盘前，这次快照操作都不算成功。如果出现了服务崩溃的情况，将以上一次完整的RDB快照文件作为恢复内存数据的参考。也就是说，在快照操作过程中不能影响上一次的备份数据。Redis服务会在磁盘上创建一个临时文件进行数据操作，待操作成功后才会用这个临时文件替换掉上一次的备份。")]),s._v(" "),t("h3",{attrs:{id:"rdb优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rdb优缺点"}},[s._v("#")]),s._v(" RDB优缺点")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("优点")]),s._v(" "),t("ul",[t("li",[s._v("RDB文件是某个时间节点的快照，默认使用LZF算法进行压缩，压缩后的文件体积远远小于内存大小，适用于备份、全量复制等场景；")]),s._v(" "),t("li",[s._v("Redis加载RDB文件恢复数据要远远快于AOF方式；")])])]),s._v(" "),t("li",[t("strong",[s._v("缺点")]),s._v(" "),t("ul",[t("li",[s._v("RDB方式实时性不够，无法做到秒级的持久化；")]),s._v(" "),t("li",[s._v("每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；")]),s._v(" "),t("li",[s._v("RDB文件是二进制的，没有可读性，AOF文件在了解其结构的情况下可以手动修改或者补全；")]),s._v(" "),t("li",[s._v("版本兼容RDB文件问题；")])])])]),s._v(" "),t("p",[s._v("针对RDB不适合实时持久化的问题，Redis提供了AOF持久化方式来解决")]),s._v(" "),t("h3",{attrs:{id:"aof-append-only-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aof-append-only-file"}},[s._v("#")]),s._v(" AOF（append-only file）")]),s._v(" "),t("p",[s._v("快照功能并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化，将"),t("strong",[s._v("修改的")]),s._v("每一条指令记录进文件appendonly.aof中(先写入os cache，每隔一段时间fsync到磁盘)")]),s._v(" "),t("p",[s._v("比如执行命令"),t("strong",[s._v("set zhuge 666")]),s._v("，aof文件里会记录如下数据")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("*3\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$5")]),s._v("\nzhuge\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("666")]),s._v("       \n")])])]),t("p",[s._v("这是一种resp协议格式数据，星号后面的数字代表命令有多少个参数，$号后面的数字代表这个参数有几个字符")]),s._v(" "),t("p",[s._v("注意，如果执行带过期时间的set命令，aof文件里记录的是并不是执行的原始命令，而是记录key过期的"),t("strong",[s._v("时间戳")])]),s._v(" "),t("p",[s._v("比如执行"),t("strong",[s._v("set tuling 888 ex 1000")]),s._v("，对应aof文件里记录如下")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("*3\n$3\nset\n$6\ntuling\n$3\n888\n*3\n$9\nPEXPIREAT\n$6\ntuling\n$13\n1604249786301       \n")])])]),t("p",[s._v("你可以通过修改配置文件来打开 AOF 功能：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# appendonly yes              \n")])])]),t("p",[s._v("从现在开始， 每当 Redis 执行一个改变数据集的命令时（比如 "),t("a",{attrs:{href:"http://redisdoc.com/string/set.html#set",target:"_blank",rel:"noopener noreferrer"}},[s._v("SET"),t("OutboundLink")],1),s._v("）， 这个命令就会被追加到 AOF 文件的末尾。")]),s._v(" "),t("p",[s._v("这样的话， 当 Redis 重新启动时， 程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。")]),s._v(" "),t("p",[s._v("你可以配置 Redis 多久才将数据 fsync 到磁盘一次。")]),s._v(" "),t("p",[s._v("有三种策略：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("appendfsync always：每次有新命令追加到 AOF 文件时就执行一次 fsync ，非常慢，也非常安全。\nappendfsync everysec：每秒 fsync 一次，足够快，并且在故障时只会丢失 1 秒钟的数据。\nappendfsync no：从不 fsync ，将数据交给操作系统来处理。更快，也更不安全的选择。           \n")])])]),t("p",[s._v("推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。")]),s._v(" "),t("p",[t("strong",[s._v("AOF重写")])]),s._v(" "),t("p",[s._v("AOF文件里可能有太多没用指令，所以AOF会定期根据"),t("strong",[s._v("内存的最新数据")]),s._v("生成aof文件")]),s._v(" "),t("p",[s._v("例如，执行了如下几条命令：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" incr readcount\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" incr readcount\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" incr readcount\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" incr readcount\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" incr readcount\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("     \n")])])]),t("p",[s._v("重写后AOF文件里变成")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("*3 \n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v(" \nSET\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(" \nreadcount\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("  \n")])])]),t("p",[s._v("如下两个配置可以控制AOF自动重写频率")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# auto-aof-rewrite-min-size 64mb   //aof文件至少要达到64M才会自动重写，文件太小恢复速度本来就很快，重写的意义不大")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# auto-aof-rewrite-percentage 100  //aof文件自上一次重写后文件大小增长了100%则再次触发重写")]),s._v("\n")])])]),t("p",[s._v("当然AOF还可以手动重写，进入redis客户端执行命令"),t("strong",[s._v("bgrewriteaof")]),s._v("重写AOF")]),s._v(" "),t("p",[s._v("注意，"),t("strong",[s._v("AOF重写redis会fork出一个子进程去做(与bgsave命令类似)，不会对redis正常命令处理有太多影响")])]),s._v(" "),t("p",[t("strong",[s._v("重写日志时，有新数据写入怎么处理")]),s._v("？")]),s._v(" "),t("p",[s._v("重写过程总结为：“一个拷贝，两处日志”。在fork出子进程时的拷贝，以及在重写时，如果有新数据写入，主线程就会将命令记录到两个aof日志内存缓冲区中。如果AOF写回策略配置的是always，则直接将命令写回旧的日志文件，并且保存一份命令至AOF重写缓冲区，这些操作对新的日志文件是不存在影响的。（旧的日志文件：主线程使用的日志文件，新的日志文件：bgrewriteaof进程使用的日志文件）")]),s._v(" "),t("p",[s._v("而在bgrewriteaof子进程完成会日志文件的重写操作后，会提示主线程已经完成重写操作，主线程会将AOF重写缓冲中的命令追加到新的日志文件后面。这时候在高并发的情况下，AOF重写缓冲区积累可能会很大，这样就会造成阻塞，Redis后来通过Linux管道技术让aof重写期间就能同时进行回放，这样aof重写结束后只需回放少量剩余的数据即可。")]),s._v(" "),t("p",[s._v("最后通过修改文件名的方式，保证文件切换的原子性。")]),s._v(" "),t("p",[s._v("在AOF重写日志期间发生宕机的话，因为日志文件还没切换，所以恢复数据时，用的还是旧的日志文件。")]),s._v(" "),t("p",[t("strong",[s._v("主线程fork出子进程的是如何复制内存数据的")]),s._v("？")]),s._v(" "),t("p",[s._v("fork采用操作系统提供的写时复制（copy on write）机制，就是为了避免一次性拷贝大量内存数据给子进程造成阻塞。fork子进程时，子进程时会拷贝父进程的页表，即虚实映射关系（虚拟内存和物理内存的映射索引表），而不会拷贝物理内存。这个拷贝会消耗大量cpu资源，并且拷贝完成前会阻塞主线程，阻塞时间取决于内存中的数据量，数据量越大，则内存页表越大。拷贝完成后，父子进程使用相同的内存地址空间。")]),s._v(" "),t("p",[s._v("但主进程是可以有数据写入的，这时候就会拷贝物理内存中的数据。如下图（进程1看做是主进程，进程2看做是子进程）：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img.jssjqd.cn/202212032158096.png",alt:"img"}})]),s._v(" "),t("p",[s._v("在主进程有数据写入时，而这个数据刚好在页c中，操作系统会创建这个页面的副本（页c的副本），即拷贝当前页的物理数据，将其映射到主进程中，而子进程还是使用原来的的页c。")]),s._v(" "),t("p",[t("strong",[s._v("在重写日志整个过程时，主线程有哪些地方会被阻塞")]),s._v("？")]),s._v(" "),t("ol",[t("li",[s._v("fork子进程时，需要拷贝虚拟页表，会对主线程阻塞。")]),s._v(" "),t("li",[s._v("主进程有bigkey写入时，操作系统会创建页面的副本，并拷贝原有的数据，会对主线程阻塞。")]),s._v(" "),t("li",[s._v("子进程重写日志完成后，主进程追加aof重写缓冲区时可能会对主线程阻塞。")])]),s._v(" "),t("p",[t("strong",[s._v("为什么AOF重写不复用原AOF日志")]),s._v("？")]),s._v(" "),t("p",[s._v("两方面原因：")]),s._v(" "),t("ol",[t("li",[s._v("父子进程写同一个文件会产生竞争问题，影响父进程的性能。")]),s._v(" "),t("li",[s._v("如果AOF重写过程中失败了，相当于污染了原本的AOF文件，无法做恢复数据使用。")])]),s._v(" "),t("p",[t("strong",[s._v("RDB 和 AOF ，我应该用哪一个？")])]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[s._v("命令")])]),s._v(" "),t("th",[t("strong",[s._v("RDB")])]),s._v(" "),t("th",[t("strong",[s._v("AOF")])])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("启动优先级")]),s._v(" "),t("td",[s._v("低")]),s._v(" "),t("td",[s._v("高")])]),s._v(" "),t("tr",[t("td",[s._v("体积")]),s._v(" "),t("td",[s._v("小")]),s._v(" "),t("td",[s._v("大")])]),s._v(" "),t("tr",[t("td",[s._v("恢复速度")]),s._v(" "),t("td",[s._v("快")]),s._v(" "),t("td",[s._v("慢")])]),s._v(" "),t("tr",[t("td",[s._v("数据安全性")]),s._v(" "),t("td",[s._v("容易丢数据")]),s._v(" "),t("td",[s._v("根据策略决定")])])])]),s._v(" "),t("p",[s._v("生产环境可以都启用，redis启动时如果既有rdb文件又有aof文件则优先选择aof文件恢复数据，因为aof一般来说数据更全一点。")]),s._v(" "),t("p",[t("strong",[s._v("Redis 4.0 混合持久化")])]),s._v(" "),t("p",[s._v("重启 Redis 时，我们很少使用 RDB来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。 Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。")]),s._v(" "),t("p",[s._v("通过如下配置可以开启混合持久化("),t("strong",[s._v("必须先开启aof")]),s._v(")：")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# aof-use-rdb-preamble yes            ")]),s._v("\n")])])]),t("p",[s._v("启了混合持久化，"),t("strong",[s._v("AOF在重写时")]),s._v("，不再是单纯将内存数据转换为RESP命令写入AOF文件，而是将重写"),t("strong",[s._v("这一刻之前")]),s._v("的内存做RDB快照处理，并且将RDB快照内容和"),t("strong",[s._v("增量的")]),s._v("AOF修改内存数据的命令存在一起，都写入新的AOF文件，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改名，覆盖原有的AOF文件，完成新旧两个AOF文件的替换。")]),s._v(" "),t("p",[s._v("于是在 Redis 重启的时候，可以先加载 RDB 的内容，然后再重放增量 AOF 日志就可以完全替代之前的 AOF 全量文件重放，因此重启效率大幅得到提升。")]),s._v(" "),t("p",[s._v("混合持久化AOF文件结构如下")]),s._v(" "),t("p",[s._v("​    "),t("img",{attrs:{src:"https://img.jssjqd.cn/20221014052822.png",alt:""}})]),s._v(" "),t("p",[t("strong",[s._v("Redis数据备份策略：")])]),s._v(" "),t("ol",[t("li",[s._v("写crontab定时调度脚本，每小时都copy一份rdb或aof的备份到一个目录中去，仅仅保留最近48小时的备份")]),s._v(" "),t("li",[s._v("每天都保留一份当日的数据备份到一个目录中去，可以保留最近1个月的备份")]),s._v(" "),t("li",[s._v("每次copy备份的时候，都把太旧的备份给删了")]),s._v(" "),t("li",[s._v("每天晚上将当前机器上的备份复制一份到其他机器上，以防机器损坏")])])])}),[],!1,null,null,null);t.default=_.exports}}]);