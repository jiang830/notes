(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{365:function(n,s,t){"use strict";t.r(s);var i=t(4),e=Object(i.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("blockquote",[s("blockquote",[s("p",[n._v("原文地址 "),s("a",{attrs:{href:"https://blog.csdn.net/qq_46323094/article/details/117441666",target:"_blank",rel:"noopener noreferrer"}},[n._v("blog.csdn.net"),s("OutboundLink")],1)])]),n._v(" "),s("h2",{attrs:{id:"进程间通信-ipc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信-ipc"}},[n._v("#")]),n._v(" 进程间通信（IPC）")]),n._v(" "),s("p",[n._v("进程间通信的方式有很多，这里主要讲到进程间通信的七种方式，分别为：管道、"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=FIFO&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[n._v("FIFO"),s("OutboundLink")],1),n._v("、消息队列、共享内存、信号、信号量、SOCKET")]),n._v(" "),s("h3",{attrs:{id:"一、管道"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、管道"}},[n._v("#")]),n._v(" 一、管道")]),n._v(" "),s("p",[n._v("管道的特点：")]),n._v(" "),s("blockquote",[s("ol",[s("li",[n._v("是一种半双工的通信方式；")]),n._v(" "),s("li",[n._v("只能在具有亲缘关系的进程间使用. 进程的亲缘关系一般指的是父子关系；")]),n._v(" "),s("li",[n._v("它可以看成是一种特殊的文件，对于它的读写也可以使用普通的 read、write 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中。")])])]),n._v(" "),s("p",[n._v("管道的原型：")]),n._v(" "),s("blockquote",[s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("#include <unistd.h>\n\nint pipe(int pipefd[2]); \n")])])])]),n._v(" "),s("p",[n._v("代码实现：")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n \n/*使用匿名管道实现进程间通信*/\nint main()\n{\n        int fd[2];//fd[0]为读端 fd[1]为写端\n        pid_t pid;\n        char buf[128];\n        //int pipe(int pipefd[2]);\n        if(pipe(fd) == -1)//创建管道\n        {\n                printf("管道创建失败\\n");\n                perror("why");\n        }\n \n        pid = fork();\n \n        if(pid < 0 )\n        {\n                printf("子进程开辟失败\\n");\n                perror("why");\n        }else if(pid > 0){\n \n                sleep(3);//让子进程先执行\n                printf("这是一个父进程\\n");//父进程完成写操作\n                close(fd[0]);\n                write(fd[1],"hello from father",strlen("hello from father"));\n        }else{\n \n                printf("这是一个子进程\\n");//子进程完成读操作\n                close(fd[1]);\n                read(fd[0],buf,sizeof(buf));//没有数据来时，阻塞在这\n                printf("buf = %s\\n",buf);\n        }\n \n        return 0;\n}\n')])])]),s("h3",{attrs:{id:"二、fifo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、fifo"}},[n._v("#")]),n._v(" 二、FIFO")]),n._v(" "),s("p",[n._v("FIFO，也叫做命名管道，它是一种文件类型。")]),n._v(" "),s("p",[n._v("FIFO 的特点：")]),n._v(" "),s("blockquote",[s("ol",[s("li",[n._v("FIFO 可以在无关的进程之间交换数据，与无名管道不同；")]),n._v(" "),s("li",[n._v("FIFO 有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中。")])])]),n._v(" "),s("p",[n._v("FIFO 的原型：")]),n._v(" "),s("blockquote",[s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("#include <sys/types.h>\n\n#include <sys/stat.h>\n\nint mkfifo(const char *pathname, mode_t mode);\n")])])])]),n._v(" "),s("p",[n._v("其中的 mode 参数与 open 函数中的 mode 相同。一旦创建了一个 FIFO，就可以用一般的文件 I/O 函数操作它。")]),n._v(" "),s("p",[n._v("当 open 一个 FIFO 时，是否设置非阻塞标志（O_NONBLOCK）的区别：")]),n._v(" "),s("ul",[s("li",[n._v("若没有指定 O_NONBLOCK（默认），只读 open 要阻塞到某个其他进程为写而打开此 FIFO。类似的，只写 open 要阻塞到某个其他进程为读而打开它。")]),n._v(" "),s("li",[n._v("若指定了 O_NONBLOCK，则只读 open 立即返回。而只写 open 将出错返回 -1 如果没有进程已经为读而打开该 FIFO，其 errno 置 ENXIO。")])]),n._v(" "),s("p",[n._v("代码实现：")]),n._v(" "),s("p",[n._v("下列代码有效解决了，当管道存在时，程序报错的问题，减少了无关错误信息的打印。")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n//       int mkfifo(const char *pathname, mode_t mode);\n \nint main()\n{\n        if(mkfifo("myfifo",0600) == -1 && errno != EEXIST)\n        {\n                printf("mkfifo failed\\n");\n                perror("why");\n        }\n \n        return 0;\n}\n')])])]),s("p",[n._v("read.c")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <unistd.h>\n \n//       int mkfifo(const char *pathname, mode_t mode);\n \nint main()\n{\n        int nread;\n        char buf[30] = {\'\\0\'};\n \n        if(mkfifo("myfifo",0600) == -1 && errno != EEXIST)//创建命名管道\n        {\n                printf("mkfifo failed\\n");\n                perror("why");\n        }\n \n        int fd = open("./myfifo",O_RDONLY);//以只读的形式打开管道,程序阻塞在这，直到有另一个进程对其执行写操作\n        if(fd < 0)\n        {\n                printf("read open failed\\n");\n        }else\n        {\n                printf("read open successn\\n");\n        }\n \n        while(1)\n        {\n                nread = read(fd,buf,sizeof(buf));\n                printf("read %d byte,context is:%s\\n",nread,buf);\n        }\n \n        close(fd);\n \n        return 0;\n}\n')])])]),s("p",[n._v("write.c")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <string.h>\n//       int mkfifo(const char *pathname, mode_t mode);\n \nint main()\n{\n        int nread;\n        char buf[30] = "message from myfifo";\n \n        if(mkfifo("myfifo",0600) == -1 && errno != EEXIST)//创建命名管道\n        {\n                printf("mkfifo failed\\n");\n                perror("why");\n        }\n \n        int fd = open("./myfifo",O_WRONLY);//打开管道，程序阻塞在这，直到其他进程为读而打开它\n        if(fd < 0)\n        {\n                printf("write open failed\\n");\n        }\n        else\n        {\n                printf("write open success\\n");\n        }\n \n        while(1)\n        {\n                sleep(1);\n                write(fd,buf,strlen(buf));\n        }\n        close(fd);\n \n        return 0;\n}\n')])])]),s("h3",{attrs:{id:"三、消息队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、消息队列"}},[n._v("#")]),n._v(" 三、消息队列")]),n._v(" "),s("p",[n._v("消息队列，是消息的链接表，存放在内核之中。一个消息队列由一个标识符（即队列 ID）来标识。")]),n._v(" "),s("p",[n._v("用户进程可以向消息队列添加消息，也可以向消息队列读取消息。")]),n._v(" "),s("p",[n._v("消息队列的特点：")]),n._v(" "),s("blockquote",[s("ol",[s("li",[n._v("消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级；")]),n._v(" "),s("li",[n._v("消息队列是独立于发送和接收进程的，进程终止时，消息队列及其内容并不会被删除；")]),n._v(" "),s("li",[n._v("消息队列可以实现消息的随机查询，消息不一定要以先进先出的次序读取，也可以按消息的类型读取。")])])]),n._v(" "),s("p",[n._v("消息队列函数的原型：")]),n._v(" "),s("blockquote",[s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 创建或打开消息队列：成功返回队列 ID，失败返回 - 1  \nint msgget(key_t key, int flag);  \n// 添加消息：成功返回 0，失败返回 - 1  \nint msgsnd(int msqid, const void *ptr, size_t size, int flag);  \n// 读取消息：成功返回消息数据的长度，失败返回 - 1  \nint msgrcv(int msqid, void *ptr, size_t size, long type,int flag);  \n// 控制消息队列：成功返回 0，失败返回 - 1  \nint msgctl(int msqid, int cmd, struct msqid_ds *buf);\n")])])])]),n._v(" "),s("p",[n._v("代码演示：")]),n._v(" "),s("p",[n._v("msgSend.c")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/msg.h>\n#include <string.h>\n//       int msgget(key_t key, int msgflg);\n// int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);\n \n//       ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,int msgflg);\nstruct msgbuf{\n        long mtype;       /* message type, must be > 0 */\n        char mtext[128];    /* message data */\n};\n \n \nint main()\n{\n        struct msgbuf sendbuf={888,"message from send"};\n        struct msgbuf readbuf;\n \n        key_t key;\n \n        if((key = ftok(".",\'z\')) < 0){\n                printf("ftok error\\n");\n        }\n        int msgId = msgget(key,IPC_CREAT|0777);\n \n        if(msgId == -1){\n                printf("get quen failed\\n");\n        }\n \n        msgsnd(msgId,&sendbuf,strlen(sendbuf.mtext),0);\n        printf("send over\\n");\n \n        msgrcv(msgId,&readbuf,sizeof(readbuf.mtext),999,0);\n        printf("read from get is:%s\\n",readbuf.mtext);\n \n        msgctl(msgId,IPC_RMID,NULL);\n \n        return 0;\n}\n')])])]),s("p",[n._v("msgGet.c")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/msg.h>\n#include <string.h>\n//       int msgget(key_t key, int msgflg);\n// int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);\n \n//       ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,int msgflg);\nstruct msgbuf{\n        long mtype;       /* message type, must be > 0 */\n        char mtext[128];    /* message data */\n};\n \nint main()\n{\n        struct msgbuf readbuf;\n        memset(readbuf.mtext, \'\\0\', sizeof(readbuf.mtext));\n        struct msgbuf sendbuf={999,"thank for your reach"};\n \n        key_t key;\n \n        //获取key值\n        if((key = ftok(".",\'z\')) < 0){\n                printf("ftok error\\n");\n        }\n \n        int msgId = msgget(key,IPC_CREAT|0777);\n \n        if(msgId == -1){\n                printf("get quen failed\\n");\n                perror("why");\n        }\n \n        msgrcv(msgId,&readbuf,sizeof(readbuf.mtext),888,0);\n        printf("read from send is:%s\\n",readbuf.mtext);\n \n        msgsnd(msgId,&sendbuf,strlen(sendbuf.mtext),0);\n \n        msgctl(msgId,IPC_RMID,NULL);\n \n        return 0;\n}\n')])])]),s("h3",{attrs:{id:"四、共享内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、共享内存"}},[n._v("#")]),n._v(" 四、共享内存")]),n._v(" "),s("p",[n._v("共享内存，指两个或多个进程共享一个给定的存储区。")]),n._v(" "),s("p",[n._v("ipcs -m 查看系统下已有的共享内存；ipcrm -m shmid 可以用来删除共享内存。")]),n._v(" "),s("p",[n._v("共享内存的特点：")]),n._v(" "),s("blockquote",[s("ol",[s("li",[n._v("共享内存是最快的一种 IPC，因为进程是直接对内存进行存取。")]),n._v(" "),s("li",[n._v("因为多个进程可以同时操作，所以需要进行同步。")]),n._v(" "),s("li",[n._v("信号量 + 共享内存通常结合在一起使用，信号量用来同步对共享内存的访问。")])])]),n._v(" "),s("p",[n._v("共享内存函数的原型：")]),n._v(" "),s("blockquote",[s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 创建或获取一个共享内存：成功返回共享内存 ID，失败返回 - 1  \nint shmget(key_t key, size_t size, int flag);  \n// 连接共享内存到当前进程的地址空间：成功返回指向共享内存的指针，失败返回 - 1  \nvoid *shmat(int shm_id, const void *addr, int flag);  \n// 断开与共享内存的连接：成功返回 0，失败返回 - 1  \nint shmdt(void *addr);   \n// 控制共享内存的相关信息：成功返回 0，失败返回 - 1  \nint shmctl(int shm_id, int cmd, struct shmid_ds *buf);\n")])])])]),n._v(" "),s("p",[n._v("代码演示：")]),n._v(" "),s("p",[n._v("shmw.c")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>\n \n//       int shmget(key_t key, size_t size, int shmflg);\n// void *shmat(int shmid, const void *shmaddr, int shmflg);\n \n//       int shmdt(const void *shmaddr);\n \nint main()\n{\n        int shmId;\n        key_t key;\n        char *shmaddr;\n \n        if((key = ftok(".",1)) < 0){\n                printf("ftok error\\n");\n        }\n \n        shmId = shmget(key, 1024*4, IPC_CREAT|0666);//内存大小必须得是MB的整数倍\n \n        if(shmId == -1){\n                printf("shmget error\\n");\n                exit(-1);\n        }\n \n        /*第二个参数一般写0，让linux内核自动分配空间，第三个参数也一般写0，表示可读可写*/\n        shmaddr = shmat(shmId, 0, 0);\n        printf("shmat OK\\n");\n        strcpy(shmaddr,"I am so cool");\n \n        sleep(5);//等待5秒，让别的进程去读\n \n        shmdt(shmaddr);\n        shmctl(shmId, IPC_RMID, 0);//写0表示不关心\n        printf("quit\\n");\n \n        return 0;\n}\n')])])]),s("p",[n._v("shmr.c")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>\n \n//       int shmget(key_t key, size_t size, int shmflg);\n// void *shmat(int shmid, const void *shmaddr, int shmflg);\n \n//       int shmdt(const void *shmaddr);\n \nint main()\n{\n        int shmId;\n        key_t key;\n        char *shmaddr;\n \n        if((key = ftok(".",1)) < 0){\n                printf("ftok error\\n");\n        }\n \n        shmId = shmget(key, 1024*4, 0);//内存大小必须得是MB的整数倍\n \n        if(shmId == -1){\n                printf("shmget error\\n");\n                exit(-1);\n        }\n \n        /*第二个参数一般写0，让linux内核自动分配空间，第三个参数也一般写0，表示可读可写*/\n        shmaddr = shmat(shmId, 0, 0);\n        printf("shmat OK\\n");\n        printf("data : %s\\n",shmaddr);\n \n        shmdt(shmaddr);\n \n        return 0;\n}\n')])])]),s("h3",{attrs:{id:"五、信号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、信号"}},[n._v("#")]),n._v(" 五、信号")]),n._v(" "),s("p",[n._v("对于 Linux 来说，实际信号是软中断，许多重要的程序都需要处理信号。终端用户输入了 ctrl+c 来中断程序，会通过信号机制停止一个程序。")]),n._v(" "),s("p",[n._v("信号的相关概述：")]),n._v(" "),s("p",[n._v("1、信号的名字和编号：")]),n._v(" "),s("p",[n._v("每个信号都有一个名字和编号，这些名字都以 “SIG” 开头。我们可以通过 kill -l 来查看信号的名字以及序号。")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://img.jssjqd.cn/202211201510866.png",alt:""}})]),n._v(" "),s("p",[n._v("不存在 0 信号，kill 对于 0 信号有特殊的应用。")]),n._v(" "),s("p",[n._v("2、信号的处理：")]),n._v(" "),s("p",[n._v("信号的处理有三种方法，分别是：忽略、捕捉和默认动作。")]),n._v(" "),s("ul",[s("li",[n._v("忽略信号，大多数信号可以使用这个方式来处理，但是有两种信号不能被忽略（分别是 "),s("code",[n._v("SIGKILL")]),n._v("和"),s("code",[n._v("SIGSTOP")]),n._v("）；")]),n._v(" "),s("li",[n._v("捕捉信号，需要告诉内核，用户希望如何处理某一种信号，说白了就是写一个信号处理函数，然后将这个函数告诉内核。当该信号产生时，由内核来调用用户自定义的函数，以此来实现某种信号的处理。")]),n._v(" "),s("li",[n._v("系统默认动作，对于每个信号来说，系统都对应由默认的处理动作，当发生了该信号，系统会自动执行。具体的信号默认动作可以使用"),s("code",[n._v("man 7 signal")]),n._v("来查看系统的具体定义。")])]),n._v(" "),s("p",[n._v("信号处理函数的注册：")]),n._v(" "),s("ol",[s("li",[n._v("入门版：函数"),s("code",[n._v("signal")])]),n._v(" "),s("li",[n._v("高级版：函数"),s("code",[n._v("sigaction")])])]),n._v(" "),s("p",[n._v("信号处理发送函数：")]),n._v(" "),s("ol",[s("li",[n._v("入门版：kill")]),n._v(" "),s("li",[n._v("高级版：sigqueue")])]),n._v(" "),s("p",[n._v("入门版：")]),n._v(" "),s("p",[n._v("函数原型：")]),n._v(" "),s("blockquote",[s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 接收函数，第二个参数指向信号处理函数\n\nsighandler_t signal(int signum, sighandler_t handler);\n\n// 发送函数  \nint kill(pid_t pid, int sig);\n")])])])]),n._v(" "),s("p",[n._v("接收端：")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <signal.h>\n \n//       typedef void (*sighandler_t)(int);\n \n//       sighandler_t signal(int signum, sighandler_t handler);\n/*接受到信号后，让信号处理该函数*/\nvoid handler(int signum)\n{\n        printf("signum = %d\\n",signum);\n \n        switch(signum){\n                case 2:\n                        printf("SIGINT\\n");\n                        break;\n                case 9:\n                        printf("SIGKILL\\n");\n                        break;\n                case 10:\n                        printf("SIGUSR1\\n");\n                        break;\n        }\n}\n \nint main()\n{\n        signal(SIGINT,handler);\n        signal(SIGKILL,handler);\n        signal(SIGUSR1,handler);\n \n        while(1);\n \n        return 0;\n}\n')])])]),s("p",[n._v("发送端：")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <sys/types.h>\n#include <signal.h>\n#include <stdlib.h>\n \n//       int kill(pid_t pid, int sig);\n \nint main(int argc,char **argv)\n{\n        int signum;\n        int pid;\n \n        signum = atoi(argv[1]);//将字符型转为整型\n        pid = atoi(argv[2]);\n \n        kill(pid,signum);\n \n        printf("signum = %d,pid = %d\\n",signum,pid);\n \n        return 0;\n}\n')])])]),s("p",[n._v("高级版：")]),n._v(" "),s("p",[n._v("函数原型：")]),n._v(" "),s("blockquote",[s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("#include <signal.h>\nint sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);\n\nstruct sigaction {\nvoid       (*sa_handler)(int); //信号处理程序，不接受额外数据，SIG_IGN 为忽略，SIG_DFL 为默认动作\nvoid       (*sa_sigaction)(int, siginfo_t *, void *); //信号处理程序，能够接受额外数据和sigqueue配合使用\nsigset_t   sa_mask;//阻塞关键字的信号集，可以再调用捕捉函数之前，把信号添加到信号阻塞字，信号捕捉函数返回之前恢复为原先的值。\nint        sa_flags;//影响信号的行为SA_SIGINFO表示能够接受数据\n};\n//回调函数句柄sa_handler、sa_sigaction只能任选其一\n")])])]),s("p",[n._v("我们只需要配置 sa_sigaction 以及 sa_flags 即可。")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("siginfo_t {\n            int      si_signo;    /* Signal number */\n            int      si_errno;    /* An errno value */\n            int      si_code;     /* Signal code */\n            int      si_trapno;   /* Trap number that caused\n                                     hardware-generated signal\n                                     (unused on most architectures) */\n            pid_t    si_pid;      /* Sending process ID */\n            uid_t    si_uid;      /* Real user ID of sending process */\n            int      si_status;   /* Exit value or signal */\n            clock_t  si_utime;    /* User time consumed */\n            clock_t  si_stime;    /* System time consumed */\n            sigval_t si_value;    /* Signal value */\n            int      si_int;      /* POSIX.1b signal */\n            void    *si_ptr;      /* POSIX.1b signal */\n            int      si_overrun;  /* Timer overrun count; POSIX.1b timers */\n            int      si_timerid;  /* Timer ID; POSIX.1b timers */\n            void    *si_addr;     /* Memory location which caused fault */\n            int      si_band;     /* Band event */\n            int      si_fd;       /* File descriptor */\n}\n")])])]),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("#include <signal.h>\nint sigqueue(pid_t pid, int sig, const union sigval value);\nunion sigval {\nint   sival_int;\nvoid *sival_ptr;\n};\n")])])])]),n._v(" "),s("p",[n._v("接收端：")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <unistd.h>\n \n//       int sigaction(int signum, const struct sigaction *act,struct sigaction *oldact);\n \n//(*sa_sigaction)(int, siginfo_t *, void *);\nvoid handler(int signum, siginfo_t *info, void *context)\n{\n        printf("get signum is:%d\\n",signum);\n \n        if(context != NULL)\n        {\n                printf("get data = %d\\n",info->si_int);\n                printf("get data = %d\\n",info->si_value.sival_int);\n                printf("get pid is = %d\\n",info->si_pid);\n        }\n \n}\n \nint main()\n{\n        struct sigaction act;\n        printf("pid = %d\\n",getpid());\n        act.sa_sigaction = handler;\n        act.sa_flags = SA_SIGINFO;\n \n        sigaction(SIGUSR1,&act,NULL);\n        while(1);\n \n        return 0;\n}\n')])])]),s("p",[n._v("发送端：")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <signal.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <stdlib.h>\n//       int sigqueue(pid_t pid, int sig, const union sigval value);\n \nint main(int argc,char **argv)\n{\n        int signum;\n        int pid;\n \n        signum = atoi(argv[1]);\n        pid = atoi(argv[2]);\n \n        union sigval value;\n        value.sival_int = 100;\n \n        sigqueue(pid,signum,value);\n        printf("pid = %d,done\\n",getpid());\n \n        return 0;\n}\n')])])]),s("p",[n._v("注意：信号发送字符串，只有在父子进程或者是共享内存下才可发送。")]),n._v(" "),s("h3",{attrs:{id:"六、信号量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、信号量"}},[n._v("#")]),n._v(" 六、信号量")]),n._v(" "),s("p",[n._v("信号量与已经介绍过的 IPC 结构不同，它是一个计数器。信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。")]),n._v(" "),s("p",[n._v("信号量的特点：")]),n._v(" "),s("blockquote",[s("ol",[s("li",[n._v("信号量用于进程间同步，若要在进程间传递数据需要结合共享内存。")]),n._v(" "),s("li",[n._v("信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作。")]),n._v(" "),s("li",[n._v("每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数。")]),n._v(" "),s("li",[n._v("支持信号量组")])])]),n._v(" "),s("p",[n._v("信号量的函数原型：")]),n._v(" "),s("blockquote",[s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// 创建或获取一个信号量组：若成功返回信号量集 ID，失败返回 - 1  \nint semget(key_t key, int num_sems, int sem_flags);  \n// 对信号量组进行操作，改变信号量的值：成功返回 0，失败返回 - 1  \nint semop(int semid, struct sembuf semoparray[], size_t numops);    \n// 控制信号量的相关信息  \nint semctl(int semid, int sem_num, int cmd, ...);\n")])])])]),n._v(" "),s("p",[n._v("当 "),s("code",[n._v("semget")]),n._v(" 创建新的信号量集合时，必须指定集合中信号量的个数（即 "),s("code",[n._v("num_sems")]),n._v("），通常为 1； 如果是引用一个现有的集合，则将 "),s("code",[n._v("num_sems")]),n._v(" 指定为 0 。")]),n._v(" "),s("p",[n._v("在 "),s("code",[n._v("semop")]),n._v(" 函数中，"),s("code",[n._v("sembuf")]),n._v(" 结构的定义如下：")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("struct sembuf \n{\n    short sem_num; // 信号量组中对应的序号，0～sem_nums-1\n    short sem_op;  // 信号量值在一次操作中的改变量\n    short sem_flg; // IPC_NOWAIT, SEM_UNDO\n}\n")])])]),s("p",[n._v("在 "),s("code",[n._v("semctl")]),n._v(" 函数中的命令有多种，这里就说两个常用的：")]),n._v(" "),s("ul",[s("li",[s("code",[n._v("SETVAL")]),n._v("：用于初始化信号量为一个已知的值。")]),n._v(" "),s("li",[s("code",[n._v("IPC_RMID")]),n._v("：删除一个信号量集合。如果不删除信号量，它将继续在系统中存在，即使程序已经退出，它可能在你下次运行此程序时引发问题，而且信号量是一种有限的资源。")])]),n._v(" "),s("p",[n._v("代码演示：")]),n._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <stdio.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/sem.h>\n#include <unistd.h>\n \n//       int semget(key_t key, int nsems, int semflg);\n//       int semctl(int semid, int semnum, int cmd, ...);\n//       int semop(int semid, struct sembuf *sops, size_t nsops);\nunion semun{\n        int              val;    /* Value for SETVAL */\n        struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */\n        unsigned short  *array;  /* Array for GETALL, SETALL */\n        struct seminfo  *__buf;  /* Buffer for IPC_INFO\n                                    (Linux-specific) */\n};\n \n//P操作，拿钥匙\nvoid PGetKey(int semid)\n{\n        struct sembuf sops;\n        sops.sem_num = 0;\n        sops.sem_op = -1;\n        sops.sem_flg = SEM_UNDO;\n \n        semop(semid, &sops, 1);\n}\n \n//V操作，放回钥匙\nvoid VPutBackKey(int semid)\n{\n        struct sembuf sops;\n        sops.sem_num = 0;\n        sops.sem_op = 1;\n        sops.sem_flg = SEM_UNDO;\n \n        semop(semid, &sops, 1);\n}\n \nint main()\n{\n        key_t key;\n        int semid;\n        if((key == ftok(".",6)) < 0)\n        {\n                printf("ftok error\\n");\n        }\n \n        semid = semget(key , 1,  IPC_CREAT|0666);//创造钥匙，数量为1\n \n        union semun sem;\n        sem.val = 0;//初始状态为没有钥匙\n        semctl(semid, 0, SETVAL, sem);//SETVAL初始化信号量为一个已知的值，这时就需要第四个参数\n                     //0表示操作第一把钥匙\n        int pid = fork();\n \n        if(pid < 0)\n        {\n                printf("fork failed\\n");\n        }else if(pid == 0)\n        {\n                printf("this is child\\n");\n                VPutBackKey(semid);//首先把钥匙放回     \n        }else\n        {\n                PGetKey(semid);//等子进程将钥匙放回后才会进行操作，保证子进程先执行\n                printf("this is father\\n");\n                VPutBackKey(semid);\n                semctl(semid, 0, IPC_RMID);//销毁钥匙\n        }\n \n        return 0;\n}\n')])])]),s("h3",{attrs:{id:"七、套接字-socket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、套接字-socket"}},[n._v("#")]),n._v(" 七、套接字（socket）")]),n._v(" "),s("h2",{attrs:{id:"进程间通信方式总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信方式总结"}},[n._v("#")]),n._v(" 进程间通信方式总结：")]),n._v(" "),s("ol",[s("li",[s("strong",[n._v("管道")]),n._v("：速度慢，容量有限，只有父子进程能通讯；")]),n._v(" "),s("li",[s("strong",[n._v("FIFO")]),n._v("：任何进程间都能通讯，但速度慢；")]),n._v(" "),s("li",[s("strong",[n._v("消息队列")]),n._v("：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题；")]),n._v(" "),s("li",[s("strong",[n._v("共享内存")]),n._v("：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题；")]),n._v(" "),s("li",[s("strong",[n._v("信号")]),n._v("：有入门版和高级版两种，区别在于入门版注重动作，高级版可以传递消息。只有在父子进程或者是共享内存中，才可以发送字符串消息；")]),n._v(" "),s("li",[s("strong",[n._v("信号量")]),n._v("：不能传递复杂消息，只能用来同步。用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。")]),n._v(" "),s("li",[s("strong",[n._v("套接字（socket）")]),n._v("：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);