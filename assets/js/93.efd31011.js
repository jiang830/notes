(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{407:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"tomcat-i-o模型详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-i-o模型详解"}},[t._v("#")]),t._v(" Tomcat I/O模型详解")]),t._v(" "),a("h4",{attrs:{id:"i-o模型详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#i-o模型详解"}},[t._v("#")]),t._v(" I/O模型详解")]),t._v(" "),a("h5",{attrs:{id:"内核空间和用户空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核空间和用户空间"}},[t._v("#")]),t._v(" 内核空间和用户空间")]),t._v(" "),a("p",[t._v("思考：物理内存是有限的（比如16G内存），怎么把有限的内存分配给不同的进程？")]),t._v(" "),a("p",[t._v("Linux 给每个进程虚拟出一块很大的地址空间，比如 32 位机器上进程的虚拟内存地址空间是 4GB，从 0x00000000 到 0xFFFFFFFF。但这 4GB 并不是真实的物理内存，而是进程访问到了某个虚拟地址，如果这个地址还没有对应的物理内存页，就会产生缺页中断，分配物理内存，MMU（内存管理单元）会将虚拟地址与物理内存页的映射关系保存在页表中，再次访问这个虚拟地址，就能找到相应的物理内存页。每个进程的这 4GB 虚拟地址空间分布如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.jssjqd.cn/202303201334373.png",alt:"image-20230320133414286"}})]),t._v(" "),a("p",[t._v("用户空间从低到高依次是代码区、数据区、堆、共享库与 mmap 内存映射区、栈、环境变量。其中堆向高地址增长，栈向低地址增长。")]),t._v(" "),a("p",[t._v("用户空间上还有一个共享库和 mmap 映射区，Linux 提供了内存映射函数 mmap， 它可将文件内容映射到这个内存区域，用户通过读写这段内存，从而实现对文件的读取和修改，无需通过 read/write 系统调用来读写文件，省去了用户空间和内核空间之间的数据拷贝，Java 的 MappedByteBuffer 就是通过它来实现的；用户程序用到的系统共享库也是通过 mmap 映射到了这个区域。")]),t._v(" "),a("p",[t._v("​    task_struct结构体本身是分配在内核空间，它的vm_struct成员变量保存了各内存区域的起始和终止地址，此外task_struct中还保存了进程的其他信息，比如进程号、打开的文件、创建的 Socket 以及 CPU 运行上下文")]),t._v(" "),a("p",[t._v("进程的虚拟地址空间总体分为用户空间和内核空间，低地址上的 3GB 属于用户空间，高地址的 1GB 是内核空间，这是基于安全上的考虑，用户程序只能访问用户空间，内核程序可以访问整个进程空间，并且只有内核可以直接访问各种硬件资源，比如磁盘和网卡。")]),t._v(" "),a("p",[t._v("那用户程序需要访问这些硬件资源该怎么办呢？答案是通过系统调用，系统调用可以理解为内核实现的函数，比如应用程序要通过网卡接收数据，会调用 Socket 的 read 函数：")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ssize_t read(int fd,void *buf,size_t nbyte)\n")])])]),a("p",[t._v("CPU 在执行系统调用的过程中会从用户态切换到内核态，CPU 在用户态下执行用户程序，使用的是用户空间的栈，访问用户空间的内存；当 CPU 切换到内核态后，执行内核代码，使用的是内核空间上的栈。")]),t._v(" "),a("p",[t._v("在 Linux 中，线程是一个轻量级的进程，轻量级说的是线程只是一个 CPU 调度单元，因此线程有自己的task_struct结构体和运行栈区，但是线程的其他资源都是跟父进程共用的，比如虚拟地址空间、打开的文件和 Socket 等。")]),t._v(" "),a("h5",{attrs:{id:"阻塞与唤醒"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与唤醒"}},[t._v("#")]),t._v(" 阻塞与唤醒")]),t._v(" "),a("p",[t._v("思考：当用户线程发起一个阻塞式的 read 调用，数据未就绪时，线程就会阻塞，那阻塞具体是如何实现的呢？")]),t._v(" "),a("p",[t._v("Linux 内核将线程当作一个进程进行 CPU 调度，内核维护了一个可运行的进程队列，所有处于TASK_RUNNING状态的进程都会被放入运行队列中，本质是用双向链表将task_struct链接起来，排队使用 CPU 时间片，时间片用完重新调度 CPU。所谓调度就是在可运行进程列表中选择一个进程，再从 CPU 列表中选择一个可用的 CPU，将进程的上下文恢复到这个 CPU 的寄存器中，然后执行进程上下文指定的下一条指令。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.jssjqd.cn/202303201335288.png",alt:"image-20230320133513416"}})]),t._v(" "),a("p",[t._v("而阻塞的本质就是将进程的task_struct移出运行队列，添加到等待队列，并且将进程的状态的置为TASK_UNINTERRUPTIBLE或者TASK_INTERRUPTIBLE，重新触发一次 CPU 调度让出 CPU。")]),t._v(" "),a("p",[t._v("思考：线程是如何唤醒的呢？")]),t._v(" "),a("p",[t._v("线程在加入到等待队列的同时向内核注册了一个回调函数，告诉内核我在等待这个 Socket 上的数据，如果数据到了就唤醒我。这样当网卡接收到数据时，产生硬件中断，内核再通过调用回调函数唤醒进程。唤醒的过程就是将进程的task_struct从等待队列移到运行队列，并且将task_struct的状态置为TASK_RUNNING，这样进程就有机会重新获得 CPU 时间片。")]),t._v(" "),a("p",[t._v("这个过程中，内核还会将数据从内核空间拷贝到用户空间的堆上。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.jssjqd.cn/202303201335578.png",alt:"image-20230320133523461"}})]),t._v(" "),a("p",[t._v("当 read 系统调用返回时，CPU 又从内核态切换到用户态，继续执行 read 调用的下一行代码，并且能从用户空间上的 Buffer 读到数据了。")]),t._v(" "),a("h5",{attrs:{id:"socket-read-系统调用的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-read-系统调用的过程"}},[t._v("#")]),t._v(" Socket Read 系统调用的过程")]),t._v(" "),a("p",[t._v("以Linux操作系统为例，一次socket read 系统调用的过程：")]),t._v(" "),a("ul",[a("li",[t._v("首先 CPU 在用户态执行应用程序的代码，访问进程虚拟地址空间的用户空间；")]),t._v(" "),a("li",[t._v("read 系统调用时 CPU 从用户态切换到内核态，执行内核代码，内核检测到 Socket 上的数据未就绪时，将进程的task_struct结构体从运行队列中移到等待队列，并触发一次 CPU 调度，这时进程会让出 CPU；")]),t._v(" "),a("li",[t._v("当网卡数据到达时，内核将数据从内核空间拷贝到用户空间的 Buffer，接着将进程的task_struct结构体重新移到运行队列，这样进程就有机会重新获得 CPU 时间片，系统调用返回，CPU 又从内核态切换到用户态，访问用户空间的数据。")])]),t._v(" "),a("p",[a("strong",[t._v("总结")])]),t._v(" "),a("p",[t._v("当用户线程发起 I/O 调用后，网络数据读取操作会经历两个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("用户线程等待内核将数据从网卡拷贝到内核空间。（数据准备阶段）")]),t._v(" "),a("li",[t._v("内核将数据从内核空间拷贝到用户空间（应用进程的缓冲区）。")])]),t._v(" "),a("p",[t._v("各种 I/O 模型的区别就是：它们实现这两个步骤的方式是不一样的。")]),t._v(" "),a("p",[t._v("​    "),a("img",{attrs:{src:"https://img.jssjqd.cn/202303201335159.png",alt:"image-20230320133543206"}})]),t._v(" "),a("h5",{attrs:{id:"unix-linux-下5种i-o模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unix-linux-下5种i-o模型"}},[t._v("#")]),t._v(" Unix(linux)下5种I/O模型")]),t._v(" "),a("p",[t._v("I/O 模型是为了解决内存和外部设备速度差异的问题。我们平时说的阻塞或非阻塞是指应用程序在发起 I/O 操作时，是立即返回还是等待。而同步和异步，是指应用程序在与内核通信时，数据从内核空间到应用空间的拷贝，是由内核主动发起还是由应用程序来触发。")]),t._v(" "),a("p",[t._v("Linux 系统下的 I/O 模型有 5 种：")]),t._v(" "),a("ul",[a("li",[t._v("同步阻塞I/O（bloking I/O）")]),t._v(" "),a("li",[t._v("同步非阻塞I/O（non-blocking I/O）")]),t._v(" "),a("li",[t._v("I/O多路复用（multiplexing I/O）")]),t._v(" "),a("li",[t._v("信号驱动式I/O（signal-driven I/O）")]),t._v(" "),a("li",[t._v("异步I/O（asynchronous I/O）")])]),t._v(" "),a("p",[t._v("其中信号驱动式IO在实际中并不常用")]),t._v(" "),a("p",[t._v("​    "),a("img",{attrs:{src:"https://img.jssjqd.cn/202303201336128.png",alt:"image-20230320133611238"}})]),t._v(" "),a("p",[t._v("​    "),a("img",{attrs:{src:"https://img.jssjqd.cn/202303201336513.png",alt:"image-20230320133616538"}})]),t._v(" "),a("p",[t._v("​    "),a("img",{attrs:{src:"https://img.jssjqd.cn/202303201336830.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"tomcat的-i-o-模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tomcat的-i-o-模型"}},[t._v("#")]),t._v(" Tomcat的 I/O 模型")]),t._v(" "),a("p",[t._v("Tomcat 支持的多种 I/O 模型和应用层协议。Tomcat 支持的 I/O 模型有：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("IO模型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("BIO （JIoEndpoint）")]),t._v(" "),a("td",[t._v("同步阻塞式IO，即Tomcat使用传统的java.io进行操作。该模式下每个请求都会创建一个线程，对性能开销大，不适合高并发场景。优点是稳定，适合连接数目小且固定架构。")])]),t._v(" "),a("tr",[a("td",[t._v("NIO（NioEndpoint）")]),t._v(" "),a("td",[t._v("同步非阻塞式IO，jdk1.4 之后实现的新IO。该模式基于多路复用选择器监测连接状态再同步通知线程处理，从而达到非阻塞的目的。比传统BIO能更好的支持并发性能。Tomcat 8.0之后默认采用该模式。NIO方式适用于连接数目多且连接比较短（轻操作） 的架构， 比如聊天服务器， 弹幕系统， 服务器间通讯，编程比较复杂")])]),t._v(" "),a("tr",[a("td",[t._v("AIO (Nio2Endpoint)")]),t._v(" "),a("td",[t._v("异步非阻塞式IO，jdk1.7后之支持 。与nio不同在于不需要多路复用选择器，而是请求处理线程执行完成进行回调通知，继续执行后续操作。Tomcat 8之后支持。一般适用于连接数较多且连接时间较长的应用")])]),t._v(" "),a("tr",[a("td",[t._v("APR（AprEndpoint）")]),t._v(" "),a("td",[t._v("全称是 Apache Portable Runtime/Apache可移植运行库)，是Apache HTTP服务器的支持库。AprEndpoint 是通过 JNI 调用 APR 本地库而实现非阻塞 I/O 的。使用需要编译安装APR 库")])])])]),t._v(" "),a("p",[t._v("注意： Linux 内核没有很完善地支持异步 I/O 模型，因此 JVM 并没有采用原生的 Linux 异步 I/O，而是在应用层面通过 epoll 模拟了异步 I/O 模型。因此在 Linux 平台上，Java NIO 和 Java NIO.2 底层都是通过 epoll 来实现的，但是 Java NIO 更加简单高效。")]),t._v(" "),a("h5",{attrs:{id:"tomcat-i-o-模型的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-i-o-模型的选择"}},[t._v("#")]),t._v(" Tomcat I/O 模型的选择")]),t._v(" "),a("p",[t._v("I/O 调优实际上是连接器类型的选择，一般情况下默认都是 NIO，在绝大多数情况下都是够用的，除非你的 Web 应用用到了 TLS 加密传输，而且对性能要求极高，这个时候可以考虑 APR，因为 APR 通过 OpenSSL 来处理 TLS 握手和加密 / 解密。OpenSSL 本身用 C 语言实现，它还对 TLS 通信做了优化，所以性能比 Java 要高。如果你的 Tomcat 跑在 Windows 平台上，并且 HTTP 请求的数据量比较大，可以考虑 NIO.2，这是因为 Windows 从操作系统层面实现了真正意义上的异步 I/O，如果传输的数据量比较大，异步 I/O 的效果就能显现出来。")]),t._v(" "),a("p",[t._v("指定IO模型只需修改protocol配置")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 修改protocol属性, 使用NIO2 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Connector")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("8080"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("org.apache.coyote.http11.Http11Nio2Protocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("connectionTimeout")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("20000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("redirectPort")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("8443"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("           \n")])])]),a("h4",{attrs:{id:"nioendpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nioendpoint"}},[t._v("#")]),t._v(" NioEndpoint")]),t._v(" "),a("p",[t._v("思考：Tomcat是如何实现非阻塞I/O的？")]),t._v(" "),a("p",[t._v("在 Tomcat 中，EndPoint 组件的主要工作就是处理 I/O，而 NioEndpoint 利用 Java NIO API 实现了多路复用 I/O 模型。Tomcat的NioEndpoint 是基于主从Reactor多线程模型设计的")]),t._v(" "),a("h5",{attrs:{id:"nioendpoint的设计思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nioendpoint的设计思路"}},[t._v("#")]),t._v(" NioEndpoint的设计思路")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.jssjqd.cn/202303201338340.png",alt:"image-20230320133826296"}})]),t._v(" "),a("ul",[a("li",[t._v("LimitLatch 是连接控制器，它负责控制最大连接数，NIO 模式下默认是 10000(tomcat9中8192)，当连接数到达最大时阻塞线程，直到后续组件处理完一个连接后将连接数减 1。注意到达最大连接数后操作系统底层还是会接收客户端连接，但用户层已经不再接收。")]),t._v(" "),a("li",[t._v("Acceptor 跑在一个单独的线程里，它在一个死循环里调用 accept 方法来接收新连接，一旦有新的连接请求到来，accept 方法返回一个 Channel 对象，接着把 Channel 对象交给 Poller 去处理。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("#"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NioEndpoint")]),t._v("#initServerSocket\n\nserverSock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerSocketChannel")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第2个参数表示操作系统的等待队列长度，默认100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当应用层面的连接数到达最大值时，操作系统可以继续接收的最大连接数")]),t._v("\nserverSock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAcceptCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ServerSocketChannel 被设置成阻塞模式")]),t._v("\nserverSock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureBlocking")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         \n")])])]),a("p",[t._v("ServerSocketChannel 通过 accept() 接受新的连接，accept() 方法返回获得 SocketChannel 对象，然后将 SocketChannel 对象封装在一个 PollerEvent 对象中，并将 PollerEvent 对象压入 Poller 的 SynchronizedQueue 里，这是个典型的生产者 - 消费者模式，Acceptor 与 Poller 线程之间通过 SynchronizedQueue 通信。")]),t._v(" "),a("ul",[a("li",[t._v("Poller 的本质是一个 Selector，也跑在单独线程里。Poller 在内部维护一个 Channel 数组，它在一个死循环里不断检测 Channel 的数据就绪状态，一旦有 Channel 可读，就生成一个 SocketProcessor 任务对象扔给 Executor 去处理。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.jssjqd.cn/202303201339779.png",alt:"image-20230320133908611"}})]),t._v(" "),a("ul",[a("li",[t._v("Executor 就是线程池，负责运行 SocketProcessor 任务类，SocketProcessor 的 run 方法会调用 Http11Processor 来读取和解析请求数据。Http11Processor 是应用层协议的封装，它会调用容器获得响应，再把响应通过 Channel 写出。")])]),t._v(" "),a("h5",{attrs:{id:"设计精髓-tomcat线程池扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计精髓-tomcat线程池扩展"}},[t._v("#")]),t._v(" 设计精髓：Tomcat线程池扩展")]),t._v(" "),a("p",[t._v("思考：Tomcat是如何扩展java线程池的？")]),t._v(" "),a("p",[t._v("Tomcat线程池默认实现StandardThreadExecutor。Tomcat 线程池和 Java 原生线程池的区别：")]),t._v(" "),a("ul",[a("li",[t._v("自定义了拒绝策略，Tomcat 在线程总数达到最大数时，不是立即执行拒绝策略，而是再尝试向任务队列添加任务，添加失败后再执行拒绝策略。")]),t._v(" "),a("li",[t._v("TaskQueue 重写了 LinkedBlockingQueue 的 offer 方法。只有当前线程数大于核心线程数、小于最大线程数，并且已提交的任务个数大于当前线程数时，也就是说线程不够用了，但是线程数又没达到极限，才会去创建新的线程。目的：在任务队列的长度无限制的情况下，让线程池有机会创建新的线程。")])]),t._v(" "),a("h5",{attrs:{id:"设计精髓-nio中涉及的对象池技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计精髓-nio中涉及的对象池技术"}},[t._v("#")]),t._v(" 设计精髓：NIO中涉及的对象池技术")]),t._v(" "),a("p",[t._v("Java 对象，特别是一个比较大、比较复杂的 Java 对象，它们的创建、初始化和 GC 都需要耗费 CPU 和内存资源，为了减少这些开销，Tomcat 使用了对象池技术。对象池技术可以减少频繁创建和销毁对象带来的成本，实现对象的缓存和复用，是典型的以空间换时间的设计思路。")]),t._v(" "),a("p",[t._v("思考： PollerEvent为什么采用SynchronizedStack缓存？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Cache for poller events\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedStack")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PollerEvent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" eventCache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("SynchronizedStack 内部维护了一个对象数组，并且用数组来实现栈的接口：push 和 pop 方法，这两个方法分别用来归还对象和获取对象。SynchronizedStack 用数组而不是链表来维护对象，可以减少结点维护的内存开销，并且它本身只支持扩容不支持缩容，也就是说数组对象在使用过程中不会被重新赋值，也就不会被 GC。这样设计的目的是用最低的内存和 GC 的代价来实现无界容器，同时 Tomcat 的最大同时请求数是有限制的，因此不需要担心对象的数量会无限膨胀。")]),t._v(" "),a("h4",{attrs:{id:"nio2endpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nio2endpoint"}},[t._v("#")]),t._v(" Nio2Endpoint")]),t._v(" "),a("p",[t._v("NIO 和 NIO.2 最大的区别是，一个是同步一个是异步。异步最大的特点是，应用程序不需要自己去触发数据从内核空间到用户空间的拷贝。")]),t._v(" "),a("p",[t._v("思考：Tomcat如何实现异步I/O的？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.jssjqd.cn/202303201340706.png",alt:"image-20230320134005318"}})]),t._v(" "),a("p",[t._v("Nio2Endpoint 中没有 Poller 组件，也就是没有 Selector。在异步 I/O 模式下，Selector 的工作交给内核来做了。")]),t._v(" "),a("h3",{attrs:{id:"tomcat调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tomcat调优"}},[t._v("#")]),t._v(" Tomcat调优")]),t._v(" "),a("p",[t._v("Tomcat9参数配置：https://tomcat.apache.org/tomcat-9.0-doc/config/http.html")]),t._v(" "),a("h4",{attrs:{id:"tomcat-的关键指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-的关键指标"}},[t._v("#")]),t._v(" Tomcat 的关键指标")]),t._v(" "),a("p",[t._v("Tomcat 的关键指标有吞吐量、响应时间、错误数、线程池、CPU 以及 JVM 内存。前三个指标是我们最关心的业务指标，Tomcat 作为服务器，就是要能够又快有好地处理请求，因此吞吐量要大、响应时间要短，并且错误数要少。后面三个指标是跟系统资源有关的，当某个资源出现瓶颈就会影响前面的业务指标，比如线程池中的线程数量不足会影响吞吐量和响应时间；但是线程数太多会耗费大量 CPU，也会影响吞吐量；当内存不足时会触发频繁地 GC，耗费 CPU，最后也会反映到业务指标上来。")]),t._v(" "),a("h5",{attrs:{id:"通过-jconsole-监控-tomcat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-jconsole-监控-tomcat"}},[t._v("#")]),t._v(" 通过 JConsole 监控 Tomcat"),a("img",{attrs:{src:"https://img.jssjqd.cn/202303201341365.png",alt:"image-20230320134118219"}})]),t._v(" "),a("p",[a("strong",[t._v("连接远程tomcat")])]),t._v(" "),a("p",[t._v("linux上，在tomcat安装目录的bin下，新建setenv.sh,重启tomcat")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("JAVA_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"')]),t._v("\n")])])]),a("p",[t._v("​    "),a("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/f1960c96070b09982a6002c17a91bfe7/xmlnote/A2A7E53D298447C69BE8F57E41119464/38609",alt:"0"}})]),t._v(" "),a("h5",{attrs:{id:"命令行查看tomcat指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令行查看tomcat指标"}},[t._v("#")]),t._v(" 命令行查看Tomcat指标")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#通过 ps 命令找到 Tomcat 进程，拿到进程 ID")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -ef"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" tomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看进程状态的大致信息")]),t._v("\ncat/proc/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/status\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#监控进程的 CPU 和内存资源使用情况")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-p")]),t._v(" pid\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 Tomcat 的网络连接,比如 Tomcat 在 8080 端口上监听连接请求")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("netstat")]),t._v(" -na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("          \n")])])]),a("h4",{attrs:{id:"线程池的并发调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池的并发调优"}},[t._v("#")]),t._v(" 线程池的并发调优")]),t._v(" "),a("p",[t._v("线程池调优指的是给 Tomcat 的线程池设置合适的参数，使得 Tomcat 能够又快又好地处理请求。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://img.jssjqd.cn/202303201342786.png",alt:"image-20230320134240504"}})]),t._v(" "),a("p",[t._v("sever.xml中配置线程池")]),t._v(" "),a("div",{staticClass:"language-XML extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("!--")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("namePrefix:")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("线程前缀")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("maxThreads:")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("最大线程数，默认设置")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("200，一般建议在")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("~")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("800，根据硬件设施和业务来判断")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("minSpareThreads:")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("核心线程数，默认设置")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("25")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("prestartminSpareThreads:")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("在")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("Tomcat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("初始化的时候就初始化核心线程")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("maxQueueSize:")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("最大的等待队列数，超过则拒绝请求")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("，默认")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("Integer.MAX_VALUE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("maxIdleTime:")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("线程空闲时间，超过该时间，线程会被销毁，单位毫秒")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("className:")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("线程实现类,默认org.apache.catalina.core.StandardThreadExecutor")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("<Executor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("tomcatThreadPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("namePrefix")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("catalina-exec-Fox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("prestartminSpareThreads")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("true"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("maxThreads")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("500"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("minSpareThreads")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("maxIdleTime")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("10000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n          \n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Connector")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("8080"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("HTTP/1.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("executor")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("tomcatThreadPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("connectionTimeout")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("20000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("redirectPort")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("8443"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("URIEncoding")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("UTF-8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n这里面最核心的就是如何确定 maxThreads 的值，如果这个参数设置小了，Tomcat 会发生线程饥饿，并且请求的处理会在队列中排队等待，导致响应时间变长；如果 maxThreads 参数值过大，同样也会有问题，因为服务器的 CPU 的核数有限，线程数太多会导致线程在 CPU 上来回切换，耗费大量的切换开销。       \n")])])]),a("p",[t._v("这里面最核心的就是如何确定 maxThreads 的值，如果这个参数设置小了，Tomcat 会发生线程饥饿，并且请求的处理会在队列中排队等待，导致响应时间变长；如果 maxThreads 参数值过大，同样也会有问题，因为服务器的 CPU 的核数有限，线程数太多会导致线程在 CPU 上来回切换，耗费大量的切换开销。")]),t._v(" "),a("p",[t._v("理论上我们可以通过公式 线程数 = CPU 核心数 *（1+平均等待时间/平均工作时间），计算出一个理想值，这个值只具有指导意义，因为它受到各种资源的限制，实际场景中，我们需要在理想值的基础上进行压测，来获得最佳线程数。")]),t._v(" "),a("h4",{attrs:{id:"springboot应用中调整tomcat参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot应用中调整tomcat参数"}},[t._v("#")]),t._v(" SpringBoot应用中调整Tomcat参数")]),t._v(" "),a("p",[t._v("方式1： yml中配置 （属性配置类：ServerProperties）")]),t._v(" "),a("div",{staticClass:"language-YML extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tomcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("threads")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("min-spare")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("connection-timeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 5000ms\n")])])]),a("p",[t._v("SpringBoot中的TomcatConnectorCustomizer类可用于对Connector进行定制化修改。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTomcatCustomizer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebServerFactoryCustomizer")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TomcatServletWebServerFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("customize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TomcatServletWebServerFactory")]),t._v(" factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8090")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProtocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"org.apache.coyote.http11.Http11NioProtocol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addConnectorCustomizers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connectorCustomizer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TomcatConnectorCustomizer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connectorCustomizer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TomcatConnectorCustomizer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("customize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Connector")]),t._v(" connector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Http11NioProtocol")]),t._v(" protocol "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Http11NioProtocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" connector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProtocolHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                protocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMaxThreads")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                protocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMinSpareThreads")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                protocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setConnectionTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("​")])])}),[],!1,null,null,null);a.default=e.exports}}]);