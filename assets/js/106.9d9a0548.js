(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{431:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("network namespace 是实现网络虚拟化的重要功能，它能创建多个隔离的网络空间，它们有独自的网络栈信息。不管是虚拟机还是容器，运行的时候仿佛自己就在独立的网络中。这篇文章介绍 network namespace 的基本概念和用法，network namespace 是 linux 内核提供的功能，这篇文章借助 "),s("code",[t._v("ip")]),t._v(" 命令来完成各种操作。"),s("code",[t._v("ip")]),t._v(" 命令来自于 "),s("code",[t._v("iproute2")]),t._v(" 安装包，一般系统会默认安装，如果没有的话，请读者自行安装。")]),t._v(" "),s("p",[s("strong",[t._v("NOTE")]),t._v("："),s("code",[t._v("ip")]),t._v(" 命令因为需要修改系统的网络配置，默认需要 sudo 权限。这篇文章使用 root 用户执行，请不要在生产环境或者重要的系统中用 root 直接执行，以防产生错误。")]),t._v(" "),s("p",[s("code",[t._v("ip")]),t._v(" 命令管理的功能很多， 和 network namespace 有关的操作都是在子命令 "),s("code",[t._v("ip netns")]),t._v(" 下进行的，可以通过 ``ip netns help` 查看所有操作的帮助信息。")]),t._v(" "),s("p",[t._v("默认情况下，使用 "),s("code",[t._v("ip netns")]),t._v(" 是没有网络 namespace 的，所以 "),s("code",[t._v("ip netns ls")]),t._v(" 命令看不到任何输出。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns help")]),t._v("\nUsage:  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns list\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" NAME\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns attach NAME PID\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" NAME NETNSID\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" netns delete "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NAME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns identify "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("PID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns pids NAME\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" netns "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NAME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" cmd "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns monitor\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns list-id "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("target\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns ls")]),t._v("\n")])])]),s("p",[t._v("创建 network namespace 也非常简单，直接使用 "),s("code",[t._v("ip netns add")]),t._v(" 后面跟着要创建的 namespace 名称。如果相同名字的 namespace 已经存在，命令会报 "),s("code",[t._v("Cannot create namespace")]),t._v(" 的错误。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns add net1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns ls")]),t._v("\nnet1\n")])])]),s("p",[s("code",[t._v("ip netns")]),t._v(" 命令创建的 network namespace 会出现在 "),s("code",[t._v("/var/run/netns/")]),t._v("("),s("strong",[t._v("ubuntu目录为/run/netns/")]),t._v(") 目录下，如果需要管理其他不是 "),s("code",[t._v("ip netns")]),t._v(" 创建的 network namespace，只要在这个目录下创建一个指向对应 network namespace 文件的链接就行。")]),t._v(" "),s("p",[t._v("有了自己创建的 network namespace，我们还需要看看它里面有哪些东西。对于每个 network namespace 来说，它会有自己独立的网卡、路由表、ARP 表、iptables 等和网络相关的资源。"),s("code",[t._v("ip")]),t._v(" 命令提供了 "),s("code",[t._v("ip netns exec")]),t._v(" 子命令可以在对应的 network namespace 中执行命令，比如我们要看一下这个 network namespace 中有哪些网卡。更棒的是，"),s("strong",[t._v("要执行的可以是任何命令，不只是和网络相关的")]),t._v("（当然，和网络无关命令执行的结果和在外部执行没有区别）。比如下面例子中，执行 "),s("code",[t._v("bash")]),t._v(" 命令了之后，后面所有的命令都是在这个 network namespace 中执行的，好处是不用每次执行命令都要把 "),s("code",[t._v("ip netns exec NAME")]),t._v(" 补全，缺点是你无法清楚知道自己当前所在的 "),s("code",[t._v("shell")]),t._v("，容易混淆。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost ~]# ip netns exec net1 ip addr\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n[root@localhost ~]# ip netns exec net1 bash\n[root@localhost ~]# ip addr\n1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n[root@localhost ~]# exit\nexit\n")])])]),s("p",[s("strong",[t._v("更新")]),t._v("：通过修改 bash 的前缀信息可以区分不同 shell，操作如下：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" netns "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" ns1 /bin/bash "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--rcfile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PS1='),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("namespace ns1> "),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nnamespace ns"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v(" www.google.com\nPING www.google.com "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("178.60")]),t._v(".128.38"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("56")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("84")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bytes of data.\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bytes from cache.google.com "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("178.60")]),t._v(".128.38"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("icmp_seq")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ttl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("58")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17.6")]),t._v(" ms\n")])])]),s("p",[s("code",[t._v("ip netns exec")]),t._v(" 后面跟着 namespace 的名字，比如这里的 "),s("code",[t._v("net1")]),t._v("，然后是要执行的命令，只要是合法的 shell 命令都能运行，比如上面的 "),s("code",[t._v("ip addr")]),t._v(" 或者 "),s("code",[t._v("bash")]),t._v("。")]),t._v(" "),s("p",[t._v("每个 namespace 在创建的时候会自动创建一个 "),s("code",[t._v("lo")]),t._v(" 的 interface，它的作用和 linux 系统中默认看到的 "),s("code",[t._v("lo")]),t._v(" 一样，都是为了实现 loopback 通信。如果希望 "),s("code",[t._v("lo")]),t._v(" 能工作，不要忘记启用它：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net1 ip link set lo up")]),t._v("\n")])])]),s("p",[t._v("默认情况下，network namespace 是不能和主机网络，或者其他 network namespace 通信的。")]),t._v(" "),s("h2",{attrs:{id:"network-namespace-之间通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#network-namespace-之间通信"}},[t._v("#")]),t._v(" network namespace 之间通信")]),t._v(" "),s("p",[t._v("有了不同 network namespace 之后，也就有了网络的隔离，但是如果它们之间没有办法通信，也没有实际用处。要把两个网络连接起来，linux 提供了 "),s("code",[t._v("veth pair")]),t._v(" 。可以把 "),s("code",[t._v("veth pair")]),t._v(" 当做是双向的 pipe（管道），从一个方向发送的网络数据，可以直接被另外一端接收到；或者也可以想象成两个 namespace 直接通过一个特殊的虚拟网卡连接起来，可以直接通信。")]),t._v(" "),s("p",[t._v("使用上面提到的方法，我们再创建另外一个 network namespace，这里我们使用 "),s("code",[t._v("net0")]),t._v(" 和 "),s("code",[t._v("net1")]),t._v(" 两个名字。")]),t._v(" "),s("p",[t._v("我们可以使用 "),s("code",[t._v("ip link add type veth")]),t._v(" 来创建一对 veth pair 出来，需要记住的是 veth pair 无法单独存在，删除其中一个，另一个也会自动消失。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost ~]# ip link add type veth\n[root@localhost ~]# ip link\n4: veth0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000\n    link/ether 36:88:73:83:c9:64 brd ff:ff:ff:ff:ff:ff\n5: veth1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT qlen 1000\n    link/ether fe:7e:75:4d:79:2e brd ff:ff:ff:ff:ff:ff\n")])])]),s("p",[s("strong",[t._v("小知识")]),t._v(": 创建 veth pair 的时候可以自己指定它们的名字，比如 "),s("strong",[s("code",[t._v("ip link add vethfoo type veth peer name vethbar")])]),t._v(" 创建出来的两个名字就是 "),s("code",[t._v("vethfoo")]),t._v(" 和 "),s("code",[t._v("vethbar")]),t._v(" 。因为这里我们对名字没有特殊要求，所以就直接使用系统自动生成的名字。如果 pair 的一端接口处于 DOWN 状态，另一端能自动检测到这个信息，并把自己的状态设置为 "),s("code",[t._v("NO-CARRIER")]),t._v("。")]),t._v(" "),s("p",[t._v("创建结束之后，我们能看到名字为 "),s("code",[t._v("veth0")]),t._v(" 和 "),s("code",[t._v("veth1")]),t._v(" 两个网络接口，名字后面的数字是系统自动生成的。接下来，要做的是把这对 veth pair 分别放到已经两个 namespace 里面，这个可以使用 "),s("code",[t._v("ip link set DEV netns NAME")]),t._v(" 来实现：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip link set veth0 netns net0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip link set veth1 netns net1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ip addr")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": lo: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("LOOPBACK"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mtu "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65536")]),t._v(" qdisc noop state DOWN\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(": veth0: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BROADCAST,MULTICAST"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mtu "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),t._v(" qdisc noop state DOWN qlen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n    link/ether "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),t._v(":88:73:83:c9:64 brd ff:ff:ff:ff:ff:ff\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net1 ip addr")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": lo: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("LOOPBACK"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mtu "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("65536")]),t._v(" qdisc noop state DOWN\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(": veth1: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BROADCAST,MULTICAST"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mtu "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),t._v(" qdisc noop state DOWN qlen "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v("\n    link/ether fe:7e:75:4d:79:2e brd ff:ff:ff:ff:ff:ff\n")])])]),s("p",[t._v("最后，我们给这对 veth pair 配置上 ip 地址，并启用它们。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ip link set veth0 up")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ip addr add 10.0.1.1/24 dev veth0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ip route")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.0/24 dev veth0  proto kernel  scope "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("link")]),t._v("  src "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.1\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net1 ip link set veth1 up")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net1 ip addr add 10.0.1.2/24 dev veth1")]),t._v("\n")])])]),s("p",[t._v("可以看到，最每个 namespace 中，在配置玩 ip 之后，还自动生成了对应的路由表信息，网络 "),s("code",[t._v("10.0.1.0/24")]),t._v(" 数据报文都会通过 veth pair 进行传输。使用 "),s("code",[t._v("ping")]),t._v(" 命令可以验证它们的连通性：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ping -c 3 10.0.1.2")]),t._v("\nPING "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("56")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("84")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bytes of data.\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bytes from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.2: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("icmp_seq")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ttl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.039")]),t._v(" ms\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bytes from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.2: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("icmp_seq")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ttl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.039")]),t._v(" ms\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bytes from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.2: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("icmp_seq")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ttl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.139")]),t._v(" ms\n\n--- "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.2 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v(" statistics ---\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" packets transmitted, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" received, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("% packet loss, "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" 2004ms\nrtt min/avg/max/mdev "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.039")]),t._v("/0.072/0.139/0.047 ms\n")])])]),s("p",[t._v("完成这些，我们创建的网络拓扑结构如下所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.jssjqd.cn/202111060751772.jpg",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"使用-bridge-连接不同的-namespace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-bridge-连接不同的-namespace"}},[t._v("#")]),t._v(" 使用 bridge 连接不同的 namespace")]),t._v(" "),s("p",[t._v("虽然 veth pair 可以实现两个 network namespace 之间的通信，但是当多个 namespace 需要通信的时候，就无能为力了。\n讲到多个网络设备通信，我们首先想到的交换机和路由器。因为这里要考虑的只是同个网络，所以只用到交换机的功能。linux 当然也提供了虚拟交换机的功能，我们还是用 "),s("code",[t._v("ip")]),t._v(" 命令来完成所有的操作。")]),t._v(" "),s("p",[s("strong",[t._v("NOTE")]),t._v("：和 bridge 有关的操作也可以使用命令 "),s("code",[t._v("brctl")]),t._v("，这个命令来自 "),s("code",[t._v("bridge-utils")]),t._v(" 这个包，读者可以根据自己的发行版进行安装，使用方法请查阅 man 页面或者相关文档。")]),t._v(" "),s("p",[t._v("首先我们来创建需要的 bridge，简单起见名字就叫做 "),s("code",[t._v("br0")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip link add br0 type bridge")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip link set dev br0 up")]),t._v("\n")])])]),s("p",[t._v("下面只演示一个 namespace 的操作，其他 namespace 要做的事情和这个类似。创建 veth pair：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip link add type veth")]),t._v("\n")])])]),s("p",[t._v("把其中一个 veth（veth1） 放到 net0 里面，设置它的 ip 地址并启用它：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip link set dev veth1 netns net0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ip link set dev veth1 name eth0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ip addr add 10.0.1.1/24 dev eth0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ip link set dev eth0 up")]),t._v("\n")])])]),s("p",[t._v("最后，把另一个 veth（veth0）连接到创建的 bridge 上，并启用它：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip link set dev veth0 master br0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip link set dev veth0 up")]),t._v("\n")])])]),s("p",[t._v("可以通过 "),s("code",[t._v("bridge")]),t._v(" 命令（也是 iproute2 包自带的命令）来查看 bridge 管理的 link 信息：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bridge link")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(": veth0 state UP "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BROADCAST,MULTICAST,UP,LOWER_UP"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" mtu "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1500")]),t._v(" master br0 state forwarding priority "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(" cost "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),s("p",[t._v("最后通过 ping 命令来测试网络的连通性：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@localhost ~"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip netns exec net0 ping -c 3 10.0.1.3")]),t._v("\nPING "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("56")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("84")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bytes of data.\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bytes from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.3: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("icmp_seq")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ttl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.251")]),t._v(" ms\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bytes from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.3: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("icmp_seq")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ttl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.047")]),t._v(" ms\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" bytes from "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.3: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("icmp_seq")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ttl")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.046")]),t._v(" ms\n\n--- "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),t._v(".1.3 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ping")]),t._v(" statistics ---\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" packets transmitted, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" received, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("% packet loss, "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" 2008ms\n")])])]),s("p",[t._v("下图是这部分网络的拓扑结构，如果对 docker 网络熟悉的话，其实这和 docker 默认的 bridge 网络模型非常相似。当然要实现每个 namespace 对外网的访问还需要额外的配置（设置默认网关，开启 ip_forward，为网络添加 NAT 规则等）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.jssjqd.cn/202111060751372.jpg",alt:"img"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);