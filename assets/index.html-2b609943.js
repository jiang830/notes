const e=JSON.parse('{"key":"v-6add3a3a","path":"/pages/202308030513/","title":"BIO NIO编程与直接内存零拷贝","lang":"zh-CN","frontmatter":{"title":"BIO NIO编程与直接内存零拷贝","date":"2023-08-03T05:13:18.000Z","permalink":"/pages/202308030513/","author":{"name":"江"},"category":["netty"],"description":"网络通信编程基本常识 什么是Socket？ Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口，一般由操作系统提供。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议处理和通信缓存管理等等都隐藏在Socket接口后面，对用户来说，使用一组简单的接口就能进行网络应用编程，让Socket去组织数据，以符合指定的协议。主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接。 客户端连接上一个服务端，就会在客户端中产生一个socket接口实例，服务端每接受一个客户端连接，就会产生一个socket接口实例和客户端的socket进行通信，有多个客户端连接自然就有多个socket接口实例。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/pages/202308030513/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"BIO NIO编程与直接内存零拷贝"}],["meta",{"property":"og:description","content":"网络通信编程基本常识 什么是Socket？ Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口，一般由操作系统提供。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议处理和通信缓存管理等等都隐藏在Socket接口后面，对用户来说，使用一组简单的接口就能进行网络应用编程，让Socket去组织数据，以符合指定的协议。主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接。 客户端连接上一个服务端，就会在客户端中产生一个socket接口实例，服务端每接受一个客户端连接，就会产生一个socket接口实例和客户端的socket进行通信，有多个客户端连接自然就有多个socket接口实例。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-03T16:58:58.000Z"}],["meta",{"property":"article:author","content":"江"}],["meta",{"property":"article:published_time","content":"2023-08-03T05:13:18.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-03T16:58:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BIO NIO编程与直接内存零拷贝\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-03T05:13:18.000Z\\",\\"dateModified\\":\\"2023-08-03T16:58:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"江\\"}]}"]]},"headers":[{"level":2,"title":"网络通信编程基本常识","slug":"网络通信编程基本常识","link":"#网络通信编程基本常识","children":[{"level":3,"title":"什么是Socket？","slug":"什么是socket","link":"#什么是socket","children":[]},{"level":3,"title":"网络编程里通用常识","slug":"网络编程里通用常识","link":"#网络编程里通用常识","children":[]}]},{"level":2,"title":"Java原生网络编程-BIO","slug":"java原生网络编程-bio","link":"#java原生网络编程-bio","children":[{"level":3,"title":"原生JDK网络编程BIO","slug":"原生jdk网络编程bio","link":"#原生jdk网络编程bio","children":[]},{"level":3,"title":"附录：BIO实战-手写RPC框架","slug":"附录-bio实战-手写rpc框架","link":"#附录-bio实战-手写rpc框架","children":[]},{"level":3,"title":"原生JDK网络编程- NIO","slug":"原生jdk网络编程-nio","link":"#原生jdk网络编程-nio","children":[]},{"level":3,"title":"Reactor模式类型","slug":"reactor模式类型","link":"#reactor模式类型","children":[]}]},{"level":2,"title":"直接内存深入辨析","slug":"直接内存深入辨析","link":"#直接内存深入辨析","children":[{"level":3,"title":"堆外内存的优点和缺点","slug":"堆外内存的优点和缺点","link":"#堆外内存的优点和缺点","children":[]},{"level":3,"title":"零拷贝","slug":"零拷贝","link":"#零拷贝","children":[]}]}],"git":{"createdTime":1691081938000,"updatedTime":1691081938000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":49.61,"words":14882},"filePathRelative":"Netty/10.BIO NIO编程与直接内存零拷贝.md","localizedDate":"2023年8月3日","excerpt":"<h2> 网络通信编程基本常识</h2>\\n<h3> 什么是Socket？</h3>\\n<p><strong>Socket</strong>是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口，一般由操作系统提供。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议处理和通信缓存管理等等都隐藏在Socket接口后面，对用户来说，使用一组简单的接口就能进行网络应用编程，让Socket去组织数据，以符合指定的协议。主机 A 的应用程序要能和主机 B 的应用程序通信，必须通过 Socket 建立连接。</p>\\n<p>客户端连接上一个服务端，就会在客户端中产生一个socket接口实例，服务端每接受一个客户端连接，就会产生一个socket接口实例和客户端的socket进行通信，有多个客户端连接自然就有多个socket接口实例。</p>","autoDesc":true}');export{e as data};
