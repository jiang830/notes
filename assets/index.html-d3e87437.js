import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-c79a1636.js";const e={},p=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SETNX 

格式：setnx key value  

将 key 的值设为 value ，当且仅当 key 不存在。 若给定的 key 已经存在，则 SETNX 不做任何动作。 SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="redisson分布式锁" tabindex="-1"><a class="header-anchor" href="#redisson分布式锁" aria-hidden="true">#</a> Redisson分布式锁</h4><p><strong>redisson分布式锁原理</strong></p><figure><img src="https://img.jssjqd.cn/202308140556600.png" alt="image-20230814055615039" tabindex="0" loading="lazy"><figcaption>image-20230814055615039</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/deduct_stock&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deductStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">&quot;lock:product_101&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">//获取锁对象</span>
        <span class="token class-name">RLock</span> redissonLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//加分布式锁</span>
        redissonLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  .setIfAbsent(lockKey, clientId, 30, TimeUnit.SECONDS);</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> stock <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;stock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jedis.get(&quot;stock&quot;)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> realStock <span class="token operator">=</span> stock <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;stock&quot;</span><span class="token punctuation">,</span> realStock <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jedis.set(key,value)</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;扣减成功，剩余库存:&quot;</span> <span class="token operator">+</span> realStock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;扣减失败，库存不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">//解锁</span>
            redissonLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;end&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="redis主从架构锁失效问题解析" tabindex="-1"><a class="header-anchor" href="#redis主从架构锁失效问题解析" aria-hidden="true">#</a> Redis主从架构锁失效问题解析</h4><p>主节点返回加锁成功的信息给客户端后，主节点挂了，设置的key没有同步到从节点，从节点变成了主节点，导致其他等待解锁的线程也可以加锁。使用zookeeper可以解决上述问题，redis偏向ap，zookeeper偏向cp</p><p><strong>RedLock实现原理</strong></p><figure><img src="https://img.jssjqd.cn/20221021082247.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>缺点：</p><p>有从节点的时候依旧会有主从锁失效问题；半数以上节点无法连通时，就无法加锁成功；节点越多，加锁性能越低；</p><h4 id="从cap角度剖析redis-与zookeeper分布式锁区别" tabindex="-1"><a class="header-anchor" href="#从cap角度剖析redis-与zookeeper分布式锁区别" aria-hidden="true">#</a> 从CAP角度剖析Redis.与Zookeeper分布式锁区别</h4><h4 id="redlock分布式锁原理与存在的问题分析" tabindex="-1"><a class="header-anchor" href="#redlock分布式锁原理与存在的问题分析" aria-hidden="true">#</a> Redlock分布式锁原理与存在的问题分析</h4><h4 id="大促场景如何将分布式锁性能提升100倍" tabindex="-1"><a class="header-anchor" href="#大促场景如何将分布式锁性能提升100倍" aria-hidden="true">#</a> 大促场景如何将分布式锁性能提升100倍</h4>`,14),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","index.html.vue"]]);export{d as default};
