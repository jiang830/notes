import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as m,c as b,b as r,e as t,d as e,w as o,f as _,a as c}from"./app-CT4bPn0M.js";const f={},A=c('<h2 id="oauth2-0介绍" tabindex="-1"><a class="header-anchor" href="#oauth2-0介绍"><span>OAuth2.0介绍</span></a></h2><p>OAuth（Open Authorization）是一个关于授权（authorization）的开放网络标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容。OAuth在全世界得到广泛应用，目前的版本是2.0版。</p><p>OAuth协议：https://tools.ietf.org/html/rfc6749</p><p>协议特点：</p><ul><li>简单：不管是OAuth服务提供者还是应用开发者，都很易于理解与使用；</li><li>安全：没有涉及到用户密钥等信息，更安全更灵活；</li><li>开放：任何服务提供商都可以实现OAuth，任何软件开发商都可以使用OAuth；</li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ul><li>原生app授权：app登录请求后台接口，为了安全认证，所有请求都带token信息，如果登录验证、请求后台数据。</li><li>前后端分离单页面应用：前后端分离框架，前端请求后台数据，需要进行oauth2安全认证，比如使用vue、react后者h5开发的app</li><li>第三方应用授权登录，比如QQ，微博，微信的授权登录。</li></ul><p>有一个&quot;云冲印&quot;的网站，可以将用户储存在Google的照片，冲印出来。用户为了使用该服务，必须让&quot;云冲印&quot;读取自己储存在Google上的照片。只有得到用户的授权，Google才会同意&quot;云冲印&quot;读取这些照片。那么，&quot;云冲印&quot;怎样获得用户的授权呢？</p><p>传统方法是，用户将自己的Google用户名和密码，告诉&quot;云冲印&quot;，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点：</p><ul><li>&quot;云冲印&quot;为了后续的服务，会保存用户的密码，这样很不安全。</li><li>Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。</li><li>&quot;云冲印&quot;拥有了获取用户储存在Google所有资料的权力，用户没法限制&quot;云冲印&quot;获得授权的范围和有效期。</li><li>用户只有修改密码，才能收回赋予&quot;云冲印&quot;的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。</li><li>只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。</li></ul><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/457641CF3DEC4B67AC250D669D736B40/52825" alt="0"></p><p>生活中常见的oauth2场景，京东商城（https://www.jd.com/）接入微信开放平台，可以通过微信登录。</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/356D2724C87C4507B8F8F2AE44227356/52822" alt="0"></p><p>登录流程分析：</p><p>https://www.processon.com/view/link/60a32e7a079129157118740f</p><p>微信开发平台文档：</p><p>https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_Login/Development_Guide.html</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span><strong>基本概念</strong></span></a></h3><p>（1）<strong>Third-party application</strong>：第三方应用程序，又称&quot;客户端&quot;（client），即例子中的&quot;云冲印&quot;。</p><p>（2）<strong>HTTP service</strong>：HTTP服务提供商，简称&quot;服务提供商&quot;，即例子中的Google。</p><p>（3）<strong>Resource Owner</strong>：资源所有者，又称&quot;用户&quot;（user）。</p><p>（4）<strong>User Agent</strong>：用户代理，比如浏览器。</p><p>（5）<strong>Authorization server</strong>：授权服务器，即服务提供商专门用来处理认证授权的服务器。</p><p>（6）<strong>Resource server</strong>：资源服务器，即服务提供商存放用户生成的资源的服务器。它与授权服务器，可以是同一台服务器，也可以是不同的服务器。</p><p>OAuth的作用就是让&quot;客户端&quot;安全可控地获取&quot;用户&quot;的授权，与&quot;服务提供商&quot;进行交互。</p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p>优点：</p><ul><li>更安全，客户端不接触用户密码，服务器端更易集中保护</li><li>广泛传播并被持续采用</li><li>短寿命和封装的token</li><li>资源服务器和授权服务器解耦</li><li>集中式授权，简化客户端</li><li>HTTP/JSON友好，易于请求和传递token</li><li>考虑多种客户端架构场景</li><li>客户可以具有不同的信任级别</li></ul><p>缺点：</p><ul><li>协议框架太宽泛，造成各种实现的兼容性和互操作性差</li><li>不是一个认证协议，本身并不能告诉你任何用户信息。</li></ul><h2 id="oauth2的设计思路" tabindex="-1"><a class="header-anchor" href="#oauth2的设计思路"><span>OAuth2的设计思路</span></a></h2><p>OAuth在&quot;客户端&quot;与&quot;服务提供商&quot;之间，设置了一个授权层（authorization layer）。&quot;客户端&quot;不能直接登录&quot;服务提供商&quot;，只能登录授权层，以此将用户与客户端区分开来。&quot;客户端&quot;登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期，&quot;客户端&quot;登录授权层以后，&quot;服务提供商&quot;根据令牌的权限范围和有效期，向&quot;客户端&quot;开放用户储存的资料。</p><p>OAuth 2.0的运行流程如下图，摘自RFC 6749：</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/5D6F4EDD7CCD4EE3BF5AA6CE70C9868A/52839" alt="0"></p><p>（A）用户打开客户端以后，客户端要求用户给予授权。</p><p>（B）用户同意给予客户端授权。</p><p>（C）客户端使用上一步获得的授权，向授权服务器申请令牌。</p><p>（D）授权服务器对客户端进行认证以后，确认无误，同意发放令牌。</p><p>（E）客户端使用令牌，向资源服务器申请获取资源。</p><p>（F）资源服务器确认令牌无误，同意向客户端开放资源。</p><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p><p>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</p><p>（2）令牌可以被数据所有者撤销，会立即失效。密码一般不允许被他人撤销。</p><p>（3）令牌有权限范围（scope）。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</p><p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p><h3 id="客户端授权模式" tabindex="-1"><a class="header-anchor" href="#客户端授权模式"><span>客户端授权模式</span></a></h3><p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。</p><ul><li>授权码模式（authorization code）</li><li>密码模式（resource owner password credentials）</li><li>简化(隐式)模式（implicit）</li><li>客户端模式（client credentials）</li></ul><p>不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/FF1A0C184B8240F29405DC53059453FC/52760" alt="0"></p><h4 id="授权码模式" tabindex="-1"><a class="header-anchor" href="#授权码模式"><span>授权码模式</span></a></h4><p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</strong></p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><p>适用场景：目前市面上主流的第三方验证都是采用这种模式</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/B7155C6810524C2C833884997D978C79/52852" alt="0"></p><p>它的步骤如下：</p><p>（A）用户访问客户端，后者将前者导向授权服务器。</p><p>（B）用户选择是否给予客户端授权。</p><p>（C）假设用户给予授权，授权服务器将用户导向客户端事先指定的&quot;重定向URI&quot;（redirection URI），同时附上一个授权码。</p><p>（D）客户端收到授权码，附上早先的&quot;重定向URI&quot;，向授权服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</p><p>（E）授权服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p><ol><li>A网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</li></ol><p>​ &gt; https://b.com/oauth/authorize? &gt; response_type=code&amp; #要求返回授权码（code） &gt; client_id=CLIENT_ID&amp; #让 B 知道是谁在请求 &gt; redirect_uri=CALLBACK_URL&amp; #B 接受或拒绝请求后的跳转网址 &gt; scope=read # 要求的授权范围（这里是只读） &gt;</p><p>客户端申请授权的URI，包含以下参数：</p><ul><li>response_type：表示授权类型，必选项，此处的值固定为&quot;code&quot;</li><li>client_id：表示客户端的ID，必选项</li><li>redirect_uri：表示重定向URI，可选项</li><li>scope：表示申请的权限范围，可选项</li><li>state：表示客户端的当前状态，可以指定任意值，授权服务器会原封不动地返回这个值。</li><li>用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回redirect_uri参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</li></ul><p>​ &gt; https://a.com/callback?code=AUTHORIZATION_CODE #code参数就是授权码 &gt;</p><ol start="3"><li>A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。 用户不可见，服务端行为</li></ol><p>​ &gt; https://b.com/oauth/token? &gt; client_id=CLIENT_ID&amp; &gt; client_secret=CLIENT_SECRET&amp; # client_id和client_secret用来让 B 确认 A 的身份,client_secret参数是保密的，因此只能在后端发请求 &gt; grant_type=authorization_code&amp; # 采用的授权方式是授权码 &gt; code=AUTHORIZATION_CODE&amp; # 上一步拿到的授权码 &gt; redirect_uri=CALLBACK_URL # 令牌颁发后的回调网址 &gt;</p><ol start="4"><li>B 网站收到请求以后，就会颁发令牌。具体做法是向redirect_uri指定的网址，发送一段 JSON 数据。</li></ol><p>​ &gt; { &gt; &quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;, # 令牌 &gt; &quot;token_type&quot;:&quot;bearer&quot;, &gt; &quot;expires_in&quot;:2592000, &gt; &quot;refresh_token&quot;:&quot;REFRESH_TOKEN&quot;, &gt; &quot;scope&quot;:&quot;read&quot;, &gt; &quot;uid&quot;:100101, &gt; &quot;info&quot;:{...} &gt; }</p><h4 id="简化-隐式-模式" tabindex="-1"><a class="header-anchor" href="#简化-隐式-模式"><span>简化(隐式)模式</span></a></h4><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。<strong>RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌，这种方式没有授权码这个中间步骤，所以称为（授权码）&quot;隐藏式&quot;（implicit）</strong></p><p>简化模式不通过第三方应用程序的服务器，直接在浏览器中向授权服务器申请令牌，跳过了&quot;授权码&quot;这个步骤，所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p><p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/32507009E41544D58B96A5C69C690144/52829" alt="0"></p><p>它的步骤如下：</p><p>（A）客户端将用户导向授权服务器。</p><p>（B）用户决定是否给于客户端授权。</p><p>（C）假设用户给予授权，授权服务器将用户导向客户端指定的&quot;重定向URI&quot;，并在URI的Hash部分包含了访问令牌。</p><p>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</p><p>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</p><p>（F）浏览器执行上一步获得的脚本，提取出令牌。</p><p>（G）浏览器将令牌发给客户端。</p><ol><li>A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</li></ol><p>​ &gt; https://b.com/oauth/authorize? &gt; response_type=token&amp; # response_type参数为token，表示要求直接返回令牌 &gt; client_id=CLIENT_ID&amp; &gt; redirect_uri=CALLBACK_URL&amp; &gt; scope=read &gt;</p><ol start="2"><li>用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回redirect_uri参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</li></ol><p>​ &gt; https://a.com/callback#token=ACCESS_TOKEN #token参数就是令牌，A 网站直接在前端拿到令牌。 &gt;</p><h4 id="密码模式" tabindex="-1"><a class="header-anchor" href="#密码模式"><span>密码模式</span></a></h4><p><strong>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为&quot;密码式&quot;（password）。</strong></p><p>在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而授权服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。</p><p>适用场景：自家公司搭建的授权服务器</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/C6AC8F81C7844E1D8D6993410B422946/52843" alt="0"></p><p>它的步骤如下：</p><p>（A）用户向客户端提供用户名和密码。</p><p>（B）客户端将用户名和密码发给授权服务器，向后者请求令牌。</p><p>（C）授权服务器确认无误后，向客户端提供访问令牌。</p><ol><li>A 网站要求用户提供 B 网站的用户名和密码，拿到以后，A 就直接向 B 请求令牌。整个过程中，客户端不得保存用户的密码。</li></ol><p>​ &gt; https://oauth.b.com/token? &gt; grant_type=password&amp; # 授权方式是&quot;密码式&quot; &gt; username=USERNAME&amp; &gt; password=PASSWORD&amp; &gt; client_id=CLIENT_ID &gt; client_secret=client_secret</p><ol start="2"><li>B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</li></ol><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/18CEDD17898249EE8FF057D13DC27347/52779" alt="0"></p><h4 id="客户端模式" tabindex="-1"><a class="header-anchor" href="#客户端模式"><span>客户端模式</span></a></h4><p>客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向&quot;服务提供商&quot;进行授权。</p><p>**适用于没有前端的命令行应用，即在命令行下请求令牌。**一般用来提供给我们完全信任的服务器端服务。</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/8C5B100DAF3946FCB216EBA85CE95EC9/52863" alt="0"></p><p>它的步骤如下：</p><p>（A）客户端向授权服务器进行身份认证，并要求一个访问令牌。</p><p>（B）授权服务器确认无误后，向客户端提供访问令牌。</p><ol><li>A 应用在命令行向 B 发出请求。</li></ol><p>​ &gt; https://oauth.b.com/token? &gt; grant_type=client_credentials&amp; &gt; client_id=CLIENT_ID&amp; &gt; client_secret=CLIENT_SECRET</p><ol start="2"><li>B 网站验证通过以后，直接返回令牌。</li></ol><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/CE29AA45DB6A48ABB425AE51203220CE/52811" alt="0"></p><h3 id="令牌的使用" tabindex="-1"><a class="header-anchor" href="#令牌的使用"><span>令牌的使用</span></a></h3><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个Authorization字段，令牌就放在这个字段里面。</p><p>​ &gt; curl -H &quot;Authorization: Bearer ACCESS_TOKEN&quot; \\ &gt; &quot;https://api.b.com&quot; &gt;</p><p>也可以通过添加请求参数access_token请求数据。</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/D9B393B49FD64E90949330037F6DC559/52788" alt="0"></p><h3 id="更新令牌" tabindex="-1"><a class="header-anchor" href="#更新令牌"><span>更新令牌</span></a></h3><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/7EB990DDBDF545FC8E77F2701427FEF2/52846" alt="0"></p><p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p><p>​ &gt; https://b.com/oauth/token? &gt; grant_type=refresh_token&amp; # grant_type参数为refresh_token表示要求更新令牌 &gt; client_id=CLIENT_ID&amp; &gt; client_secret=CLIENT_SECRET&amp; &gt; refresh_token=REFRESH_TOKEN # 用于更新令牌的令牌 &gt;</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/B57F9B56D3B44B4A8DBB209A976691AD/52766" alt="0"></p><p><strong>3. Spring Security OAuth2快速开始</strong></p><p>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的<strong>安全框架</strong>。Spring Security 主要实现了<strong>Authentication</strong>（认证，解决who are you? ） 和 <strong>Access Control</strong>（访问控制，也就是what are you allowed to do？，也称为<strong>Authorization</strong>）。Spring Security在架构上将认证与授权分离，并提供了扩展点。</p><p><strong>认证（Authentication）</strong> ：用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户的身份信息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维码登录，手机短信登录，指纹认证等方式。</p><p><strong>授权（Authorization）</strong>： 授权是用户认证通过根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访问，没有权限则拒绝访问。</p><p>将OAuth2和Spring Security集成，就可以得到一套完整的安全解决方案。我们可以通过Spring Security OAuth2构建一个授权服务器来验证用户身份以提供access_token，并使用这个access_token来从资源服务器请求数据。</p><p><strong>3.1 授权服务器</strong></p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/723440D836E14FFCB698FA2483C40473/52746" alt="0"></p><ul><li>Authorization Endpoint ：授权端点，进行授权</li><li>Token Endpoint ：令牌端点，经过授权拿到对应的Token</li><li>Introspection Endpoint ：校验端点，校验Token的合法性</li><li>Revocation Endpoint ：撤销端点，撤销授权</li></ul><p><strong>3.2 整体架构</strong></p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/B94F7262129244D8A87151DFA2A3270E/52714" alt="0"></p><p>流程：</p><ol><li>用户访问,此时没有Token。Oauth2RestTemplate会报错，这个报错信息会被Oauth2ClientContextFilter捕获并重定向到授权服务器。</li><li>授权服务器通过Authorization Endpoint(/oauth/authorize)进行授权，并通过AuthorizationServerTokenServices生成授权码并返回给客户端。</li><li>客户端拿到授权码去授权服务器通过Token Endpoint(/oauth/token)调用AuthorizationServerTokenServices生成Token并返回给客户端</li><li>客户端拿到Token去资源服务器访问资源，一般会通过Oauth2AuthenticationManager调用ResourceServerTokenServices进行校验。校验通过可以获取资源。</li></ol><p><strong>3.3 授权码模式</strong></p><p>引入依赖</p>',137),q=r("p",null,"或者 引入spring cloud oauth2依赖",-1),y=c('<p>配置 spring security</p><p>​ @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder passwordEncoder(){ return new BCryptPasswordEncoder(); } @Override protected void configure(HttpSecurity http) throws Exception { http.formLogin().permitAll() .and().authorizeRequests() .antMatchers(&quot;/oauth/**&quot;).permitAll() .anyRequest().authenticated() .and().logout().permitAll() .and().csrf().disable(); } } @Service public class UserService implements UserDetailsService { @Autowired private PasswordEncoder passwordEncoder; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { String password = passwordEncoder.encode(&quot;123456&quot;); return new User(&quot;fox&quot;,password, AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;admin&quot;)); } } @RestController @RequestMapping(&quot;/user&quot;) public class UserController { @RequestMapping(&quot;/getCurrentUser&quot;) public Object getCurrentUser(Authentication authentication) { return authentication.getPrincipal(); } }</p><p>配置授权服务器</p><p>​ @Configuration @EnableAuthorizationServer public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter { @Autowired private PasswordEncoder passwordEncoder; @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception { clients.inMemory() //配置client_id .withClient(&quot;client&quot;) //配置client-secret .secret(passwordEncoder.encode(&quot;123123&quot;)) //配置访问token的有效期 .accessTokenValiditySeconds(3600) //配置刷新token的有效期 .refreshTokenValiditySeconds(864000) //配置redirect_uri，用于授权成功后跳转 .redirectUris(&quot;http://www.baidu.com&quot;) //配置申请的权限范围 .scopes(&quot;all&quot;) //配置grant_type，表示授权类型 .authorizedGrantTypes(&quot;authorization_code&quot;); } }</p><p>配置资源服务器</p><p>​ @Configuration @EnableResourceServer public class ResourceServiceConfig extends ResourceServerConfigurerAdapter { @Override public void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .anyRequest().authenticated() .and().requestMatchers().antMatchers(&quot;/user/**&quot;); } }</p><p>测试</p><p><strong>获取授权码</strong></p><p>http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=client 或者 http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=client&amp;redirect_uri=http://www.baidu.com&amp;scope=all</p><p>登录之后进入</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/297137E3B9A243EB9AAD7283E8ED1FCA/52815" alt="0"></p><p>选择Approve，点击授权获取授权码</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/75CE8DCB6B3A43AAB5756DEF154B82A0/52866" alt="0"></p><p><strong>获取令牌</strong></p><p>根据授权码通过post请求获取</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/A817F6B02DAD4145A4041276FF6549CA/52733" alt="0"></p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/E5A3437038C24822BF833057B8B4F6F8/52728" alt="0"></p><p><strong>访问资源</strong></p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/573E0E88CBC3422692333A6B0796BC17/52741" alt="0"></p><p>或者</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/383EBF30E314446285EDE9E014DA2684/52795" alt="0"></p><p><strong>3.4 简化模式</strong></p><p>authorizedGrantType添加implicit</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/FF60E66D80FD48D08573443DC1580FD9/52723" alt="0"></p><p>测试</p><p>http://localhost:8080/oauth/authorize?client_id=client&amp;response_type=token&amp;scope=all&amp;redirect_uri=http://www.baidu.com</p><p>登录之后进入授权页面，确定授权后浏览器会重定向到指定路径，并以Hash的形式存放在重定向uri的fargment中：</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/284FAD9836854D01971EF09BA28A5F98/52835" alt="0"></p><p><strong>3.5 密码模式</strong></p><p>修改WebSecurityConfig，增加AuthenticationManager</p><p>​ @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Bean public PasswordEncoder passwordEncoder(){ return new BCryptPasswordEncoder(); } @Override protected void configure(HttpSecurity http) throws Exception { http.formLogin().permitAll() .and().authorizeRequests() .antMatchers(&quot;/oauth/**&quot;).permitAll() .anyRequest().authenticated() .and().logout().permitAll() .and().csrf().disable(); } @Bean @Override public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } }</p><p>修改AuthorizationServerConfig配置</p><p>​ @Configuration @EnableAuthorizationServer public class AuthorizationServerConfig2 extends AuthorizationServerConfigurerAdapter { @Autowired private PasswordEncoder passwordEncoder; @Autowired private AuthenticationManager authenticationManagerBean; @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { endpoints.authenticationManager(authenticationManagerBean) //使用密码模式需要配置 .allowedTokenEndpointRequestMethods(HttpMethod.GET,HttpMethod.POST); //支持GET,POST请求 } @Override public void configure(AuthorizationServerSecurityConfigurer security) throws Exception { //允许表单认证 security.allowFormAuthenticationForClients(); } @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception { /** *授权码模式 *http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=client&amp;redirect_uri=http://www.baidu.com&amp;scope=all <em>http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=client * * password模式 * http://localhost:8080/oauth/token?username=fox&amp;password=123456&amp;grant_type=password&amp;client_id=client&amp;client_secret=123123&amp;scope=all * * 客户端模式 * http://localhost:8080/oauth/token?grant_type=client_credentials&amp;scope=all&amp;client_id=client&amp;client_secret=123123 <em>/ clients.inMemory() //配置client_id .withClient(&quot;client&quot;) //配置client-secret .secret(passwordEncoder.encode(&quot;123123&quot;)) //配置访问token的有效期 .accessTokenValiditySeconds(3600) //配置刷新token的有效期 .refreshTokenValiditySeconds(864000) //配置redirect_uri，用于授权成功后跳转 .redirectUris(&quot;http://www.baidu.com&quot;) //配置申请的权限范围 .scopes(&quot;all&quot;) /</em></em> * 配置grant_type，表示授权类型 * authorization_code: 授权码 * password： 密码 * client_credentials: 客户端 */ .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;password&quot;,&quot;client_credentials&quot;); } }</p><p><strong>获取令牌</strong></p><p>通过浏览器测试，需要配置支持get请求和表单验证</p><p>http://localhost:8080/oauth/token?username=fox&amp;password=123456&amp;grant_type=password&amp;client_id=client&amp;client_secret=123123&amp;scope=all</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/2DD30E8F4D034053BF6C0C1476B14850/52805" alt="0"></p><p>通过Postman测试</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/045B87264CFF4F51A22DE1C108F2B04D/52742" alt="0"></p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/7CEA184AB8C946D9864D467422908321/52736" alt="0"></p><p><strong>访问资源</strong></p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/FA0798EB6192451E88FD9239E6D5C2AE/52799" alt="0"></p><p><strong>3.6 客户端模式</strong></p><p><strong>获取令牌</strong></p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/2E810695798E476B803CC33D6A0FC199/52817" alt="0"></p><p><strong>3.7 更新令牌</strong></p><p>使用oauth2时，如果令牌失效了，可以使用刷新令牌通过refresh_token的授权模式再次获取access_token。只需修改认证服务器的配置，添加refresh_token的授权模式即可。</p><p>修改授权服务器配置，增加refresh_token配置</p><p>​ @Autowired private UserService userService; @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { endpoints.authenticationManager(authenticationManagerBean) //使用密码模式需要配置 // .tokenStore(tokenStore) //指定token存储到redis .reuseRefreshTokens(false) //refresh_token是否重复使用 .userDetailsService(userService) //刷新令牌授权包含对用户信息的检查 .allowedTokenEndpointRequestMethods(HttpMethod.GET,HttpMethod.POST); //支持GET,POST请求 } @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception { /** *授权码模式 *http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=client&amp;redirect_uri=http://www.baidu.com&amp;scope=all <em>http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=client * * password模式 * http://localhost:8080/oauth/token?username=fox&amp;password=123456&amp;grant_type=password&amp;client_id=client&amp;client_secret=123123&amp;scope=all * * 客户端模式 * http://localhost:8080/oauth/token?grant_type=client_credentials&amp;scope=all&amp;client_id=client&amp;client_secret=123123 <em>/ clients.inMemory() //配置client_id .withClient(&quot;client&quot;) //配置client-secret .secret(passwordEncoder.encode(&quot;123123&quot;)) //配置访问token的有效期 .accessTokenValiditySeconds(3600) //配置刷新token的有效期 .refreshTokenValiditySeconds(864000) //配置redirect_uri，用于授权成功后跳转 .redirectUris(&quot;http://www.baidu.com&quot;) //配置申请的权限范围 .scopes(&quot;all&quot;) /</em></em> * 配置grant_type，表示授权类型 * authorization_code: 授权码 * password： 密码 * client_credentials: 客户端 * refresh_token: 更新令牌 */ .authorizedGrantTypes(&quot;authorization_code&quot;,&quot;password&quot;,&quot;client_credentials&quot;,&quot;refresh_token&quot;); }</p><p>通过密码模式测试</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/24428592638D4014BAEAEAD68D0D7305/52785" alt="0"></p><p>http://localhost:8080/oauth/token?grant_type=refresh_token&amp;client_id=client&amp;client_secret=123123&amp;refresh_token=dc03bdc2-ca3b-4690-9265-d31a21896d02</p><p>​ <img src="https://note.youdao.com/yws/public/resource/f946cbb0730e5c579002bd3289bfc4d2/xmlnote/02A27643FDDE44219AE17319A12E8930/52774" alt="0"></p><p><strong>3.8 基于redis存储Token</strong></p><p>引入依赖</p>',55),E=r("p",null,"修改application.yaml",-1),C=r("p",null,"​ spring: redis: host: 127.0.0.1 database: 0",-1),w=r("p",null,"编写redis配置类",-1),S=r("p",null,"​ @Configuration public class RedisConfig { @Autowired private RedisConnectionFactory redisConnectionFactory; @Bean public TokenStore tokenStore(){ return new RedisTokenStore(redisConnectionFactory); } }",-1),k=r("p",null,"在授权服务器配置中指定令牌的存储策略为Redis",-1),B=r("p",null,"​ @Autowired private TokenStore tokenStore; @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { endpoints.authenticationManager(authenticationManagerBean) //使用密码模式需要配置 .tokenStore(tokenStore) //指定token存储到redis .reuseRefreshTokens(false) //refresh_token是否重复使用 .userDetailsService(userService) //刷新令牌授权包含对用户信息的检查 .allowedTokenEndpointRequestMethods(HttpMethod.GET,HttpMethod.POST); //支持GET,POST请求 }",-1);function D(v,T){const i=n("groupId"),p=n("artifactId"),a=n("dependency"),s=n("version"),l=n("type"),u=n("scope"),d=n("dependencies"),h=n("dependencyManagement");return m(),b("div",null,[A,r("p",null,[t("​ "),e(a,null,{default:o(()=>[e(i,null,{default:o(()=>[t("org.springframework.boot")]),_:1}),t(),e(p,null,{default:o(()=>[t("spring-boot-starter-security")]),_:1})]),_:1}),t(),e(a,null,{default:o(()=>[e(i,null,{default:o(()=>[t("org.springframework.security.oauth")]),_:1}),t(),e(p,null,{default:o(()=>[t("spring-security-oauth2")]),_:1}),t(),e(s,null,{default:o(()=>[t("2.3.4.RELEASE")]),_:1})]),_:1})]),q,r("p",null,[t("​ "),e(a,null,{default:o(()=>[e(i,null,{default:o(()=>[t("org.springframework.cloud")]),_:1}),t(),e(p,null,{default:o(()=>[t("spring-cloud-starter-oauth2")]),_:1})]),_:1}),_(" spring cloud "),e(h,null,{default:o(()=>[e(d,null,{default:o(()=>[e(a,null,{default:o(()=>[e(i,null,{default:o(()=>[t("org.springframework.cloud")]),_:1}),t(),e(p,null,{default:o(()=>[t("spring-cloud-dependencies")]),_:1}),t(),e(s,null,{default:o(()=>[t("Hoxton.SR8")]),_:1}),t(),e(l,null,{default:o(()=>[t("pom")]),_:1}),t(),e(u,null,{default:o(()=>[t("import")]),_:1})]),_:1})]),_:1})]),_:1})]),y,r("p",null,[t("​ "),e(a,null,{default:o(()=>[e(i,null,{default:o(()=>[t("org.springframework.boot")]),_:1}),t(),e(p,null,{default:o(()=>[t("spring-boot-starter-data-redis")]),_:1})]),_:1}),t(),e(a,null,{default:o(()=>[e(i,null,{default:o(()=>[t("org.apache.commons")]),_:1}),t(),e(p,null,{default:o(()=>[t("commons-pool2")]),_:1})]),_:1})]),E,C,w,S,k,B])}const F=g(f,[["render",D],["__file","index.html.vue"]]),R=JSON.parse('{"path":"/pages/82ddb8/","title":"微服务安全Spring Security OAuth2","lang":"zh-CN","frontmatter":{"title":"微服务安全Spring Security OAuth2","date":"2023-05-04T07:36:32.000Z","permalink":"/pages/82ddb8/","categories":["微服务","Spring Cloud Alibaba"],"tags":[null],"author":{"name":"江"}},"headers":[{"level":2,"title":"OAuth2.0介绍","slug":"oauth2-0介绍","link":"#oauth2-0介绍","children":[{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]}]},{"level":2,"title":"OAuth2的设计思路","slug":"oauth2的设计思路","link":"#oauth2的设计思路","children":[{"level":3,"title":"客户端授权模式","slug":"客户端授权模式","link":"#客户端授权模式","children":[]},{"level":3,"title":"令牌的使用","slug":"令牌的使用","link":"#令牌的使用","children":[]},{"level":3,"title":"更新令牌","slug":"更新令牌","link":"#更新令牌","children":[]}]}],"git":{"createdTime":1709200080000,"updatedTime":1709200080000,"contributors":[{"name":"jiangqingdong","email":"thejqd@gmail.com","commits":1}]},"readingTime":{"minutes":19.08,"words":5724},"filePathRelative":"微服务/10.Spring Cloud Alibaba/150.微服务安全Spring Security OAuth2.md","localizedDate":"2023年5月4日","excerpt":"<h2>OAuth2.0介绍</h2>\\n<p>OAuth（Open Authorization）是一个关于授权（authorization）的开放网络标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容。OAuth在全世界得到广泛应用，目前的版本是2.0版。</p>\\n<p>OAuth协议：https://tools.ietf.org/html/rfc6749</p>\\n<p>协议特点：</p>\\n<ul>\\n<li>简单：不管是OAuth服务提供者还是应用开发者，都很易于理解与使用；</li>\\n<li>安全：没有涉及到用户密钥等信息，更安全更灵活；</li>\\n<li>开放：任何服务提供商都可以实现OAuth，任何软件开发商都可以使用OAuth；</li>\\n</ul>"}');export{F as comp,R as data};
